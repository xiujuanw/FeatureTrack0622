<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;Prototype&quot;" recordid="Prototype">
    <name type="string">Prototype</name>
    <script type="string">function getClass() { return Class; }

function toString() {
	var str = "";
	for (var prop in this) {
		str += prop;
		str += "=";
		str += this[prop];
		str += ", ";		
	}
	return str;
}


var Class = {
  create: function() {
    var parent = null, properties = toArray(arguments);
    if (typeof(properties[0]) == 'function')
      parent = properties.shift();

    function klass() {
      this.initialize.apply(this, arguments);
    }

    Object.extend(klass, Class.Methods);
    klass.superclass = parent;
    klass.subclasses = [];

    if (parent) {
      var subclass = function() { };
      subclass.prototype = parent.prototype;
      klass.prototype = new subclass;
      parent.subclasses.push(klass);
    }

    for (var i = 0; i &lt; properties.length; i++)
      klass.addMethods(properties[i]);

    if (!klass.prototype.initialize)
      klass.prototype.initialize = function() { };

    klass.prototype.constructor = klass;

    klass.prototype.toString = toString;
    
    return klass;
  }
};

Class.Methods = {
  addMethods: function(source) {
    var ancestor   = this.superclass &amp;&amp; this.superclass.prototype;

    for (var property in source) {
      value = source[property];
      if (ancestor &amp;&amp; typeof(value) == 'function' &amp;&amp;
          value.argumentNames()[0] == "$super") {
        var method = value;
        value = (function(m) {
          return function() { return ancestor[m].apply(this, arguments) };
        })(property).wrap(method);
      }
      this.prototype[property] = value;
    }

    return this;
  }
};

Object.extend = function(destination, source) {
  for (var property in source)
    destination[property] = source[property];
  return destination;
};


Object.extend(Function.prototype, {
  argumentNames: function() {
    var names = this.toString().match(/^[\s\(]*function[^(]*\(([^\)]*)\)/)[1]
      .replace(/\s+/g, '').split(',');
    return names.length == 1 &amp;&amp; !names[0] ? [] : names;
  },

  bind: function() {
    if (arguments.length &lt; 2 &amp;&amp; typeof(arguments[0]) == 'undefined') return this;
    var __method = this, args = toArray(arguments), object = args.shift();
    return function() {
      return __method.apply(object, args.concat(toArray(arguments)));
    }
  },

  wrap: function(wrapper) {
    var __method = this;
    return function() {
      return wrapper.apply(this, [__method.bind(this)].concat(toArray(arguments)));
    }
  }

});

function toArray(iterable) {
  var length = iterable.length || 0, results = new Array(length);
  while (length--) results[length] = iterable[length];
  return results;
}</script>
    <package type="string">BDM</package>
    <sysmodtime type="dateTime">11/26/09 00:22:43</sysmodtime>
    <sysmoduser type="string">jinliu</sysmoduser>
    <sysmodcount type="decimal">1</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
