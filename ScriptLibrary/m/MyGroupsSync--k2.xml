<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;MyGroupsSync&quot;" recordid="MyGroupsSync">
    <name type="string">MyGroupsSync</name>
    <script type="string">/**
 * @fileOverview  Provide the functions to Sync Data between myGroups and assignment
 * @author Mi Quan
 * @date Dec. 2014/4/8
 */
 
var $ = lib.c.$;

var _index = funcs.index;


/**
 * @private
 * @description  update Assignment from approverOld to approverNew
 * @param {String} assignmentName - Assignment
 * @param {String} approverOld - Approver
 * @param {String} approverNew - Approver
 * 
 */ 
function updateAssignmentbyApprover(assignmentName,approverOld,approverNew){

	var assignment = new SCFile("assignment");
    var rc = assignment.doSelect("name=\""+assignmentName+"\"");
    if ( rc == RC_SUCCESS )	{     
	    if(approverOld == null) {
	    
	    	if(_index(approverNew,assignment.approvers)==0)
		    {
		     assignment.approvers.push(approverNew);
		     vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,assignment.approvers, 0, 0);
		     assignment.doUpdate();  
		    }
	    
	    } else {
	    
		    var aindex=_index(approverOld,assignment.approvers)-1;
		    if(aindex&gt;=0)
		    {
		     assignment.approvers[aindex]=approverNew;
		    }
		    vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,assignment.approvers, 0, 0);
	    	assignment.approvers=funcs.denull(assignment.approvers);
	    	assignment.doUpdate();
	    }
    }
} 


/**
 * @private
 * @description  update myGroup from approverOld to approverNew (Assignment)
 * @param {String} assignmentName - Assignment
 * @param {String} approverOld - Approver
 * @param {String} approverNew - Approver
 * 
 */
function updateMyGroupsbyApprover(myGroup, approverOld, approverNew){

 	var mygroup = new SCFile("myGroups"); 
 	var rc= mygroup.doSelect("name=\""+ myGroup +"\""); 	
 	
 	if (approverOld ==null )  {  	
 		 
		   if(myGroup!=null &amp;&amp; rc == RC_SUCCESS)
		   {
		    if(_index(approverNew,mygroup.approver_of)==0)
		    {
		     mygroup.approver_of.push(approverNew);
		     vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,mygroup.approver_of, 0, 0);
		     mygroup.doUpdate();
		   
		    }
		   }
		   else
		   {
		    if(myGroup!=null &amp;&amp; myGroup!="")
		    {
		     mygroup = new SCFile("myGroups");
		     mygroup.name=myGroup;
		     mygroup.approver_of[0]=approverNew;
		     mygroup.doInsert();
		    } 
		   }
	}else {
 	 		
 	 	if ( rc == RC_SUCCESS )	{
		    var aindex=_index(approverOld,mygroup.approver_of)-1;
		    if(aindex&gt;=0)
		    {
		     mygroup.approver_of[aindex]=approverNew;
		    }
		    vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,mygroup.approver_of, 0, 0);
		    mygroup.approver_of=funcs.denull(mygroup.approver_of);
		    mygroup.doUpdate(); 
	    
	    }
	}
} 


/**
 * @private
 * @description  update Assignment from operatorOld to operatorNew 
 * @param {String} assignmentName - Assignment
 * @param {String} operatorOld - Operator
 * @param {String} operatorNew - Operator
 * 
 */
function updateAssignmentbyOperator(assignmentName,operatorOld,operatorNew){

 	assignment = new SCFile("assignment");
    var rc = assignment.doSelect("name=\""+assignmentName+"\"");
    if ( rc == RC_SUCCESS )	{
	    if (operatorOld ==null ) {
		    if(_index(operatorNew,assignment.operators)==0)
		    {
		     assignment.operators.push(operatorNew);
		     vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,assignment.operators, 0, 0);
		     assignment.doUpdate();
		    }
	    
	    } else  {    
		    var aindex=_index(operatorOld,assignment.operators)-1;
		    if(aindex&gt;=0)
		    {
		     assignment.operators[aindex]=operatorNew;
		    }
		    vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,assignment.operators, 0, 0);
		    assignment.operators=funcs.denull(assignment.operators);	
		    assignment.doUpdate();
		}
	}	 
} 

/**
 * @private
 * @description  update myGroup from operatorOld to operatorNew (Assignment)
 * @param {String} myGroup - MyGroup
 * @param {String} operatorOld - Operator
 * @param {String} operatorNew - Operator
 * 
 */
function updateMyGroupsbyOperator(myGroup,operatorOld,operatorNew) { 

	var mygroup = new SCFile("myGroups");	
	var rc = mygroup.doSelect("name=\""+myGroup+"\"");
	
	if (operatorOld == null )  {  
		    
		   if(myGroup!=null &amp;&amp; rc==RC_SUCCESS)
		   {   
		    if(_index(operatorNew,mygroup.member_of)==0)
		    {
		     mygroup.member_of.push(operatorNew);
		     vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,mygroup.member_of, 0, 0);
		     mygroup.doUpdate();
		 
		    }
		   }
		   else
		   {
		    if(myGroup!=null &amp;&amp; myGroup!="")
		    {
		     mygroup = new SCFile("myGroups");
		     mygroup.name=myGroup;
		     mygroup.member_of[0]=operatorNew;
		     mygroup.doInsert();
		    } 
		   }
	
	}else
	{		
	    if ( rc == RC_SUCCESS )	{   	    
		    var aindex=_index(operatorOld,mygroup.member_of)-1;
		    if(aindex&gt;=0)
		    {
		     mygroup.member_of[aindex]=operatorNew;
		    } 
		     
		    vars.$L_sf=funcs.rtecall("sort", vars.$L_rc,mygroup.member_of, 0, 0);
		    mygroup.member_of=funcs.denull(mygroup.member_of);	
		    mygroup.doUpdate();
		}
	}

}



/**
 * @public
 * @description  Sync to Assignment when My Groups is updated
 * @param {MyGroup} oldrecord - MyGroup
 * @param {MyGroup} record - MyGroup
 * 
 */
function syncToAssignmentWhenMyGroupsChange(oldrecord, record) {

    var i;

    if (oldrecord == null) {
        var length_approver = record.approver_of.length();
        var length_operator = record.member_of.length();

        for (i = 0; i &lt; length_approver; i++) {
            updateAssignmentbyApprover(record.approver_of[i], null, record.name);
        }

        for (i = 0; i &lt; length_operator; i++) {
            if (record.member_of[i] == null) {
                continue;
            }
            updateAssignmentbyOperator(record.member_of[i], null, record.name);
        }
    } else {
        // if name is changed 
        if (oldrecord.name != record.name) {

            var length_member_old = record.member_of.length();
            var length_approver_old = oldrecord.approver_of.length();

            // update approver in assignment 
            for (i = 0; i &lt; length_approver_old; i++) {
                if (oldrecord.approver_of[i] != null) {
                    updateAssignmentbyApprover(oldrecord.approver_of[i], oldrecord.name, record.name);
                }
            }

            // update operators in assignment  
            for (i = 0; i &lt; length_member_old; i++) {
                if (oldrecord.member_of[i] != null) {
                    updateAssignmentbyOperator(oldrecord.member_of[i], oldrecord.name, record.name);
                }
            }
        }

        // update approvers
        if (oldrecord.approver_of.toString() != record.approver_of.toString()) {

            var length_approver = record.approver_of.length();
            var length_approver_old = oldrecord.approver_of.length();

            for (i = 0; i &lt; length_approver_old; i++) {
                if (oldrecord.approver_of[i] != null &amp;&amp; _index(oldrecord.approver_of[i], record.approver_of) == 0) {
                    updateAssignmentbyApprover(oldrecord.approver_of[i], oldrecord.name, null);
                }
            }

            for (i = 0; i &lt; length_approver; i++) {
                if (record.approver_of[i] != null) {
                    updateAssignmentbyApprover(record.approver_of[i], null, record.name);
                }
            }
        }

        // update members
        if (oldrecord.member_of.toString() != record.member_of.toString()) {

            var length_member = record.member_of.length();
            var length_member_old = oldrecord.member_of.length();

            // remove operator from assignment
            for (i = 0; i &lt; length_member_old; i++) {
                if (oldrecord.member_of[i] != null &amp;&amp; _index(oldrecord.member_of[i], record.member_of) == 0) {
                    updateAssignmentbyOperator(oldrecord.member_of[i], oldrecord.name, null);
                }
            }

            for (i = 0; i &lt; length_member; i++) {
                if (record.member_of[i] != null) {
                    updateAssignmentbyOperator(record.member_of[i], null, record.name);
                }
            }
        }
    }
    
}

 
/**
 * @public
 * @description  Sync to Assignment when My Groups is deleted
 * @param {MyGroup} oldrecord - MyGroup
 * 
 */
function syncToAssignmentWhenMyGroupsDelete(oldrecord){
 
   var length_approver = oldrecord.approver_of.length();
   var length_member = oldrecord.member_of.length();
   var i;
 
  for(i=0;i&lt;length_approver;i++){

   if(oldrecord.approver_of[i]!=null){
    
    updateAssignmentbyApprover(oldrecord.approver_of[i],oldrecord.name, null);
   
   }
    
  }
 
  for(i=0;i&lt;length_member;i++) {
  
   if(oldrecord.member_of[i]!=null){
   
    updateAssignmentbyOperator(oldrecord.member_of[i],oldrecord.name, null);   
   
   }
  }
 
}


/**
 * @public
 * @description  Sync to MyGroup when Assignment is updated
 * @param {Assignment} oldrecord - Assignment
 * @param {Assignment} record - Assignment
 * 
 */
function syncToMyGroupsWhenAssignmentChange(oldrecord,record){

    var i;
     
    if (oldrecord ==null) {
 		var length_approver = record.approvers.length();
 	    var length_operator = record.operators.length(); 
 		
 		for(i=0;i&lt;length_approver;i++)  {  
		    updateMyGroupsbyApprover(record.approvers[i],null,record.name); 
		}
		
		for(i=0;i&lt;length_operator;i++)  {
		   if (record.operators[i] == null) {
		      continue;
		   }
		   updateMyGroupsbyOperator(record.operators[i],null,record.name);   
		 }
 
    } else {
	   if(oldrecord.name!=record.name){
	 
	 	  var length_approver_old = oldrecord.approvers.length();
	 	  var length_operator_old = oldrecord.operators.length();
	 
		  for(i=0;i&lt;length_approver_old ; i++) {
		   if(oldrecord.approvers[i]!=null)  {
		    updateMyGroupsbyApprover(oldrecord.approvers[i], oldrecord.name, record.name);    
		   }
		  }
		  
		  for(i=0;i&lt;length_operator_old;i++)  {
		   if(oldrecord.operators[i]!=null)  {   
		    updateMyGroupsbyOperator(oldrecord.operators[i],oldrecord.name,record.name);
		   }
		  } 
	 }
 
	 if(oldrecord.approvers.toString()!=record.approvers.toString()) {
	 	
	 	  var length_approver_old = oldrecord.approvers.length();
	 	  var length_approver = record.approvers.length();
	 
		  for(i=0;i&lt;length_approver_old;i++) {
		  
		   if(oldrecord.approvers[i]!=null &amp;&amp; _index(oldrecord.approvers[i],record.approvers)==0)  {
		    updateMyGroupsbyApprover(oldrecord.approvers[i],oldrecord.name, null);
		   }
		  }
		 
		  for(i=0;i&lt;length_approver;i++)  {  
		    updateMyGroupsbyApprover(record.approvers[i],null,record.name); 
		  }
	 } 
 
	 if(oldrecord.operators.toString()!=record.operators.toString()) { 
	 	
	 	  var length_operator_old = oldrecord.operators.length();
	 	  var length_operator = record.operators.length();
	
		  for(i=0;i&lt;length_operator_old;i++) {
		   if(oldrecord.operators[i]!=null &amp;&amp; _index(oldrecord.operators[i],record.operators)==0)   {
		    updateMyGroupsbyOperator(oldrecord.operators[i],oldrecord.name,null) ;
		   }
		  }
		  
		  for(i=0;i&lt;length_operator;i++)  {
		  
		   if (record.operators[i] == null) {
		      continue;
		   }
		   updateMyGroupsbyOperator(record.operators[i],null,record.name);   
		   }
		} 
	 
	 }
}


/**
 * @public
 * @description  Sync to MyGroup when Assignment is deleted
 * @param {Assignment} oldrecord - Assignment
 * 
 */
function syncToMyGroupsWhenAssignmentDelete(oldrecord) {
 
  var length_approver = oldrecord.approvers.length();
  var length_operator = oldrecord.operators.length();
  var i;
  
  for(i=0;i&lt;length_approver;i++)  {
  
   if(oldrecord.approvers[i]!=null)   {   
    updateMyGroupsbyApprover(oldrecord.approvers[i],oldrecord.name,null) ;
   } 
  }
  
  for(i=0;i&lt;length_operator;i++)  {
  
   if(oldrecord.operators[i]!=null)   {
    updateMyGroupsbyOperator(oldrecord.operators[i],oldrecord.name,null) ;   
   } 
  }
 
}


/**
 * @public
 * @description  get ApprovalOf in myGroups
 * @param {String} operatorName - String
 * 
 */
function getApprovalOfInMyGroups(operatorName) {

	var mygroup = new SCFile("myGroups", SCFILE_READONLY);    
	mygroup.setFields("approver.of");		
	
	var rc= mygroup.doSelect("name=\""+operatorName+"\"");
    if ( rc == RC_SUCCESS )	{    
    	if (mygroup.approver_of!=null) {	 
   	 		return mygroup.approver_of.	toArray();
   	    }
   	 	else { 
   	 		return null;
   	 	}
    }else {
    	return null;
    }
}


/**
 * Synchronize all myGroups records
 *
 * You can execute this function to correct all myGroups records.
 */
function synchronizeAllMyGroups() {
    
    $("myGroups").selectAll().iterate(function(groups) {
    
        var memberUpdate = checkMyGroupsSyncStatus(groups, "member.of");
        var approverUpdate = checkMyGroupsSyncStatus(groups, "approver.of");
        
        if (memberUpdate || approverUpdate) {
            print(funcs.scmsg(201, "object", ["myGroups", groups.name]));
            groups.doUpdate();
        }
    });
}


/**
 * Check myGroups record synchronize status, correct data if not synchronized.
 * 
 * @param {SCFile}  groups
 * @param {String}  field
 * @returns {Boolean} true if need update
 */
function checkMyGroupsSyncStatus(groups, field) {

    var members = groups[field];
    
    if (members == null) {
        return false;
    }
    
    var needUpdate = false;

    var i, length = members.length(); 
    for (i = 0; i &lt; length; i++) {
        var member = members[i];
        if (member == null || member.length == 0) {
            continue;
        }
        
        var assignment = $("assignment", SCFILE_READONLY).setFields("name").select('name="' + member + '"').uniqueResult();

        // name may not same in case insensitive db
        if (assignment != null &amp;&amp; member != assignment.name) {
//            print(groups.name + ": " + member);
            // correct data
            members[i] = assignment.name;
            needUpdate = true;
        }
    }
    
    if (needUpdate) {
        var rc = new SCDatum();
        funcs.rtecall("sort", rc, groups[field], 0, 0);
        groups[field] = funcs.denull(groups[field]);
    }
    
    return needUpdate;
}
</script>
    <package type="string">User</package>
    <sysmodtime type="dateTime">02/21/19 18:16:18</sysmodtime>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodcount type="decimal">244</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
