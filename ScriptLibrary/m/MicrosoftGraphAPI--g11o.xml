<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;MicrosoftGraphAPI&quot;" recordid="MicrosoftGraphAPI">
    <name type="string">MicrosoftGraphAPI</name>
    <script type="string">var logger = getLog("MicrosoftGraphAPI");

const DEFAULT_ACCEPT_TYPES = [
    "text/html",
    "text/plain",
    "application/json"
];

const msGraphEndPoint = lib.MicrosoftTeamsConstants.API_ENDPOINT();

// proxy
var proxyHost;
var proxyPort;
var proxyUsername;
var proxyPassword;


/**
 * set log level
 *
 * @param {String} level
 */
function setLoggerLevel(level) {
    logger.setLevel(level);
    lib.AzureAuthentication.setLoggerLevel(level);
}


/**
 * set proxy information
 *
 * @param {String} host
 * @param {Number} port
 * @param {String} username
 * @param {String} password
 */
function setProxy(host, port, username, password) {
    if (!host) {
        proxyHost = null;
        proxyPort = null;
        proxyUsername = null;
        proxyPassword = null;
    } else {
        proxyHost = host;
        proxyPort = port;
        proxyUsername = username;
        proxyPassword = password;
    }
}


/**
 * invoke MS Graph API
 *
 * @param   {String}    method 
 * @param   {String}    resource 
 * @param   {Array}     headers 
 * @param   {String}    body 
 * @param   {Object}    respHeaders
 * @param   {Boolean}   binaryResponseData
 * @returns {String}
 */
function api(method, resource, headers, body, respHeaders, binaryResponseData) {

    // get access token
    var module = lib.MicrosoftTeamsConstants.API_MODULE();
    var tokenObj = lib.AzureAuthentication.getAccessToken(module);

    // error occurred when retrieving access token
    if (tokenObj.error) {
        return JSON.stringify(tokenObj);
    }

    var token = tokenObj.accessToken;

    var url = msGraphEndPoint + standardizeResource(resource);

    if (!headers) {
        headers = [
            new Header("Content-type", "application/json"),
            new Header("Accept", DEFAULT_ACCEPT_TYPES.join(","))
        ];
    }

    if (logger.isDebugEnabled()) {
        logger.debug("api request method: " + method);
        logger.debug("api request url: " + url);

        var headerInfo = '[';
        var i;
        for (i = 0; i &lt; headers.length; i++) {
            if (i &gt; 0) {
                headerInfo += ',';
            }
            headerInfo += '"' + headers[i].name + '":"' + headers[i].value + '"';
        }
        headerInfo += ']';
        logger.debug("api request headers: " + headerInfo);

        if (body) {
            logger.debug("api request body: " + body);
        }
    }

    // add token last to avoid output in log
    headers.push(new Header("Authorization", "Bearer " + token));

    if (!respHeaders) {
        respHeaders = {};
    }

    // proxy
    if (!proxyHost) {
        proxyHost = lib.MicrosoftTeamsConfiguration.getProxyHost();

        if (proxyHost) {
            proxyPort = lib.MicrosoftTeamsConfiguration.getProxyPort();
            proxyUsername = lib.MicrosoftTeamsConfiguration.getProxyUsername();
            proxyPassword = lib.MicrosoftTeamsConfiguration.getProxyPassword();
        }
    }
    if (!proxyHost) {
        proxyPort = null;
        proxyUsername = null;
        proxyPassword = null;
    }
    if (logger.isDebugEnabled()) {
        logger.debug("proxy host: " + proxyHost + ", port: " + proxyPort + ", user name: " + proxyUsername);
    }

    var response;
    try {
        response = doHTTPRequest(method, url, headers, body, 0, 0, 0, respHeaders, false, binaryResponseData, true,
            proxyHost, proxyPort, proxyUsername, proxyPassword);
    } catch (e) {
        logger.error(e);
        response = JSON.stringify({
            error: {
                code: "ConnectionError",
                message: typeof e == "string" ? e : e.message
            }
        });
    }

    if (logger.isDebugEnabled()) {
        logger.debug("api response code: " + respHeaders.returnCode);
        logger.debug("api response headers: " + JSON.stringify(respHeaders));
        if (!binaryResponseData) {
            logger.debug("api response body: " + response);
        }
    }

    return response;
}


/**
 * standardize resource, by adding version if not have
 *
 * @param {String} resource
 * @returns {String}
 */
function standardizeResource(resource) {
    if (!resource) {
        return resource;
    }
    
    if (resource.indexOf("/v1.0") == 0 || resource.indexOf("/beta") == 0) {
        return resource;
    }

    return "/v1.0" + resource;
}


/**
 * get resource by link directly
 */
function resourceLink(link) {
    var resource = link;
    if (link.indexOf(msGraphEndPoint) == 0) {
        resource = link.substring(msGraphEndPoint.length);
    }

    return api("GET", resource);
}


/**
 * get current user information
 *
 * @see https://docs.microsoft.com/en-us/graph/api/user-get
 */
function me(queryParams) {
    var resource = `/me`;
    if (queryParams) {
        resource += "?" + queryParams;
    }
    return api("GET", resource);
}


/**
 * retrieve the properties and relationships of user object
 *
 * @see https://docs.microsoft.com/en-us/graph/api/user-get
 */
function user(userId, queryParams) {
    var resource = `/users/${userId}`;
    if (queryParams) {
        resource += "?" + queryParams;
    }
    return api("GET", resource);
}


/**
 * list joined teams
 *
 * @see https://docs.microsoft.com/en-us/graph/api/user-list-joinedteams
 */
function joinedTeams() {
    return api("GET", `/me/joinedTeams`);
}


/**
 * list owned objects
 *
 * @see https://docs.microsoft.com/en-us/graph/api/user-list-ownedobjects
 */
function ownedObjects(queryParams) {
    var resource = `/me/ownedObjects`;
    if (queryParams) {
        resource += "?" + queryParams;
    }
    return api("GET", resource);
}


/**
 * retrieve the properties and relationships of the specified team
 *
 * @see https://docs.microsoft.com/en-us/graph/api/team-get
 */
function team(teamId) {
    return api("GET", `/teams/${teamId}`);
}


/**
 * retrieve the list of channels in the team
 *
 * @see https://docs.microsoft.com/en-us/graph/api/channel-list 
 */
function teamChannels(teamId) {
    return api("GET", `/teams/${teamId}/channels`);
}


/**
 * retrieve the list of members from a channel
 *
 * @see https://docs.microsoft.com/en-us/graph/api/channel-list-members
 */
function channelMembers(teamId, channelId) {
    return api("GET", `/teams/${teamId}/channels/${channelId}/members`);
}


/**
 * get the metadata for the location where the files of a channel are stored
 *
 * @see https://docs.microsoft.com/en-us/graph/api/channel-get-filesfolder
 */
function channelFilesFolder(teamId, channelId) {
    return api("GET", `/teams/${teamId}/channels/${channelId}/filesFolder`);
}


/**
 * return a collection of DriveItems in the children relationship of a DriveItem
 *
 * @see https://docs.microsoft.com/en-us/graph/api/driveitem-list-children
 */
function driveItemChildren(driveId, driveItemId, queryParams) {
    var resource = `/drives/${driveId}/items/${driveItemId}/children`;
    if (queryParams) {
        resource += "?" + queryParams;
    }

    return api("GET", resource);
}


/**
 * download the contents of a DriveItem
 *
 * @see https://docs.microsoft.com/en-us/graph/api/driveitem-get-content
 */
function driveItemContent(mimeType, driveId, driveItemId) {

    var types = [];
    if (mimeType &amp;&amp; types.indexOf(mimeType) == -1) {
        types = [mimeType];
    }

    types = types.concat(DEFAULT_ACCEPT_TYPES);

    var headers = [
        new Header("Content-type", "application/json"),
        new Header("Accept", types.join(","))
    ];
    return api("GET", `/drives/${driveId}/items/${driveItemId}/content`, headers, null, null, true);
}


/**
 * create a new chatMessage in the specified channel
 *
 * @see https://docs.microsoft.com/en-us/graph/api/chatmessage-post
 */
function postChannelMessage(teamId, channelId, messageObj) {
    return api("POST", `/teams/${teamId}/channels/${channelId}/messages`, null, JSON.stringify(messageObj));
}


/**
 * list all the replies of a message in a channel of a team
 *
 * @see https://docs.microsoft.com/en-us/graph/api/chatmessage-list-replies
 */
function channelMessageReplies(teamId, channelId, messageId) {
    return api("GET", `/teams/${teamId}/channels/${channelId}/messages/${messageId}/replies`);
}


/**
 * create a new reply to a message in a specified channel
 *
 * @see https://docs.microsoft.com/en-us/graph/api/channel-post-messagereply 
 */
function replyMessage(teamId, channelId, messageId, replyObj) {
    return api("POST", `/teams/${teamId}/channels/${channelId}/messages/${messageId}/replies`, null, JSON.stringify(replyObj));
}


/**
 * combine multiple requests in one HTTP call using JSON batching
 *
 * @see https://docs.microsoft.com/en-us/graph/json-batching
 */
function jsonBatch(body) {
    return api("POST", "/v1.0/$batch", null, body);
}</script>
    <package type="string">MicrosoftTeams</package>
    <sysmodtime type="dateTime">06/15/21 00:48:40</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
