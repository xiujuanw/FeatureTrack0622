<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;SMOMi_SMISAdapter&quot;" recordid="SMOMi_SMISAdapter">
    <name type="string">SMOMi_SMISAdapter</name>
    <script type="string">
/*
 *
 */

var Class = lib.smis_Prototype.getClass();
var getParmeterValue = lib.smis_ConfigurationManager.getSMISConfigurationParameterValue

function getClass() {
	return Class.create({
	
	  configItem : null,
	
	  initialize: function(configItem) {
	    this.configItem = configItem;
	  },
	  
	  sendRecord: function( record, action ) {
	    return __updateOMi( record, this.configItem );
	  },
  
	  getFields: function() {
	  }
	  
	  
	});
}

function __updateOMi( record, configItem ) {
	var b = true;
	if( record ) {
		var incident = lib.SMOMiUtil.getRecordsFromFile( "probsummary", 'number="' + record.id + '"' );
		if( incident ) {
			try {
				lib.SMOMi.updateOMi( incident );
			}catch( ex ) {
				print( "update OMi exception: " + ex );
				b = false;
			}
		}
	}
	
	return b;
}

function pushTaskIntoSMIS( incident ) {
	if( incident ) {
		var intId = lib.SMOMi.getSMOMiIntIdInSMIS(incident);
		var task = new ( lib.smis_Task.getClass() )( intId );
  		task.inRecord = { id:incident.number };
  		task.direction = lib.smis_Constants.MAPPING_DIRECTION_LEFTRIGHT();
		lib.smis_TaskManager.pushTaskWithId( task, task.inRecord.id );
	}
}

function removeTaskFromSMIS( incident ) {
	if( incident ) {
		var intId = lib.SMOMi.getSMOMiIntIdInSMIS(incident);
		lib.smis_TaskManager.removeTaskWithId( intId, incident.number );
	}
}



function testConnect(configFile){
    var targetUrl = getParmeterValue(vars.$L_file, "omi.server.url");
    var userName = getParmeterValue(vars.$L_file, "username");
    var userPassword = getParmeterValue(vars.$L_file, "password");
    try {
        var requestURL = targetUrl.substring(0, targetUrl.indexOf('synchronization'));
        var respHeaders = {};
        var response = lib.smis_RestClient.doRESTGetRequest(requestURL, lib.smis_RestClient.createBasicAuthHttpHeaders("en", userName, userPassword), 15, 15, 15, respHeaders);
        var httpCode = respHeaders['returnCode'];

        if (httpCode == '401') {
            throw new Error('HTTP Status 401 - Unauthorized');
        }
    } catch (ex) {
        return system.functions.scmsg(117, "smis") + "\r\n" + ex;
    }
    return system.functions.scmsg(116, "smis");
}
</script>
    <package type="string">Integration</package>
    <sysmodtime type="dateTime">11/16/20 01:02:42</sysmodtime>
    <sysmoduser type="string">qiqingsong</sysmoduser>
    <sysmodcount type="decimal">5</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
