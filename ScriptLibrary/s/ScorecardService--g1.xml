<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;ScorecardService&quot;" recordid="ScorecardService">
    <name type="string">ScorecardService</name>
    <script type="string">var debug = 0;
var JSON = {
    "stringify": rteJSONStringify,
    "parse": rteJSONParse
};
var toJSON = lib.JSON2.toJSON;

var common = lib.ScorecardCommon;
var license = lib.ScorecardLicense;

function queryLicenseInfo()
{
	/* contruct struct */
	var meta = {
	'expirationDate':'',
	'loginLicFields':[],
	'unlimitedLicFields':[],
	'limitedLicFields':[],
	};
	var licInfo = {
		"meta":"",
		"loginLics":[],
		"foundationLics":[],
		"scautoLics":[],
		"helpdeskLics":[],
		"moduleLics":[]
	}; 
	var len = 0;
	var count = 0;
	var module="";
	var lic = getLicInfo();
	var jlic = JSON.parse(lic);
	meta["expirationDate"] = jlic.EXPIRATION;
	/* process Fields */
	module = common.setField("licenseName",funcs.scmsg('licenseName','ScoreCard'));
	meta['loginLicFields'].push(module);
	meta['unlimitedLicFields'].push(module);
	meta['limitedLicFields'].push(module);
	module = common.setField("licUsed",funcs.scmsg('licUsed','ScoreCard'));
	meta['loginLicFields'].push(module);
	module = common.setField("licAvail",funcs.scmsg('licAvail','ScoreCard'));
    meta['loginLicFields'].push(module);
	
	module = common.setField("namedLicState",funcs.scmsg('namedLicState','ScoreCard'));
	meta['unlimitedLicFields'].push(module);
	module = common.setField("floatingLicState",funcs.scmsg('floatingLicState','ScoreCard'));
	meta['unlimitedLicFields'].push(module);
    
	module = common.setField("namedLicUsed",funcs.scmsg('namedLicUsed','ScoreCard'));
	meta['limitedLicFields'].push(module);
	module = common.setField("namedLicAvail",funcs.scmsg('namedLicAvail','ScoreCard'));
	meta['limitedLicFields'].push(module);
	module = common.setField("floatingLicUsed",funcs.scmsg('floatingLicUsed','ScoreCard'));
	meta['limitedLicFields'].push(module);
	module = common.setField("floatingLicAvail",funcs.scmsg('floatingLicAvail','ScoreCard'));
	meta['limitedLicFields'].push(module);
	
	/* process HELPDESK */
	len = jlic.HELPDESK.length;
	for(count = 0; count &lt; len; count++)
	{
		if (jlic.HELPDESK[count].licenseName == "Self Service Ticketing")
		{
			module = license.setLoginLic(jlic.HELPDESK[count].licenseName,jlic.HELPDESK[count].essLoginLicUsed, "Unlimited");
			licInfo['loginLics'].push(module);
		}
		else
		{
			licInfo['helpdeskLics'].push(jlic.HELPDESK[count]);
		}
	}
	/* process OTHER  */
	len = jlic.OTHER.length;
	for(count = 0; count &lt; len; count++)
	{
		licInfo['moduleLics'].push(jlic.OTHER[count]);
	}
	/* process FOUNDATION  */
	len = jlic.FOUNDATION.length;
	for(count = 0; count &lt; len; count++)
	{
		if (jlic.FOUNDATION[count].hasOwnProperty('namedLicUsed'))
		{
			module = license.setStateModuleLic(jlic.FOUNDATION[count].licenseName,jlic.FOUNDATION[count].namedLicUsed+"/"+jlic.FOUNDATION[count].namedLicAvail,
				jlic.FOUNDATION[count].floatingLicUsed+"/"+jlic.FOUNDATION[count].floatingLicAvail);
			licInfo['foundationLics'].push(module);
		}
		else
		{
			licInfo['foundationLics'].push(jlic.FOUNDATION[count]);
		}
	}
	
	/* process SMAUTO  */
	len = jlic.SMAUTO.length;
	for(count = 0; count &lt; len; count++)
	{
		module = license.setStateModuleLicSCAuto(jlic.SMAUTO[count].licenseName,jlic.SMAUTO[count].namedLicState);
		licInfo['scautoLics'].push(module);
	}
	
	module = license.setLoginLic("Login License (Named)",jlic.BASE[0].namedLicUsed,jlic.BASE[0].namedLicAvail);
	licInfo['loginLics'].push(module);
	module = license.setLoginLic("Login License (Floating)",jlic.BASE[0].floatingLicUsed,jlic.BASE[0].floatingLicAvail);
	licInfo['loginLics'].push(module);
	licInfo["meta"]= meta;
	return licInfo;
}

function getPercentage(msg)
{
    var tmp = msg.substr(0,msg.length-1);
    var num = parseFloat((tmp/100.0).toFixed(4));
    return num;
}

function getCurrentHostInfo(line,record)
{
    var host = {
        "name":"",
        "sessionUsage": "",
        "serverInstanceCount": 0,
        "systemProcessCount": 0,
        "cpuCores":0,
        "cpuUsage":0.0,
        "memUsage":"",
        "serverInstances":[],
        "systemProcesses": []
    };
    
    if (line &lt; record['hosts_all'].hosts_all_name.length())
    {
        var name = record['hosts_name'][line]
        var len = record['hosts_all'].hosts_all_name.length();
        var prcCount = 0;
        var prcNonCount = 0;
        var i = 0;
        
        for(i = 0; i &lt; len; i++)
        {
            if (record['hosts_all'].hosts_all_name[i] == name)
            {
                if (record['hosts_all'].hosts_all_server[i] == true)
                {
                    var server = record['hosts_all'].hosts_all_data[i].split(",");
                    var serverInstance = {
				        "sessions": "",
				        "processId": 0,
				        "httpPort": 0,
				        "dbgMode": "",
				        "lb": "",
				        "qMode": "",
				        "state": "",
				        "httpsPort": 0,
				        "clusterAddress": "",
				        "lowMem": "",
				        "cpuUsage": 0.0,
				        "memUsed": 0
				    };
                    serverInstance['processId'] = parseInt(server[0]);
                    serverInstance['clusterAddress'] = server[1];
                    serverInstance['state'] = server[2];
                    serverInstance['lowMem'] = server[3];
                    serverInstance['httpPort'] = (parseInt(server[4])==0)? null:parseInt(server[4]);
                    serverInstance['httpsPort'] = (parseInt(server[5])==0)? null:parseInt(server[5]);;
                    serverInstance['sessions'] = server[6];
                    serverInstance['dbgMode'] = server[7];
                    serverInstance['qMode'] = server[8];
                    serverInstance['lb'] = server[9];
                    serverInstance['cpuUsage'] = getPercentage(server[11]);
                    serverInstance['memUsed'] = lib.ScorecardServlet.convertMemeoryMB2GB(server[12]);
                    host['serverInstances'].push(serverInstance);
                    prcCount++;
                }
                else
                {
                    var server = record['hosts_all'].hosts_all_data[i].split(",");
                    var systemProcess = {
				        "cmdLineParam": "",
				        "processId": 0,
				        "state": "",
				        "clusterAddress": "",
				        "lowMem": "",
				        "cpuUsage": 0.0,
                        "memUsed": 0
				    };
                    systemProcess['processId'] = parseInt(server[0]);
                    systemProcess['clusterAddress'] = server[1];
                    systemProcess['state'] = server[2];
                    systemProcess['lowMem'] = server[3];
                    systemProcess['cmdLineParam'] = server[4];
                    systemProcess['cpuUsage'] = getPercentage(server[6]);
                    systemProcess['memUsed'] = lib.ScorecardServlet.convertMemeoryMB2GB(server[7]);
                    host['systemProcesses'].push(systemProcess);
                    prcNonCount++;
                }
            }
        }
        host['name'] = name;
        host['serverInstanceCount'] = prcCount;
        host['systemProcessCount'] = prcNonCount;
        
        for (i = 0; i &lt; record['hosts.name'].length(); i++)
        {
            if (name == record['hosts.name'][i]){
                host['sessionUsage'] = record['hosts.sessions'][i];
                host['cpuCores'] = parseInt(record['hosts.cores'][i]);
		        host['memUsage'] = record['hosts.memory'][i];
		        host['cpuUsage'] = getPercentage(record['hosts.cpu.usage'][i]);
                break;
            }
        }
        return host;
    }
    return false;
}

function queryServletInfo()
{
	/* contruct struct */
	var meta = {
	'serverFields':[],
	'systemProcessFields':[],
	'hostFields':[],
	'overviewFields':[]
	};
	var servletInfo = {
		"meta":"",
		"hostNumber":"",
		"sessionUsage":"",
		"lbInfo":'',
		"hosts":[]
	}; 
    
	var file = lib.ScorecardServlet.updateServletInfo();
	var i = 0;
	var len = file['hosts.name'].length();
	var module="";
	module = common.setField("processId",funcs.scmsg("processId",'ScoreCard'));
	meta['serverFields'].push(module);
	meta['systemProcessFields'].push(module);
	
	module = common.setField("clusterAddress",funcs.scmsg("clusterAddress",'ScoreCard'));
	meta['serverFields'].push(module);
	meta['systemProcessFields'].push(module);
	
	module = common.setTypeField("state",funcs.scmsg("state",'ScoreCard'),'color-text');
	meta['serverFields'].push(module);
	meta['systemProcessFields'].push(module);
	
	module = common.setField("httpPort",funcs.scmsg("httpPort",'ScoreCard'));
	meta['serverFields'].push(module);
	module = common.setField("httpsPort",funcs.scmsg("httpsPort",'ScoreCard'));
	meta['serverFields'].push(module);
	module = common.setField("sessions",funcs.scmsg("sessions",'ScoreCard'));
	meta['serverFields'].push(module);
	
	module = common.setTypeField("dbgMode",funcs.scmsg("dbgMode",'ScoreCard'),'boolean');
	meta['serverFields'].push(module);
	
	module = common.setTypeField("qMode",funcs.scmsg("qMode",'ScoreCard'),'boolean');
	meta['serverFields'].push(module);
	
	module = common.setTypeField("lb",funcs.scmsg("lb",'ScoreCard'),'boolean');
	meta['serverFields'].push(module);
	
	module = common.setTypeField("cpuUsage",funcs.scmsg("cpuUsage",'ScoreCard'),'percentage');
	meta['serverFields'].push(module);
	meta['systemProcessFields'].push(module);
	
	module = common.setField("memUsed",funcs.scmsg("memUsed",'ScoreCard'));
	meta['serverFields'].push(module);
	meta['systemProcessFields'].push(module);
	
    module = common.setTypeField("lowMem",funcs.scmsg("lowMem",'ScoreCard'),'boolean-warn');
    meta['serverFields'].push(module);
    meta['systemProcessFields'].push(module);
    
	module = common.setField("cmdLineParam",funcs.scmsg("cmdLineParam",'ScoreCard'));
	meta['systemProcessFields'].push(module);
	
	module = common.setField("sessionUsage",funcs.scmsg("sessionUsage",'ScoreCard'));
    meta['hostFields'].push(module);
    
    module = common.setField("serverInstanceCount",funcs.scmsg("serverInstanceCount",'ScoreCard'));
    meta['hostFields'].push(module);
    
    module = common.setField("systemProcessCount",funcs.scmsg("systemProcessCount",'ScoreCard'));
    meta['hostFields'].push(module);
    
    module = common.setField("cpuCores",funcs.scmsg("cpuCores",'ScoreCard'));
    meta['hostFields'].push(module);
    
    module = common.setTypeField("cpuUsage",funcs.scmsg("cpuUsage",'ScoreCard'),'percentage');
    meta['hostFields'].push(module);
    
    module = common.setField("memUsage",funcs.scmsg("memUsage",'ScoreCard'));
    meta['hostFields'].push(module);
    
    module = common.setField("hostNumber",funcs.scmsg("hostNumber",'ScoreCard'));
    meta['overviewFields'].push(module);
    module = common.setField("sessionUsage",funcs.scmsg("sessionUsage",'ScoreCard'));
    meta['overviewFields'].push(module);
    module = common.setField("lbInfo",funcs.scmsg("lb",'ScoreCard'));
    meta['overviewFields'].push(module);
    
	/* push data */
	servletInfo['hostNumber'] = len;
	servletInfo['sessionUsage'] = file['used_sessions']+'/'+file['total_sessions'];
	
    if (false == parmExists("external_lb")){    
		if(file['lbport'] == 0){
	        servletInfo['lbInfo']=funcs.scmsg("lbInfo2",'ScoreCard');
	    }
	    else{
	        servletInfo['lbInfo']=funcs.scmsg("lbInfo1",'ScoreCard')+" "+file['lbhost']+':'+file['lbport'];
	    }
	}
	else
	    servletInfo['lbInfo']=funcs.scmsg("lbInfo3",'ScoreCard');
    
	var host;
	for(i = 0; i &lt; len; i++){
	   host = getCurrentHostInfo(i,file);
	   servletInfo['hosts'].push(host);
	}
	servletInfo["meta"]= meta;
	return servletInfo;
}


</script>
    <package type="string">SystemMonitor</package>
    <sysmodtime type="dateTime">06/15/21 00:48:45</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
