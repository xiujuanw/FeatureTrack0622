<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;ScorecardAsyncUpdate&quot;" recordid="ScorecardAsyncUpdate">
    <name type="string">ScorecardAsyncUpdate</name>
    <script type="string">var toJSON = lib.JSON2.toJSON;
var logger = getLog('ScorecardAsyncUpdate');

function getProcessInfo()
{
    var f = getMemCPULoad();
    var results ={
        "mem_total":0,
        "mem_proc":0,
        "mem_avail":0,
        "cpu_total":0,
        "cpu_proc":0,
        "cores":0
    };
    var body = f.split(' ');
    var tmp;
    
    tmp = body[0].split(':');
    tmp = tmp[1].substr(0,tmp[1].length-2);
    results['mem_total'] = parseInt(tmp);
    tmp = body[1].split(':');
    tmp = tmp[1].substr(0,tmp[1].length-2);
    results['mem_avail'] = parseInt(tmp);
    tmp = body[2].split(':');
    tmp = tmp[1].substr(0,tmp[1].length-2);
    results['mem_proc'] = parseInt(tmp);
    tmp = body[3].split(':');
    tmp = tmp[1].substr(0,tmp[1].length);
    results['cores'] = parseInt(tmp);
    tmp = body[4].split(':');
    tmp = tmp[1].substr(0,tmp[1].indexOf('%'));
    results['cpu_total'] = parseFloat(tmp);
    tmp = body[5].split(':');
    tmp = tmp[1].substr(0,tmp[1].indexOf('%'));
    results['cpu_proc'] = parseFloat(tmp);
    
    return results;
}

function updateNode(body)
{
    var inf = new SCFile("scorecardNodes");
    var rc = inf.doSelect("detdata=true and cluster.addr = \""+body['clusterAddress']+"\"");
    var type = body['reportID'].split(',');
    inf['host'] = body['Host'];
    inf['cluster.addr'] = body['clusterAddress']; 
    inf['state'] = body['state']; 
    inf['cmdline'] = body['cmdLine']; 
    inf['report.id'] = funcs.val(type[0],3); 
    inf['http.port'] = body['httpPort'];
    inf['https.port'] = body['httpsPort'];
    inf['process.id'] = body['processId'];
    inf['sessions.max'] = body['MaxSessions'];
    inf['sessions.active'] = body['ActiveSessions']; 
    inf['islb'] = body['isLB']; 
    inf['servmode'] = body['servMode']; 
    inf['qmode'] = body['qMode']; 
    inf['dbgmode'] = body['dbgMode']; 
    inf['lowmem'] = body['lowMem'];
    
    var sys = getProcessInfo();
    inf['mem.total'] = sys['mem_total'];
    inf['mem.proc'] = sys['mem_proc'];
    inf['mem.avail'] = sys['mem_avail'];
    inf['cpu.total'] = sys['cpu_total'];
    inf['cpu.proc'] = sys['cpu_proc'];
    inf['cores'] = sys['cores'];
    
    /* insert record data */
    var ret = "success";
    if (type[1] == 't'){
	    if ( rc != RC_SUCCESS ){
	        inf['detdata'] = true;
	        rc = inf.doInsert();
	    }
	    else {
	       inf['detdata'] = true;
	       rc = inf.doUpdate();
	    }
    }
    else{
        inf['detdata'] = false;
        rc = inf.doInsert();
    }
    logger.debug(inf);      
    return rc;
}

function uploadSystemStatus(message)
{
    var bOK = true;
    if (message == null) {
        logger.error("uploadSystemStatus failed, message is null!");
        return false;
    }
    
    var jinf = JSON.parse(message);
    if (jinf.header == 'servlet')
    {
	    rc = updateNode(jinf['body']);
        if ( rc != RC_SUCCESS )
            logger.error('updateNode failed!');
    }
    return bOK;
}

function snapshotLicense()
{
    var inf = new SCFile("scorecardLicense");
    inf = lib.ScorecardLicense.updateLicenseInfo();
    inf['detdata'] = false;
    var rc = inf.doInsert();
    if ( rc != RC_SUCCESS )
        logger.error('snapshotLicense failed!');
}
function snapshotServlet()
{
    var f = collectSystemStatus(1,funcs.str(funcs.tod(),3)+',f');
    logger.debug('snapshotServlet, return code: '+f);
}

</script>
    <package type="string">SystemMonitor</package>
    <sysmodtime type="dateTime">06/15/21 00:48:45</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
