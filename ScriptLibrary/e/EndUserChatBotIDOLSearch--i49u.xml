<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;EndUserChatBotIDOLSearch&quot;" recordid="EndUserChatBotIDOLSearch">
    <name type="string">EndUserChatBotIDOLSearch</name>
    <script type="string">var _ = lib.Underscore.require(),
    JSON = lib.JSON.json(),
    IDOLKMQueryFactory = lib.IDOLKMQueryFactory.require();
var ChangeUserSession = lib.EndUserChat.changeUserSession;
var isOOEnabled = lib.EndUserChatAutomation.isChatAutomationEnable;
var IDOLGlobalSearchSandbox = lib.IDOLGlobalSearchSandbox.require();
var $ = lib.c.$;
var reloadQuery = lib.AddQuotation.reloadQuery;
var IDOLAdvancedSettings = lib.IDOLAdvancedSettings.require();
var GlobalSearchSettings = IDOLAdvancedSettings.GlobalSearch;

var IDOLGlobalSearch = (function() {
    function doSearch(keyword, params) {
        var args = params || {},
            start = args.start || 1,
            limit = args.size || 10;
        var fKMQuery = new SCFile('kmquery');
        fKMQuery.query = reloadQuery(keyword) || "*";

        var criteria = args.filters || {};
        criteria['__library__'] = _.keys(criteria);

        var IDOLKMQuery = IDOLKMQueryFactory.create('quicksearch', fKMQuery, criteria);

        // XXX: All the IDOL search options can be override here.
        var ignoreSpecials = GlobalSearchSettings.IGNORE_SPECIALS;
        var minScore = (GlobalSearchSettings.MINSCORE || GlobalSearchSettings.MINSCORE==0)?GlobalSearchSettings.MINSCORE:30;
        var results = IDOLKMQuery.search({
            "Start": start,
            "IgnoreSpecials" : ignoreSpecials,
            "MinScore" : minScore,
            "MaxResults": start + limit - 1,
            "Predict" : true,
            "Highlight" : '',
            "StartTag" : '',
            "EndTag" : '',
            "TotalResults" : false,
            "Summary" : ''
        });
        return results.data;
        /*
        return _.map(results.data, function(doc) {
          return {
            id : doc['id'],
            title : doc['title'],
            content : doc['content'],
            attachment: doc['isAttachment']?doc['isAttachment']:false,
            external: doc['isExternal'] &amp;&amp; !doc['isAttachment'],
            database: doc['database'],
            query: doc['query']
          };
          
        });*/
    }

    return {
        search: doSearch
    };
}());


var length = system.functions.lng;
var predicatePrefix = "BOTCUSTPREDICATE";
var IDOLDSearchPredicate = "SMIDOLSEARCH";
var IFIDOLEnabled = "IFIDOLENABLED";

function IDOLSearch() {
    var endUserLoginName = arguments[0]['smLoginUser'];
    var botId = arguments[0]['smBotId'];
    var content = arguments[0]['problemDesc'];
    var smSdChatId = arguments[0]['smSdChatId'];
    var IDOLSearchCfg = getIDOLSearchCfg(botId);
    var returnResults = {};

    if (IDOLSearchCfg &amp;&amp; vars['$lo.idol.enabled']) {
        ChangeUserSession(endUserLoginName);
        var results = IDOLGlobalSearchSandbox.evaluate({
            '$G.my.language': getEndUserLanguage(smSdChatId)
        }, function() {
            return IDOLGlobalSearch.search(content, {
                filters: IDOLSearchCfg['lib'],
                start: 1,
                size: IDOLSearchCfg['size']
            });

        });
        var lng = length(results);

        if (lng &gt; 0) {
            returnResults['predicates'] = {};
            var i;
            for (i = 0; i &lt; lng; i++) {
                //returnResults['predicates'][predicatePrefix+(i+1)]=predicatePrefix+(i+1)+": "+genereateChatLink(results[i]);
                //returnResults['predicates'][predicatePrefix+"_"+IDOLDSearchPredicate+(i+1)]=predicatePrefix+(i+1)+": "+genereateChatLink(results[i]);
                if( lib.IDOLGlobalSearchOKM.isOkmDocument(results[i].query, results[i].database, results[i].reference) )
                {
                  returnResults['predicates'][predicatePrefix + "_" + IDOLDSearchPredicate + (i + 1)] = genereateChatLinkForOKM(results[i]);
                }
                else
                {
                returnResults['predicates'][predicatePrefix + "_" + IDOLDSearchPredicate + (i + 1)] = genereateChatLink(results[i]);
                }
            }
            return returnResults;
        }

        else {
            return {};
        }
    }

    return {};
}

function checkIfIDOLEnabled() {
    var ifEnable = "false";
    if (vars['$lo.idol.enabled']) {
        ifEnable = "true";
    }
    var returnResults = {};
    returnResults['predicates'] = {};
    returnResults['predicates'][predicatePrefix + "_" + IFIDOLEnabled] = ifEnable;

    return returnResults;
}
function genereateChatLinkForOKM(data) 
{
    var kmbase = new SCFile("kmknowledgebase", SCFILE_READONLY);
    var query = "kbname=\"" + data['database'] + "\"";
    if (kmbase.doSelect(query) != RC_SUCCESS) {
       //no avalible
       return "";
    }
    var chatLink = ['[chatlink://'];
    var meta = {};
    var title=decodeXML(data['title']);
    meta['title'] =  data['id'] + " " + title;
    meta['id'] = data['id'];
    meta['external'] = true;
    meta['attachment'] = data['isAttachment'] ? data['isAttachment'] : false;
    meta['OOEnabled'] = false;
    chatLink.push(data['href']);
    chatLink.push(' meta=');
    chatLink.push(lib.JSON2.toJSON(meta));
    chatLink.push(']');
    return chatLink.join('');
}

function genereateChatLink(data) {
    var chatLink = ['[chatlink://'];
    var meta = {};
    var title=decodeXML(data['title']);
    meta['title'] = data['isAttachment'] ? data['id'] + ":" + title : title;
    meta['id'] = data['id'];
    meta['external'] = (data['isExternal'] ? data['isExternal'] : false) &amp;&amp; !(data['isAttachment'] ? data['isAttachment'] : false);
    meta['attachment'] = data['isAttachment'] ? data['isAttachment'] : false;

    if (getTableNameForKB(data['database']) == "kmdocument") {
        meta['OOEnabled'] = isOOEnabled(data['id']);
    }
    if(data['href'].indexOf("scattach:")==-1 &amp;&amp; data['href'].indexOf("scactivelink:")==-1){
        chatLink.push(data['href']);
        meta['external'] = true;
    }
    else {
        var query = "file=" + getTableNameForKB(data['database']) + "&amp;query=" + encodeURIComponent(data['query']) + "&amp;libname=" + data['database'];
        chatLink.push(query);
    }
    chatLink.push(' meta=');
    if (vars["$G.sm.portal"] === "SMSP" &amp;&amp; !meta['external']) {
        meta['smsplink'] = lib.urlCreator.getSMSPURL(getTableNameForKB(data['database']), data['id']);
    }
    chatLink.push(lib.JSON2.toJSON(meta));
    chatLink.push(']');
    return chatLink.join('');
}
function decodeXML(s){
    return s &amp;&amp; typeof(s) == "string" ? s.replace(/&amp;lt;/g, "&lt;").replace(/&amp;gt;/g, "&gt;").replace(/&amp;quot;/g, "\"").replace(/&amp;#39;/g, "'").replace(/&amp;amp;/g, "&amp;") : s; 
}

function getTableNameForKB(lib) {
    var tableName = "";
    var kmbase = new SCFile("kmknowledgebase", SCFILE_READONLY);
    var query = "kbname=\"" + lib + "\"";
    if (kmbase.doSelect(query) === RC_SUCCESS) {
        tableName = kmbase['sclibtablename'];
    }
    return tableName;
}

function getIDOLSearchCfg(botId) {
    var cfg = {};
    var bot = new SCFile("sdchatbot", SCFILE_READONLY);
    var query = "number=\"" + botId + "\"";
    if (bot.doSelect(query) === RC_SUCCESS) {
        cfg['size'] = bot['max.results'];
        cfg['lib'] = {};
        var libLen = length(bot['kblibs']);
        for (i = 0; i &lt; libLen; i++) {
            cfg['lib'][bot['kblibs'][i]] = {};
        }
        return cfg;
    }
    return null;
}

function getEndUserLanguage(sdChatId) {
    var lan = "en";
    var sdchat = $('sdchat').select('number = \"' + sdChatId + '\"').uniqueResult();
    if (sdchat &amp;&amp; sdchat['user.language']) {
        lan = sdchat['user.language'];
    }
    return lan;
}</script>
    <package type="string">End User Chat</package>
    <sysmodtime type="dateTime">11/23/17 19:25:38</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">363</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
