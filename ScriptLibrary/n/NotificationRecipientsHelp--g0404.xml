<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;NotificationRecipientsHelp&quot;" recordid="NotificationRecipientsHelp">
    <name type="string">NotificationRecipientsHelp</name>
    <script type="string">var _=lib.Underscore.require();

var sys_lang = getSysLang();

// user languages, key:user, value: language
var userLanguageMap = {};


function getChangeManagerBySecRole(id){
	var role="change manager";
	var opr=new SCFile("operator", SCFILE_READONLY);
	opr.setFields(["name"]);
	var sql="secRole=\"" + role+ "\"";
	var list="{";
	if (opr.doSelect(sql)==RC_SUCCESS){
		do{
			list=list+"\""+opr.name+"\",";
							
		}while ( opr.getNext() == RC_SUCCESS );
	}
	
	list=list+"\" "+"\"}";
	return list;
}
//The getChangeOwnerBySecRole() function.
//Cybele added @Sep.21th 2011. For Change Task need notification sent to Change Owner.

function getRelatedChangeOwnerByChangeID(id){
	var chm=new SCFile("cm3r", SCFILE_READONLY);
	chm.setFields(["change.owner"]);
	var sqlchm="number=\"" + id+ "\"";

	var list="{";
	if (chm.doSelect(sqlchm)==RC_SUCCESS){
		do{
			list=list+"\""+chm.change_owner+"\",";
				
		}while ( chm.getNext() == RC_SUCCESS );
	}
	
	list=list+"\" "+"\"}";
	return list;
}

function getRelatedTaskAssigneeByChangeID(id){
	var tsk=new SCFile("cm3t", SCFILE_READONLY);
	tsk.setFields(["assigned.to"]);
	var sqltsk="parent.change=\"" + id+ "\"";

	var list="{";
	if (tsk.doSelect(sqltsk)==RC_SUCCESS){
		do{
			list=list+"\""+tsk.assigned_to+"\",";
				
		}while ( tsk.getNext() == RC_SUCCESS );

	}
	list=list+"\" "+"\"}";
	return list;
}

function getDcabApprovers(id){
	var groupfile=new SCFile("ApprovalDef", SCFILE_READONLY);
	groupfile.setFields(["group.name"]);
	var sql="";
	var memberlist="";
	var group="DCAB Approval";
	sql="name=\"" + group+ "\"";
	if (groupfile.doSelect(sql)==RC_SUCCESS){
		memberlist=""+groupfile.group_name;
		memberlist=memberlist.substr(memberlist.indexOf("{"));
	}
	if(memberlist==""){
		memberlist=[];
	}
	
	return memberlist;
}
function getEcabApprovers(id){
	var groupfile=new SCFile("ApprovalDef", SCFILE_READONLY);
	groupfile.setFields(["group.name"]);
	var sql="";
	var memberlist="";
	var group="ECAB Approval";
	sql="name=\"" + group+ "\"";
	if (groupfile.doSelect(sql)==RC_SUCCESS){
		memberlist=""+groupfile.group_name;
		memberlist=memberlist.substr(memberlist.indexOf("{"));
	}
	if(memberlist==""){
		memberlist=[];
	}
	
	return memberlist;
}
function getTcabApprovers(id){
	var groupfile=new SCFile("ApprovalDef", SCFILE_READONLY);
	groupfile.setFields(["group.name"]);
	var sql="";
	var memberlist="";
	var group="TCAB Approval";
	sql="name=\"" + group+ "\"";
	if (groupfile.doSelect(sql)==RC_SUCCESS){
		memberlist=""+groupfile.group_name;
		memberlist=memberlist.substr(memberlist.indexOf("{"));
	}
	if(memberlist==""){
		memberlist=[];
	}
	
	return memberlist;
}


// fix QCCR1E131463

function getSysLang()
{
    var sysInfo = new SCFile("info",SCFILE_READONLY);
    sysInfo.setFields(["syslanguage"]);
    var sql = "type=\"company\"";
    
    if( sysInfo.doSelect(sql) == RC_SUCCESS )
    {
        if(sysInfo.syslanguage != null){
           return sysInfo.syslanguage;
        }
    }
    
    return "en";
}


function determinLang(users) {

    var lang = "";
    var temp = "";

    var userList = getUserList(users);  

    //parse language
          var i, leng=userList.length;
          for (i=0;i&lt;leng;i++)
          {
            if(userList[i]==""){
             	continue;
            }else{
            	temp = getLang(userList[i]);
            }
            
            if (temp == null || temp.length == 0) {
            	continue;
            }
            
            if (lang == "") {                
            	lang = temp;
            	continue;
            }
            
            if (lang != temp) {
            	return sys_lang;
            }
                          
        }
    
    if (lang == "") {
    	lang = sys_lang;
    }
    system.vars.$L_mailLang = lang;    
    return lang;

}

function getUserList(users)
{
    var userList = [];
    //generate user list
    if(users != null) {
        if(system.functions.type(users) == 2){
           return [users];
        }
        else if(users instanceof Array){
           userList=_.uniq(users); 
        }
        else{  
              userList = users.toArray();
              userList=_.uniq(userList);    
        }
    }
    return userList; 
}


function getLang(user) {

	// query cache map first
	var userKey = "user:" + user;
	if (_.has(userLanguageMap, userKey)) {
		return userLanguageMap[userKey];
	}

	var userLang = sys_lang;
	
    var operator_sql = "name=\"" + user + "\" or email=\"" + user + "\" or contact.name=\"" +user+"\"";
    var contact_sql  = "contact.name=\"" + user+ "\" or email=\"" + user + "\" or operator.id=\"" +user+"\"";

    var contact = new SCFile("contacts", SCFILE_READONLY);
    var operator = new SCFile("operator", SCFILE_READONLY);
    contact.setFields(["language"]);
    operator.setFields(["syslanguage"]);

    if( contact.doSelect(contact_sql) == RC_SUCCESS )
    {
        if( !system.functions._null(contact.language) ) {
        	userLang = contact.language;
        }
        else if( operator.doSelect(operator_sql) == RC_SUCCESS )
        {
            if( !system.functions._null(operator.syslanguage) ) {
            	userLang = operator.syslanguage;
            }
        }
		userLanguageMap[userKey] = userLang;
    }
    else if( operator.doSelect(operator_sql) == RC_SUCCESS )
    {
        if( !system.functions._null(operator.syslanguage) ) {
        	userLang = operator.syslanguage;
        }
		userLanguageMap[userKey] = userLang;
    }

    return userLang;
}

// if RC_SUCCESS, return object;else return format's name
function determinFormat(lan,format)
{
	if (format == null) {
		return null;
	}
	
  	var form=new SCFile("format");
  	if(lan!=null){
    	var formResult=form.doSelect("syslanguage=\"" + lan +"\" and name=\"" + format +"\"");
     	if(formResult == RC_SUCCESS){
      		return form;
     	}
  	} 
  	return format;
}

//if doSelect fails, return scmsg
function determinMsg(lan,clas,id,args)
{
   if(!args){
   		args = [];
   } 
   
   if(!lan &amp;&amp; !vars.$L_mailLang){  
    	return system.functions.scmsg(id,clas,args);
   } else if(!lan){
   		lan=vars.$L_mailLang; 
   }
  
     var msgReturn = "";
     var scmsg=new SCFile("scmessage");
     var msgResult=scmsg.doSelect("syslanguage=\"" + lan +"\" and class =\"" +clas +"\" and message.id=\"" + id+"\"");
	 if(msgResult== RC_SUCCESS)
	  {
	    var msgReturn=scmsg.message;
	    if(args!=null){
	    if(typeof args =='string'){
	    
	         msgReturn=msgReturn.replace("\%S",args);
	    
	    }else{
	        var i, len=system.functions.lng(args);
		    for(i=0;i&lt;len;i++)
		    {
		     msgReturn=msgReturn.replace("\%S",args[i]);
		    }
	    	
	      }
	    
        }
	    
	  } else {
	    	msgReturn = system.functions.scmsg(id,clas,args);
	  }   
	  return msgReturn;      
} 

function getEmailAttachmentQueryTag() {
    return "AttachmentQuery";
}

function getEmailAttachmentQuerySeperator() {
    return "&lt;@@@" + getEmailAttachmentQueryTag() + "@@@&gt;";
}

function appendEmailAttachmentQuery(condition, filter, filename, key) {
    if (condition == null || lib.Utilities.trim("" + condition).length == 0) {
        return "";
    }
    
    if (filter == null || lib.Utilities.trim(filter).length == 0) {
        return "";
    }
    
    if (funcs.evaluate(condition)) {
        return getEmailAttachmentQuerySeperator() + "application=\"" + filename + "\" and topic=\"" + key + "\" and " + filter;
    }
    
    return "";
}

function parseEmailAttachmentQuery(text) {
    if (text == null || lib.Utilities.trim(text).length == 0) {
        return [text, null];
    }
    
    var result = text.split(getEmailAttachmentQuerySeperator());
    
    return result;
}
</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">03/22/19 09:41:24</sysmodtime>
    <sysmoduser type="string">zhouanqing</sysmoduser>
    <sysmodcount type="decimal">48</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
