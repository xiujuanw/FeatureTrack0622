<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;upgradeDbdictMerge&quot;" recordid="upgradeDbdictMerge">
    <name type="string">upgradeDbdictMerge</name>
    <script type="string">/** @fileoverview upgradeDbdictMerge - contains functions used by the Service Manager Upgrade
*   @author Alex Corvino
*/

var aAddedFields=new SCDatum();	
var aException=new SCDatum();

function mergeDbdictByXML ( fOldDbdict, fNewDbdict, aLogs )
{
	var strName = fOldDbdict.name;
	
	var oldXML = fOldDbdict.getXML();
	var newXML = fNewDbdict.getXML();
		
	var bDidFieldMerge = mergeFields( strName, oldXML, newXML );
	var bDidSQLMerge = mergeSQLTables( strName, oldXML, newXML );

	aLogs.push(aException);
	aLogs.push(aAddedFields);
	
	
	if (bDidFieldMerge || bDidSQLMerge)
	{	
		fOldDbdict.setRecord(oldXML.toXMLString());
		fOldDbdict.doUpdate();
	}

	return aLogs;
}

function testMergeByXML ( )
{
	var fOld = new SCFile("dbdict");
	fOld.doSelect("name=\"cm3r\"");

	var fNew = new SCFile("upgradedbdict");
	fNew.doSelect("name=\"cm3r\"");

	var oldXML = fOld.getXML();
	var newXML = fNew.getXML();
		
	var bDidFieldMerge = mergeFields( "cm3r", oldXML, newXML );
	var bDidSQLMerge = mergeSQLTables( "cm3r", oldXML, newXML );

	return oldXML.toXMLString();
}

function mergeFields ( strName, oldXML, newXML )
{		
	var rebuiltFields = new XML("field");
	rebuiltFields.addAttribute("sctype", "array");
	
	var oldInstance = lib.xmlHelpers.getElement( oldXML, "instance", null );
	var oldFields = lib.xmlHelpers.getElement( oldInstance, "field", null);	
	var oldField = oldFields.getFirstChildElement();
	//put the decriptor field in the rebuilt fields.
	rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, oldField); 	
	oldField = oldField.getNextSiblingElement(); //skip the descriptor field
		
	var newInstance = lib.xmlHelpers.getElement( newXML, "instance", null );
	var newFields = lib.xmlHelpers.getElement( newInstance, "field", null);	
	var newField = newFields.getFirstChildElement();
	newField = newField.getNextSiblingElement(); //skip the descriptor field
		
	var bDidMerge = false;
	var bCheckedNextField = false;
	print("MERGING " + strName);	

	while (newField != null)
	{		
		var newName = (lib.xmlHelpers.getElement( newField, "name", null)).getText(); 
		var newLevel = (lib.xmlHelpers.getElement( newField, "level", null)).getValue();
		var newIndex = (lib.xmlHelpers.getElement( newField, "index", null)).getValue();
		var newType = (lib.xmlHelpers.getElement( newField, "type", null)).getValue();
		var newSQLFields = lib.xmlHelpers.getElement( newField, "sql.field.options", null);
			
		var element = lib.xmlHelpers.getElement( newSQLFields, "sql.table.alias", null);
		if (element == null)
		{
			var newSQLTableAlias = null;
		}
		else
		{
			var newSQLTableAlias = element.getText();
		}
			
		element = lib.xmlHelpers.getElement( newSQLFields, "sql.column.name", null);
		if (element == null)
		{
			var newSQLColumnName = null;
		}
		else
		{
			var newSQLColumnName = element.getText();
		}
			
		element = lib.xmlHelpers.getElement( newSQLFields, "sql.data.type", null);
		if (element == null)
		{
			var newSQLDataType = null;
		}
		else
		{
			var newSQLDataType = element.getText();
		}
			
		element = lib.xmlHelpers.getElement( newSQLFields, "sql.rcformat", null);
			
		if (element == null)
		{
			var newSQLRCFormat = null;
		}
		else 
		{
			var newSQLRCFormat = element.getValue();
		}		
		
		//if we'er out of old fields and we still have new ones then they have been added. 
		if (oldField == null)
		{
			rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, newField);
			aAddedFields.push(newName);
			bDidMerge = true;		
			print("Added NEW FIELD " + newName + " LEVEL " + newLevel + " INDEX " + newIndex);		
		}
		else
		{	
			var oldIndex = (lib.xmlHelpers.getElement( oldField, "index", null)).getValue();
		    var oldName = (lib.xmlHelpers.getElement( oldField, "name", null)).getText(); 
		    var oldLevel = (lib.xmlHelpers.getElement( oldField, "level", null)).getValue();						
			var oldType = (lib.xmlHelpers.getElement( oldField, "type", null)).getValue();
			var oldSQLFields = lib.xmlHelpers.getElement( oldField, "sql.field.options", null);
			
			var element = lib.xmlHelpers.getElement( oldSQLFields, "sql.table.alias", null);
			if (element == null)
			{
				var oldSQLTableAlias = null;
			}
			else
			{
				var oldSQLTableAlias = element.getText();
			}
			
			element = lib.xmlHelpers.getElement( oldSQLFields, "sql.column.name", null);
			if (element == null)
			{
				var oldSQLColumnName = null;
			}
			else
			{
				var oldSQLColumnName = element.getText();
			}
				
			element = lib.xmlHelpers.getElement( oldSQLFields, "sql.data.type", null);
			if (element == null)
			{
				var oldSQLDataType = null;
			}
			else
			{
				var oldSQLDataType = element.getText();
			}
				
			element = lib.xmlHelpers.getElement( oldSQLFields, "sql.rcformat", null);
			
			if (element == null)
			{
				var oldSQLRCFormat = null;
			}
			else 
			{
				var oldSQLRCFormat = element.getValue();
			}				
			
			if ( newName == oldName &amp;&amp;
			     newLevel == oldLevel &amp;&amp;
			     newIndex == oldIndex &amp;&amp;
			     newType == oldType &amp;&amp;
			     newSQLTableAlias == oldSQLTableAlias &amp;&amp;
			     newSQLColumnName == oldSQLColumnName &amp;&amp;
			     newSQLDataType == oldSQLDataType &amp;&amp;
			     newSQLRCFormat == oldSQLRCFormat )
			{
				//fields didn't change. Move along.
				print("Skipping " + oldName);
				rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, oldField);
			}
			else if ( newName != oldName &amp;&amp;
			           (newLevel == oldLevel &amp;&amp;
			            newIndex == oldIndex &amp;&amp;
			            newType == oldType &amp;&amp;
			            newSQLTableAlias == oldSQLTableAlias &amp;&amp;
			            newSQLColumnName == oldSQLColumnName &amp;&amp;
			            newLevel == 1))
			{
				//if ONLY the dbdict field names are different and the SQL mapping is the same then there was
				//a field renamed. Take the new field name.		
				bOldFieldMerged = true;
				bDidMerge = true;
				var node = lib.xmlHelpers.getElement( oldField, "name", null);
				node.setText(newName);
				aAddedFields.push("dbdict: " + strName + " Renamed field " + oldName + " to " + newName);
				print("renaming " + oldName + " to " + newName);
				
				rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, oldField);
			}
			else if ( newName == oldName &amp;&amp;
			           newLevel == oldLevel &amp;&amp;
			           newIndex == oldIndex &amp;&amp;
			           newType == oldType &amp;&amp;
			           (newSQLTableAlias != oldSQLTableAlias ||
			            newSQLColumnName != oldSQLColumnName ||
			            newSQLDataType != oldSQLDataType ||
			            newSQLRCFormat != oldSQLRCFormat) )
			{
				//if the field names are the same but the SQL mapping changed then take the new sql mapping.			
				bDidMerge = true;
				replaceSQLFields( oldField, newSQLFields );
				print("Getting the sql mapping for " + newName);
				rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, oldField);
			}  
			else if ( newName == oldName &amp;&amp;
			           newLevel == oldLevel &amp;&amp;
			           newIndex == oldIndex &amp;&amp;
			           newType != oldType)
			{
				//if just the types are different then you did something 
				//really, really, *really* wrong and you're on your own.
				aException.push("dbdict: " + strName + " Field:" + oldName + " Level:" + oldLevel + " Index:" + oldIndex + 
				                 " was not changed because type " + oldType + " does not match " + newType); 		
					
				print("Bad type for " + oldName);	
				rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, oldField);
			}
			else if ( newLevel &gt; 1 )
	 		{
	 			bCheckedNextField = true;
 				
	 			while ( newName != oldName &amp;&amp;
				         newField != null )
				{ 
		 			if ( newName != oldName &amp;&amp;
		 				 newLevel == oldLevel &amp;&amp;
		 				 newIndex == oldIndex &amp;&amp;
		 				 oldXML.toXMLString().indexOf("&gt;" + newName + "&lt;") == -1 )
		 			{
		 				rebuiltFields = lib.xmlHelpers.addChildElement(rebuiltFields, newField);
						aAddedFields.push(newName);
						bDidMerge = true;		
						print("Struct add " + newName + " LEVEL " + newLevel + " INDEX " + newIndex);		
		 			}
		 					 			
		 			newField = newField.getNextSiblingElement();
	 				newLevel = (lib.xmlHelpers.getElement( newField, "level", null)).getValue();
					newIndex = (lib.xmlHelpers.getElement( newField, "index", null)).getValue();
					newName = (lib.xmlHelpers.getElement( newField, "name", null)).getText(); 
					newType = (lib.xmlHelpers.getElement( newField, "type", null)).getValue();
				}
	  		}
		}		
		
		if (!bCheckedNextField)
		{
			newField = newField.getNextSiblingElement();
		}
		
		if (oldField != null &amp;&amp; !bCheckedNextField)
		{
			oldField = oldField.getNextSiblingElement();
		}
		bCheckedNextField = false;
	}
	
	if(bDidMerge)
	{
		//Since we don't have the best DOM support right now we'll just rebuild the whole document	
		var strOldXML = oldXML.toXMLString();	
		var strStart = strOldXML.slice(0, strOldXML.indexOf("&lt;field"));	
		var strEnd = strOldXML.slice(strOldXML.indexOf("&lt;key sctype=\"array\"&gt;"));
		var strRebuiltXML = strStart + rebuiltFields.toXMLString() + strEnd;
		
		oldXML = oldXML.setContent(strRebuiltXML);	
	}
	
	return bDidMerge;
}


function mergeSQLTables ( strName, oldXML, newXML )
{
	var bDidMerge = false;
	var oldInstance = lib.xmlHelpers.getElement( oldXML, "instance", null );
	var oldTables = lib.xmlHelpers.getElement( oldInstance, "sql.tables", null);	
	var oldTable = oldTables.getFirstChildElement();
	
	var newInstance = lib.xmlHelpers.getElement( newXML, "instance", null );
	var newTables = lib.xmlHelpers.getElement( newInstance, "sql.tables", null);	
	var newTable = newTables.getFirstChildElement();
	
	var bOldTableFound = false;
	var bBadTableFound = false;
		
	while (newTable != null)
	{	
		var newDBType = (lib.xmlHelpers.getElement( newTable, "sql.db.type", null)).getText(); 
		var newTableName = (lib.xmlHelpers.getElement( newTable, "sql.table.name", null)).getText(); 
		var newTableAlias = (lib.xmlHelpers.getElement( newTable, "sql.table.alias", null)).getText(); 
		var newTableKeys = (lib.xmlHelpers.getElement( newTable, "sql.lookup.table.keys", null)).getText(); 
		var newTableOptions = (lib.xmlHelpers.getElement( newTable, "sql.table.options", null)).getText(); 
		
		while (!bOldTableFound &amp;&amp; !bBadTableFound &amp;&amp; oldTable != null)
		{
			var oldDBType = (lib.xmlHelpers.getElement( oldTable, "sql.db.type", null)).getText(); 
			var oldTableName = (lib.xmlHelpers.getElement( oldTable, "sql.table.name", null)).getText(); 
			var oldTableAlias = (lib.xmlHelpers.getElement( oldTable, "sql.table.alias", null)).getText(); 
			var oldTableKeys = (lib.xmlHelpers.getElement( oldTable, "sql.lookup.table.keys", null)).getText(); 
			var oldTableOptions = (lib.xmlHelpers.getElement( oldTable, "sql.table.options", null)).getText(); 
			
			if ( newDBType == oldDBType &amp;&amp;
				 newTableName == oldTableName &amp;&amp;
				 newTableAlias == oldTableAlias &amp;&amp; 
				 newTableKeys == oldTableKeys &amp;&amp; 
				 newTableOptions == oldTableOptions )
			{
				bOldTableFound = true;
			}
			else if ( newTableAlias == oldTableAlias &amp;&amp;			 		
						(newDBType != oldDBType ||
				 	   	 newTableName != oldTableName ||
				 		 newTableKeys != oldTableKeys || 
				 		 newTableOptions != oldTableOptions) )
			{
				bBadTableFound = true;
				aException.push("dbdict: " + strName + " table alias mismatch found"); 	

			}
			else
			{
				oldTable = oldTable.getNextSiblingElement();
			}
		}
		
		if (!bOldTableFound &amp;&amp; !bBadTableFound)
		{
			bDidMerge = true;
			print("added table " + newTable);
			lib.xmlHelpers.addChildElement( oldTables, newTable );
			aAddedFields.push("dbdict: " + strName + " added table:" + newTableName + " alias:" + newTableAlias); 	
		}
		
		oldTable = oldTables.getFirstChildElement();
		newTable = newTable.getNextSiblingElement();
		bOldTableFound = false;
		bBadTableFound = false;
	}
	
	return bDidMerge;
}

function getStructSize(curXML, strCurrStruct)
{
	var curInstance = lib.xmlHelpers.getElement( curXML, "instance", null );
	var curFields = lib.xmlHelpers.getElement( curInstance, "field", null);	
	var curField = curFields.getFirstChildElement();
	
	var tgtLevel = 0;
	var size = 0;
	var curLevel;
	var curName;
	
	while (curField != null)
	{
		curLevel = (lib.xmlHelpers.getElement( curField, "level", null)).getValue();
		curName = (lib.xmlHelpers.getElement( curField, "name", null)).getText();
				
		if (curName == strCurrStruct) 
		{
			tgtLevel = Number(curLevel) + 1;
		}
		
		if (Number(curLevel) == tgtLevel - 1)
		{
			return size;
		}
		else if (Number(curLevel) == tgtLevel)
		{
			size++;
		}
		
		curField = curField.getNextSiblingElement();
	}
	
	return size;
}

function getLastFieldIndex( fields )
{
	var field = fields.getFirstChildElement();
	var iIndex=0;
	var iCurIndex=0;
	var iCurLevel=0;
		
	while (field != null)
	{
		iCurLevel = Number((lib.xmlHelpers.getElement( field, "level", null)).getValue());
		iCurIndex = Number((lib.xmlHelpers.getElement( field, "index", null)).getValue());
		
		//we don't care about the indexes in structures. 
		if (iCurLevel == 1 &amp;&amp; iCurIndex &gt; iIndex)
		{
			iIndex = iCurIndex;
		}
		
		field = field.getNextSiblingElement();		
	}
		
	return iIndex;
}

function replaceSQLFields ( curField, newSQLFields )
{
	var sqlFieldNames= ["sql.table.alias", "sql.column.name", "sql.data.type", "sql.rcformat"];
	var oldSQLFields = lib.xmlHelpers.getElement( curField, "sql.field.options", null);

	var x;
	for (x = 0; x &lt; sqlFieldNames.length; x++)
	{
		var newElement = lib.xmlHelpers.getElement( newSQLFields, sqlFieldNames[x], null);
		var oldElement = lib.xmlHelpers.getElement( oldSQLFields, sqlFieldNames[x], null);

		if (newElement == null &amp;&amp; oldElement != null)
		{
			oldElement.setValue(null);
		}
		else if (oldElement == null &amp;&amp; newElement != null)
		{
			oldElement = oldSQLFields.addElement(sqlFieldNames[x]);
			oldElement.addAttribute("sctype", "string");
			oldElement.setValue(newElement.getValue());
		}
		else if(oldElement !=null &amp;&amp; newElement != null)
		{
			oldElement.setValue(newElement.getValue());
		}
	}	
}

function sortDbdictFieldIndex(name, level) {
    if (level &lt; 1) {
        return RC_ERROR;
    }
    
    var dbdict = new SCFile("dbdict");
    var rc = dbdict.doSelect("name=\""+name+"\"");
    
    if (rc == RC_SUCCESS) {
        var length = system.functions.lng(dbdict["field"]);
        var i;
        for (i=0; i&lt;length; i++) {
            if (dbdict["field"][i]["level"] == level) {
                var index = dbdict["field"][i]["index"];
                var j;
                for (j=i+1; j&lt;length; j++) {
                    if (dbdict["field"][j]["level"] == level) {
                        break;
                    }
                }
                if (j&lt;length) {
                    if (index &gt; dbdict["field"][j]["index"]) {
                        var temp = dbdict["field"][j]["index"];
                        dbdict["field"][j]["index"] = dbdict["field"][i]["index"];
                        dbdict["field"][i]["index"]=temp;
                    }
                }
                i=j-1;
            }
        }
        
        return dbdict.doUpdate();
    }
    else {
    	return RC_INVALID_FILENAME;
    }
}</script>
    <package type="string">Upgrade</package>
    <sysmodtime type="dateTime">06/15/21 00:37:26</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">142</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
