<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;RuleWizardHelpers&quot;" recordid="RuleWizardHelpers">
    <name type="string">RuleWizardHelpers</name>
    <script type="string">var JSON = system.library.JSON.json();

function getWizardName( rule, isJSONFormat )
{
	var ruleName = "callWizard";
	var fieldName = "wizardName";
	if(!isJSONFormat) {
		var xml = new XML();
		xml.setContent( rule );
		var result =  lib.xmlHelpers.getElement( xml, ruleName, null );
		
		var wizard =  lib.xmlHelpers.getElement( result, fieldName, null );
		
		return wizard.getValue();
	} else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj[fieldName];
	}
}

function getExternalName( rule, isJSONFormat )
{
	var ruleName = "callExternalURL";
 	var fieldName = "url";

    if(!isJSONFormat) {
		var xml = new XML();
		xml.setContent( rule );
		var result =  lib.xmlHelpers.getElement( xml, ruleName, null );
		
		var wizard =  lib.xmlHelpers.getElement( result, fieldName, null );
		
		return wizard.getValue();
	} else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj[fieldName];
	}
}

function getProcessName( rule, isJSONFormat )
{
	var ruleName = "callProcess";
	var fieldName = "process";
	
	if(!isJSONFormat) {
		var xml = new XML();
		xml.setContent( rule );
		var result =  lib.xmlHelpers.getElement( xml, ruleName, null );
		
		var process =  lib.xmlHelpers.getElement( result, fieldName, null );
		
		return process.getValue();
	} else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj[fieldName];
	}
}

function getScriptName( rule, isJSONFormat )
{
	var ruleName = "runSMScript";
	var fieldName = "script";
	if(!isJSONFormat) {
		var xml = new XML();
		xml.setContent( rule );
		var result =  lib.xmlHelpers.getElement( xml, ruleName, null );

		var script =  lib.xmlHelpers.getElement( result, fieldName, null );

		return script.getValue();
	} else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj[fieldName];
	}
}

function getNotificationName( rule, isJSONFormat )
{
	var ruleName = "notification";
	var fieldName = "notificationRecord";

	if(!isJSONFormat) {
		var xml = new XML();
		xml.setContent( rule );
		var result = lib.xmlHelpers.getElement( xml, ruleName, null );

		var notification = lib.xmlHelpers.getElement( result, fieldName, null );

		return notification.getValue();
	} else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj[fieldName];
	}
}

/**
 * Load the configuration from sendHTMLEmail rule from JSON rule string,
 * set the info into related variables.
 *
 * The possible JSON format:
 * 1. Users type:
 * {
 *   type:"sendHTMLEmail",
 *   tempName:"IM Alert Reassign",
 *   recipient:"Users",
 *   js:null,
 *   userList:{
 *       sendTo:"operator",// or "contacts"
 *       user:["aUser", "bUser"]
 *     },
 *   group:null,
 *   field:null
 * }
 * 2. Group type:
 * {
 *   type:"sendHTMLEmail",
 *   tempName:"IM Alert Reassign",
 *   recipient:"Group",
 *   js:null,
 *   userList:null,
 *   group:{
 *       sendTo:"All",
 *       type:"assignment",
 *       value:"E-CAB"
 *     },
 *   field:null
 * }
 * 3. JS type:
 * {
 *   type:"sendHTMLEmail",
 *   tempName:"IM Alert Reassign",
 *   recipient:"Set Using Javascript",
 *   js:'value="";',
 *   userList:null,
 *   group:null,
 *   field:null
 * }
 * 4. Current record type:
 * {
 *   type:"sendHTMLEmail",
 *   tempName:"IM Alert Reassign",
 *   recipient:"Current Record",
 *   js:'value="";',
 *   userList:null,
 *   group:null,
 *   field:{
 *       type:"ocmgroups", // or "operator", etc
 *       sendTo:"Members",
 *       value:"active"
 *     }
 * }
 */
function loadSendHTMLEmailRuleFromJSON(ruleString) {
	if (ruleString == null || ruleString == "") {
		return;
	}

    var jsonObj = JSON.parse(ruleString);

	var tempName = jsonObj.tempName;	
	var recipient = jsonObj.recipient;
	var js = jsonObj.js;
	
	var userList = jsonObj.userList;
	var group = jsonObj.group;
	var field = jsonObj.field;

	if (tempName!=null &amp;&amp; tempName!="") {
		vars.$tempName = tempName;
		vars.$recipient = recipient;
		if(vars.$recipient=="Set Using Javascript") {
		    vars.$js = js;
		}
		if(vars.$recipient=="Users") {
			vars.$sendToUsers = userList.sendTo;
			if (vars.$sendToUsers=="operator") {
				vars.$users1= userList.user;
			}
			if (vars.$sendToUsers=="contacts") {
				vars.$users2= userList.user;
			}
		}

		if(vars.$recipient=="Group") {
			vars.$sendToGroup = group.type;
			if(vars.$sendToGroup=="assignment") {
				vars.$asgroup= group.value;
			}
			if(vars.$sendToGroup=="cm3groups") {
				vars.$cmgroup= group.value;
			}
			if(vars.$sendToGroup=="ocmgroups") {
				vars.$ocmgroup= group.value;
			}
			if(vars.$sendToGroup=="kmgroup") {
				vars.$kmgroup= group.value;
			}
			
			if(vars.$sendToGroup=="assignment") {
				vars.$gARecp=group.sendTo;
			}
			if(vars.$sendToGroup=="kmgroup") {
				vars.$gKRecp=group.sendTo;
			}
			if(vars.$sendToGroup=="cm3groups" || vars.$sendToGroup=="ocmgroups") {
				vars.$gCRRecp=group.sendTo;
			}
		}
		if(vars.$recipient=="Current Record") {
			vars.$field= field.value;
			vars.$fieldType=field.type;
			if(vars.$fieldType=="cm3groups" ||  vars.$fieldType=="ocmgroups") {
				vars.$gCRRecp=field.sendTo;
			}
			if(vars.$fieldType=="assignment") {
				vars.$gARecp=field.sendTo;
			}
			if(vars.$fieldType=="kmgroup") {
				vars.$gKRecp=field.sendTo;
			}
		}
	}

	var datadict = new SCFile("datadict", SCFILE_READONLY);
	var sql = "name=\""+system.vars.$L_tablename+"\"";
	var rc = datadict.doSelect(sql);
	if (rc == RC_SUCCESS) {
		vars.$fieldNames = datadict.fields;
		vars.$fieldCaptions = datadict.captions;
	}
}

/**
 * Populate the configuration into sendHTMLEmail rule with JSON format,
 * please refer to method loadSendHTMLEmailRuleFromJSON's description for
 * more detail about the JSON format of this rule.
 */
function populateSendHTMLEmailRuleJSON() {
    var jsonObj = {};
    jsonObj.type = "sendHTMLEmail";
    vars.$L_file.type = "sendHTMLEmail";

	jsonObj.tempName = vars.$tempName;
	jsonObj.recipient = vars.$recipient;
	
	var userList = null;
	var group = null;
	var field = null;
	
	if(vars.$recipient=="Set Using Javascript") {
	    jsonObj.js = vars.$js;
	}		
	if(vars.$recipient=="Users") {
		userList = {};
		userList.sendTo = vars.$sendToUsers;
		if(vars.$sendToUsers=="operator") {
			vars.$users1=system.functions.denull(vars.$users1);
			if(null==vars.$users1) {
				userList.user = [];
			} else {
				userList.user = vars.$users1.toArray();
			}
		}
		if(vars.$sendToUsers=="contacts") {
			vars.$users2=system.functions.denull(vars.$users2);
			if(null==vars.$users2) {
				userList.user = [];
			} else {
				userList.user = vars.$users2.toArray();
			}
		}
	}

	if(vars.$recipient=="Group") {
		group = {};
		group.type = vars.$sendToGroup;
		if(vars.$sendToGroup=="assignment") {
			group.sendTo = vars.$gARecp;
		}
		if(vars.$sendToGroup=="kmgroup") {
			group.sendTo = vars.$gKRecp;
		}
		if(vars.$sendToGroup=="cm3groups" || vars.$sendToGroup=="ocmgroups") {
			group.sendTo = vars.$gCRRecp;
		}
		if(vars.$sendToGroup=="assignment") {
			group.value = vars.$asgroup;
		}
		if(vars.$sendToGroup=="cm3groups") {
			group.value = vars.$cmgroup;
		}
		if(vars.$sendToGroup=="ocmgroups") {
			group.value = vars.$ocmgroup;
		}
		if(vars.$sendToGroup=="kmgroup") {
			group.value = vars.$kmgroup;
		}
	}		

	if(vars.$recipient=="Current Record") {
		field = {};
		field.value = vars.$field;
		field.type = vars.$fieldType;
		if(vars.$fieldType=="cm3groups" ||  vars.$fieldType=="ocmgroups") {
			field.sendTo = vars.$gCRRecp;
		}
		else if(vars.$fieldType=="assignment") {
			field.sendTo = vars.$gARecp;
		}
		else if(vars.$fieldType=="kmgroup") {
			field.sendTo = vars.$gKRecp;
		}
	}
	jsonObj.userList = userList;
	jsonObj.group = group;
	jsonObj.field = field;

    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
}

function getTemplateName( rule, isJSONFormat )
{
	if(!isJSONFormat) {
		var ruleName = "sendHTMLEmail";
		var xml = new XML();
		xml.setContent( rule );
		var result = lib.xmlHelpers.getElement( xml, ruleName, null );
		var tempName = lib.xmlHelpers.getElement( result, "tempName", null );
		return tempName.getValue();
    } else {
	    var jsonObj = JSON.parse(rule);
	    return jsonObj["tempName"];
	}
}

function getRecipientList(rule,record, isJSONFormat, templateName)
{
	vars.$users=null;
	var ruleName = "sendHTMLEmail";
	var xml = null;
	var result = null;
	var recipient = null;
	var jsonObj = null;

	if(!isJSONFormat) {
		xml = new XML();
		xml.setContent( rule );
		result = lib.xmlHelpers.getElement( xml, ruleName, null );
		recipient = lib.xmlHelpers.getElement(result, "recipient", null ).getValue();
	} else {
	    jsonObj = JSON.parse(rule);
		recipient = jsonObj.recipient;
	}

	if(recipient=="Set Using Javascript")
	{
	 var js = null;
	 if(!isJSONFormat) {
		 js = lib.xmlHelpers.getElement(result, "js", null ).getValue();
	 } else {
	 	js = jsonObj.js;
	 }
	
	 try {
      var users = [];
      eval( js );
      return users;
     }
     catch ( e )
     {
      print("Could not process javascript in the Send HTML Email Rule.");
      print(e.toString());
      return null;
     }
	 
	}
	if(recipient=="Users")
	{
	  if(!isJSONFormat) {
		  var userList = lib.xmlHelpers.getElement(result, "userList", null );
		  var checkUser= userList.getFirstChildElement();
		  do {
			   if (checkUser != null)
			   {
				var user = checkUser.getValue();
				if (user != null &amp;&amp; user != "null") 
				{
					vars.$users= system.functions.insert(vars.$users,0,1,user);
				}	
			   }		
			   checkUser = checkUser.getNextSiblingElement();
		  }while(checkUser != null);	
	  } else {
	  	vars.$users = jsonObj.userList.user;
	  }
	  return vars.$users;  
	}

	if(recipient=="Group")
    {
      var groupType = null;
      var sendTo = null;
      var groupName = null;
      if(!isJSONFormat) {
	      var group = lib.xmlHelpers.getElement(result, "group", null );
	      groupType = group.getAttributeValue("type");
	      sendTo = group.getAttributeValue("sendTo");
	      groupName = group.getValue();
	  } else {
	  	  groupType = jsonObj.group.type;
	      sendTo = jsonObj.group.sendTo;
	      groupName = jsonObj.group.value;
	  }

	  /**QCCR1E101184, SM934, dengxin
	   **add readonly for doselect, and add the selected fields
	   **apply for asgrec,kmgrec,cmgrec,ocmgrec,rec,
	   */
	         
      if(groupType=="assignment")
      {
        var asgrec = new SCFile("assignment", SCFILE_READONLY);
        asgrec.setFields(["wdManagerName", "operators", "approvers", "memberGroupEmail", "approverGroupEmail"]);
        if (asgrec.doSelect("name=\"" + groupName + "\"") == RC_SUCCESS) {
          var hasSmartToken = false;
          if (sendTo != "Manager") {
            var item = null;
            if (null!=templateName) {
            	item = lib.c.$('htmltemplates', SCFILE_READONLY)
	            		.setFields(['htmlcode'])
	            		.select('name="' + lib.StringUtil.escapeAllStr(templateName) + '"')
	            		.uniqueResult();
            }
            if(item) {
            	var hasSmartToken = hasEmailAction(item.htmlcode);
            }
          }

          vars.$users = getUserList4Assignment(asgrec, sendTo, hasSmartToken);
        }
        
        return vars.$users;

      }
    
      if(groupType=="kmgroup")
      {
       var kmgrec = new SCFile("kmgroup", SCFILE_READONLY);
       kmgrec.setFields(["manager","operators"]);
       if(kmgrec.doSelect("name=\""+groupName+"\"")==RC_SUCCESS)
       {
          if((sendTo=="All" || sendTo=="Manager") &amp;&amp; kmgrec.manager!=null)
          {
           vars.$users = system.functions.insert(vars.$users,0,1,kmgrec.manager);
          }
          if(sendTo=="All" || sendTo=="Operators")
          {
           for(j = 0, jLoopTimes = kmgrec.operators.length();j &lt; jLoopTimes;j++)
           { 
            vars.$users = system.functions.insert(vars.$users,0,1,kmgrec.operators[j]);
           }
          }
       }
  
       vars.$users=system.functions.denull(vars.$users);
       return vars.$users;
      }  
      if(groupType=="cm3groups")
      {
       var cmgrec = new SCFile("cm3groups", SCFILE_READONLY);
       cmgrec.setFields(["members","approvers"]);
       if(cmgrec.doSelect("name=\""+groupName+"\"")==RC_SUCCESS)
       {
          if(sendTo=="All" || sendTo=="Members")
          {
           for(j = 0, jLoopTimes = cmgrec.members.length();j &lt; jLoopTimes;j++)
           { 
            vars.$users = system.functions.insert(vars.$users,0,1,cmgrec.members[j]);
           }
          }
          if(sendTo=="All" || sendTo=="Approvers")
          {
           for(j = 0, jLoopTimes = cmgrec.approvers.length();j &lt; jLoopTimes;j++)
           { 
            vars.$users = system.functions.insert(vars.$users,0,1,cmgrec.approvers[j]);
           }
          }
       }
       vars.$users=system.functions.denull(vars.$users);
       return vars.$users;
      }
    
      if(groupType=="ocmgroups")
      {
       var ocmgrec = new SCFile("ocmgroups", SCFILE_READONLY);
       ocmgrec.setFields(["members","approvers"]);
       if(ocmgrec.doSelect("name=\""+groupName+"\"")==RC_SUCCESS)
       {
         
          if(sendTo=="All" || sendTo=="Members")
          {
           for(j = 0, jLoopTimes = ocmgrec.members.length();j &lt; jLoopTimes;j++)
           { 
            vars.$users = system.functions.insert(vars.$users,0,1,ocmgrec.members[j]);
           }
          }
          if(sendTo=="All" || sendTo=="Approvers")
          {
           for(j = 0, jLoopTimes = ocmgrec.approvers.length();j &lt; jLoopTimes;j++)
           { 
            vars.$users = system.functions.insert(vars.$users,0,1,ocmgrec.approvers[j]);
           }
          }
       }
       vars.$users=system.functions.denull(vars.$users);
       return vars.$users;
     }  
    }
    if(recipient=="Current Record")
    {
      var type = null;
      var name = null;
      var sendTo = null;
      if(!isJSONFormat) {
	      var field = lib.xmlHelpers.getElement(result, "field", null );
	      type = field.getAttributeValue("type");
	      name = field.getValue();
	      sendTo = field.getAttributeValue("sendTo");
	  } else {
	      type = jsonObj.field.type;
	      name = jsonObj.field.value;
	      sendTo = jsonObj.field.sendTo;
	  }

      var evalValue= record[name];
      var recordType =  system.functions.type (evalValue) ;
      var recordQuery =  "name" ;
      if(type=="contacts") {
      	recordQuery = "contact.name" ;
      }
      if (recordType == 8) { // fixing QCCR1E104106 Cannot send an HTML notification to approver in Change Management
         recordQuery = recordQuery +  " isin " + system.functions.str( record[name]);
      } else {
         recordQuery = recordQuery +  " = \"" + record[name] + "\"" ;
      }
      if(type=="operator")
      {
       var rec = new SCFile("operator", SCFILE_READONLY);
       rec.setFields("name");
       if(rec.doSelect(recordQuery)==RC_SUCCESS){
       		do
       		{
        		vars.$users = system.functions.insert(vars.$users,0,1,rec.name);
        	 }while ( rec.getNext() == RC_SUCCESS );
        }
       return vars.$users;
      }
      
      if(type=="contacts")
      {
       var rec = new SCFile("contacts", SCFILE_READONLY);
       rec.setFields("contact.name");
       if(rec.doSelect(recordQuery)==RC_SUCCESS)
       {
       		do
       		{
        		vars.$users = system.functions.insert(vars.$users,0,1,rec.contact_name);
        	 }while ( rec.getNext() == RC_SUCCESS );
        }
        
       return vars.$users;
      }
      
      
		if (type == "assignment") {
			var hasSmartToken = false;
		    if (sendTo != "Manager") {
	            var item = null;
	            if (null!=templateName) {
	            	item = lib.c.$('htmltemplates', SCFILE_READONLY)
	            		.setFields(['htmlcode'])
	            		.select('name="' + lib.StringUtil.escapeAllStr(templateName) + '"')
	            		.uniqueResult();
	            }
	            if(item) {
	            	var hasSmartToken = hasEmailAction(item.htmlcode);
	            }
            }

          
            vars.$users = [];
			var asgrec = new SCFile("assignment", SCFILE_READONLY);
			asgrec.setFields(["wdManagerName", "operators", "approvers", "memberGroupEmail", "approverGroupEmail"]);
			if (asgrec.doSelect(recordQuery) == RC_SUCCESS) {
				do { // do while was added for QCCR1E137068 HPSM Chg. Mgmt: No mail notification is sent for the Deployment Approval...
					var list = getUserList4Assignment(asgrec, sendTo, hasSmartToken);
					lib.ArrayUtil.addAll(vars.$users, list);
				} while (asgrec.getNext() == RC_SUCCESS)
			}

			vars.$users = system.functions.denull(vars.$users);
			return vars.$users;
		}

		if (type == "kmgroup") {
			var kmgrec = new SCFile("kmgroup", SCFILE_READONLY);
			kmgrec.setFields(["manager", "operators"]);
			if (kmgrec.doSelect(recordQuery) == RC_SUCCESS) {
				do { // do while was added for QCCR1E137068 HPSM Chg. Mgmt: No mail notification is sent for the Deployment Approval...
					if ((sendTo == "All" || sendTo == "Manager") &amp;&amp; kmgrec.manager != null) {
						vars.$users = system.functions.insert(vars.$users, 0, 1, kmgrec.manager);
					}
					if (sendTo == "All" || sendTo == "Operators") {
						for (j = 0, jLoopTimes = kmgrec.operators.length(); j &lt; jLoopTimes; j++) {
							vars.$users = system.functions.insert(vars.$users, 0, 1, kmgrec.operators[j]);
						}
					}
				} while (kmgrec.getNext() == RC_SUCCESS)
			}

			vars.$users = system.functions.denull(vars.$users);
			return vars.$users;
		}
		if (type == "cm3groups") {
			var cmgrec = new SCFile("cm3groups", SCFILE_READONLY);
			cmgrec.setFields(["members", "approvers"]);
			if (cmgrec.doSelect(recordQuery) == RC_SUCCESS) {
				do { // do while was added for QCCR1E137068 HPSM Chg. Mgmt: No mail notification is sent for the Deployment Approval...
					if (sendTo == "All" || sendTo == "Members") {
						for (j = 0, jLoopTimes = cmgrec.members.length(); j &lt; jLoopTimes; j++) {
							vars.$users = system.functions.insert(vars.$users, 0, 1, cmgrec.members[j]);
						}
					}
					if (sendTo == "All" || sendTo == "Approvers") {
						for (j = 0, jLoopTimes = cmgrec.approvers.length(); j &lt; jLoopTimes; j++) {
							vars.$users = system.functions.insert(vars.$users, 0, 1, cmgrec.approvers[j]);
						}
					}
				} while (cmgrec.getNext() == RC_SUCCESS)
			}
			vars.$users = system.functions.denull(vars.$users);
			return vars.$users;
		}

		if (type == "ocmgroups") {
			var ocmgrec = new SCFile("ocmgroups", SCFILE_READONLY);
			ocmgrec.setFields(["members", "approvers"]);
			if (ocmgrec.doSelect(recordQuery) == RC_SUCCESS) {
				do { // do while was added for QCCR1E137068 HPSM Chg. Mgmt: No mail notification is sent for the Deployment Approval...
					if (sendTo == "All" || sendTo == "Members") {
						for (j = 0, jLoopTimes = ocmgrec.members.length(); j &lt; jLoopTimes; j++) {
							vars.$users = system.functions.insert(vars.$users, 0, 1, ocmgrec.members[j]);
						}
					}
					if (sendTo == "All" || sendTo == "Approvers") {
						for (j = 0, jLoopTimes = ocmgrec.approvers.length(); j &lt; jLoopTimes; j++) {
							vars.$users = system.functions.insert(vars.$users, 0, 1, ocmgrec.approvers[j]);
						}
					}
				} while (ocmgrec.getNext() == RC_SUCCESS)
			}
			vars.$users = system.functions.denull(vars.$users);
			return vars.$users;
		}
	}
}

function populateSetClockRuleJSON() {
	var jsonObj = {};
	jsonObj.type = "setClock";
	vars.$L_file.type = "setClock";
	
	jsonObj.clockAction = vars.$L_clockAction;
	jsonObj.clockNameType = vars.$L_clockNameType;
	if(vars.$L_clockNameType=="Fixed Name") { 
	    jsonObj.clockName = vars.$L_clockName;
	}
	
	// add clock schedule fields
	jsonObj.clockScheduleType = vars.$L_clockScheduleType;
	if(vars.$L_clockScheduleType=="value" &amp;&amp; vars.$L_clockSchedule!=null) {
	    jsonObj.clockSchedule = vars.$L_clockSchedule;
	}
	
	// add clock timezone fields
	jsonObj.clockTimezoneType = vars.$L_clockTimezoneType;
	if(vars.$L_clockTimezoneType=="value") { 
	    jsonObj.clockTimezone = vars.$L_clockTimezone;
	}
	
	if(vars.$L_clockNameType=="Set Using Javascript"
	 || vars.$L_clockScheduleType=="Set Using Javascript"
	 || vars.$L_clockTimezoneType=="Set Using Javascript") {
	    jsonObj.scriptField = vars.$L_scriptField;
	}
	
	vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
	vars.$L_file.ruleXML = null;
	
	if(vars.$L_clockNameType=="Fixed Name" &amp;&amp; vars.$L_clockName!="" &amp;&amp; vars.$L_clockName!=null) {
	 var codesRec = new SCFile("codes");
	 var query="type=\"ClockName:"+vars.$L_tablename+"\" and value=\""+vars.$L_clockName+"\"";
	 if(codesRec.doSelect(query)!=RC_SUCCESS) {
	  codesRec.type="ClockName:"+vars.$L_tablename;
	  codesRec.value= vars.$L_clockName;
	  codesRec.doInsert(); 
	 }
	}
}


function populateMandatoryRuleJSON() {
    var jsonObj = {};
    jsonObj.type = "mandatoryFields";
    jsonObj.messageType = vars.$messageType;
    jsonObj.validateAll = vars.$validateAll;
    var fields = [];
	jsonObj.fieldList = fields;
    vars.$L_file.type = "mandatoryFields";

	vars.$fieldNames = system.functions.denull(vars.$fieldNames);
	vars.$defaultValues = system.functions.denull(vars.$defaultValues);
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$fieldNames.length();i &lt; iLoopTimes;++i) {
		var aField = {};
		aField.fieldName = vars.$fieldNames[i];
		if (vars.$defaultValues.length() &gt; i &amp;&amp; vars.$defaultValues[i] != null &amp;&amp; system.functions._null(vars.$defaultValues[i]) == false) {
    		aField["default"] = vars.$defaultValues[i];
    	} else {
    	    aField["default"] = "";
    	}
		fields.push(aField);
	}

    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

function populateMandatoryRule()
{
	var xml = new XML();
	xml.setContent("&lt;mandatoryFields&gt;&lt;/mandatoryFields&gt;");
	var messageType = xml.addElement("messageType");
    messageType.setValue(vars.$messageType);
	var fieldList = xml.addElement("fieldList");
	vars.$fieldNames = system.functions.denull(vars.$fieldNames);
	vars.$defaultValues = system.functions.denull(vars.$defaultValues);
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$fieldNames.length();i &lt; iLoopTimes;++i)
	{
		var fieldName = fieldList.addElement( "fieldName" );
		fieldName.setValue( vars.$fieldNames[i] );
		if (vars.$defaultValues.length() &gt; i &amp;&amp; vars.$defaultValues[i] != null &amp;&amp; system.functions._null(vars.$defaultValues[i]) == false)
		{
			fieldName.setAttributeValue("default",vars.$defaultValues[i]);
		}
	}			
	var validateAll = xml.addElement("validateAll");
    validateAll.setValue(vars.$validateAll);
    
	vars.$L_xmlstring = xml.toXMLString();
	vars.$L_file.ruleXML = xml.toXMLString();
}

function loadMandatoryRuleFromJSON(ruleString)
{
	if (ruleString == null || ruleString == "") {
		return;
	}

    var jsonObj = JSON.parse(ruleString);
	var validateAll = jsonObj.validateAll;
	if(validateAll!=null) {
	    vars.$validateAll=validateAll;
	}

	var messageType = jsonObj.messageType;
	if(messageType!=null) {
	    vars.$messageType = messageType;
	}

	var fieldList = jsonObj.fieldList;
	if (fieldList == null) {
		return;
	}

	var checkField, i;
	for(i=0, len=fieldList.length; i&lt;len; i++) {
		checkField = fieldList[i];
		if (checkField != null) {
			var field = checkField.fieldName;
			if(field != null &amp;&amp; field != "null") {
				vars.$fieldNames = system.functions.insert(vars.$fieldNames,0,1,field);
				var defaultV = checkField["default"];
				if(defaultV==null) {
				    defaultV = "";
				}
				vars.$defaultValues = system.functions.insert(vars.$defaultValues,0,1,defaultV);
			}
	    }		
	}
}

function loadMandatoryRuleFromXml(ruleString)
{
	if (ruleString == null || ruleString == "") {
		return;
	}
	
	var rule = new XML();
	rule.setContent(ruleString);
	
	var messageType = lib.xmlHelpers.getElement( rule, "messageType", null );
	if(messageType!=null){vars.$messageType=messageType.getValue();}
	
	var validateAll = lib.xmlHelpers.getElement( rule, "validateAll", null );
	if(validateAll!=null){vars.$validateAll=validateAll.getValue();}
	
	var fieldList = lib.xmlHelpers.getElement( rule, "fieldList", null );
	if (fieldList == null) {
		return;
	}
	var checkField = fieldList.getFirstChildElement();
		
	do {
		if (checkField != null)
		{
			
			var field = checkField.getValue();
			if (field != null &amp;&amp; field != "null") 
			{
				vars.$fieldNames = system.functions.insert(vars.$fieldNames,0,1,field);
			}	
		
			if (checkField.getAttributeValue("default") != null)
			{
				var defaultValue = checkField.getAttributeValue("default") ;
				if (defaultValue != null) {
					vars.$defaultValues = system.functions.insert(vars.$defaultValues,0,1,defaultValue);
				}
			}
		}		
		checkField = checkField.getNextSiblingElement();
	}	
	while(checkField != null);
}

function clearFieldRuleJSON() {
	var jsonObj = {};
    jsonObj.type = "clearFields";
    var fields = [];
	jsonObj.fieldList = fields;
    vars.$L_file.type = "clearFields";

	vars.$fieldNames = system.functions.denull(vars.$fieldNames);
	vars.$clearFields = system.functions.denull(vars.$clearFields);
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$fieldNames.length();i &lt; iLoopTimes;++i) {
		var aField = {};
		aField.fieldName = vars.$fieldNames[i];
		if (vars.$clearFields.length() &gt; i &amp;&amp; vars.$clearFields[i] != null &amp;&amp; system.functions._null(vars.$clearFields[i]) == false) {
    		aField.Clear = vars.$clearFields[i];
    	} else {
    	    aField.Clear = "";
    	}
		fields.push(aField);
	}
	
    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

function clearFieldRule()
{
	var xml = new XML();
	xml.setContent("&lt;clearFields&gt;&lt;/clearFields&gt;");
	var fieldList = xml.addElement("fieldList");
	vars.$fieldNames = system.functions.denull(vars.$fieldNames);
	vars.$clearFields = system.functions.denull(vars.$clearFields);
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$fieldNames.length();i &lt; iLoopTimes;++i)
	{
		var fieldName = fieldList.addElement( "fieldName" );
		fieldName.setValue( vars.$fieldNames[i] );
		
		if (vars.$clearFields.length() &gt; i &amp;&amp; vars.$clearFields[i] != null &amp;&amp; system.functions._null(vars.$clearFields[i]) == false)
		{
			fieldName.setAttributeValue("Clear",vars.$clearFields[i]);
		} 
	}
	
	vars.$L_xmlstring = xml.toXMLString();
	vars.$L_file.ruleXML = xml.toXMLString();
}

function clearFieldRuleFromJSON(ruleString) {
	if (ruleString == null || ruleString == "") {
		return;
	}
    var jsonObj = JSON.parse(ruleString);
	var fieldList = jsonObj.fieldList;
	if (fieldList == null) {
		return;
	}
	
	var checkField, i, len;
	for(i=0, len=fieldList.length; i&lt;len; i++) {
		checkField = fieldList[i];
		if (checkField != null) {
			var field = checkField.fieldName;
			if(field != null &amp;&amp; field != "null") {
				vars.$fieldNames = system.functions.insert(vars.$fieldNames,0,1,field);
				var clearFields = checkField.Clear;
				if(clearFields==null) {
				    clearFields = "";
				}
				vars.$clearFields = system.functions.insert(vars.$clearFields,0,1,clearFields);
			}
	    }		
	}
}

function clearFieldRuleFromXml(ruleString)
{
	if (ruleString == null || ruleString == "") {
		return;
	}
	
	var rule = new XML();
	rule.setContent(ruleString);
	var fieldList = lib.xmlHelpers.getElement( rule, "fieldList", null );
	if (fieldList == null) {
		return;
	}
	var checkField = fieldList.getFirstChildElement();
		
	do {
		if (checkField != null)
		{
			
			var field = checkField.getValue();
			if (field != null &amp;&amp; field != "null") 
			{
				vars.$fieldNames = system.functions.insert(vars.$fieldNames,0,1,field);
			}	
		
			if (checkField.getAttributeValue("Clear") != null)
			{
				var clearFields = checkField.getAttributeValue("Clear") ;
				if (clearFields != null) 
				{
					vars.$clearFields = system.functions.insert(vars.$clearFields,0,1,clearFields);
				}
		    }
	    }		
		checkField = checkField.getNextSiblingElement();
	}	
	while(checkField != null);	
}

function populateMandatoryVariableRule()
{
	var xml = new XML();
	xml.setContent("&lt;mandatoryVariables&gt;&lt;/mandatoryVariables&gt;");
	var messageType = xml.addElement("messageType");
    messageType.setValue(vars.$messageType);
	var variableList = xml.addElement("variableList");
	vars.$variableNames = system.functions.denull(vars.$variableNames);
	vars.$defaultValues = system.functions.denull(vars.$defaultValues);
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$variableNames.length();i &lt; iLoopTimes;++i)
	{
		var variableName = variableList.addElement( "variableName" );
		variableName.setValue( vars.$variableNames[i] );
		if (vars.$defaultValues.length() &gt; i &amp;&amp; vars.$defaultValues[i] != null &amp;&amp; system.functions._null(vars.$defaultValues[i]) == false)
		{
			variableName.setAttributeValue("default",vars.$defaultValues[i]);
		}
	}			
	var validateAll = xml.addElement("validateAll");
    validateAll.setValue(vars.$validateAll);
    
	vars.$L_xmlstring = xml.toXMLString();
	vars.$L_file.ruleXML = xml.toXMLString();
}

function populateMandatoryVariableRuleJSON() {
    var jsonObj = {};
    jsonObj.type = "mandatoryVariables";
    jsonObj.messageType = vars.$messageType;
    jsonObj.validateAll = vars.$validateAll;
    var variables = [];
	jsonObj.variableList = variables;
    vars.$L_file.type = "mandatoryVariables";

	vars.$variableNames = system.functions.denull(vars.$variableNames);
	vars.$defaultValues = system.functions.denull(vars.$defaultValues);

	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$variableNames.length();i &lt; iLoopTimes;++i) {
		var aVariable = {};
		aVariable.variableName = vars.$variableNames[i];
		if (vars.$defaultValues.length() &gt; i &amp;&amp; vars.$defaultValues[i] != null &amp;&amp; system.functions._null(vars.$defaultValues[i]) == false) {
    		aVariable["default"] = vars.$defaultValues[i];
    	} else {
    	    aVariable["default"] = "";
    	}
		variables.push(aVariable);
	}

    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

function loadMandatoryVariableRuleFromXml(ruleString)
{

	if (ruleString == null || ruleString == "") {
		return;
	}
	
	var rule = new XML();
	rule.setContent(ruleString);
	var messageType = lib.xmlHelpers.getElement( rule, "messageType", null );
	if(messageType!=null){vars.$messageType=messageType.getValue();}
	
	var validateAll = lib.xmlHelpers.getElement( rule, "validateAll", null );
	if(validateAll!=null){vars.$validateAll=validateAll.getValue();}
	
	var variableList = lib.xmlHelpers.getElement( rule, "variableList", null );
	if (variableList == null) {
		return;
	}
	var checkField = variableList.getFirstChildElement();
		
	do {
		if (checkField != null)
		{
			var variable = checkField.getValue();
			if (variable != null &amp;&amp; variable != "null") 
			{
				vars.$variableNames = system.functions.insert(vars.$variableNames,0,1,variable);
			}	
		
			if (checkField.getAttributeValue("default") != null)
			{
				var defaultValue = checkField.getAttributeValue("default") ;
				if (defaultValue != null) {
					vars.$defaultValues = system.functions.insert(vars.$defaultValues,0,1,defaultValue);
				}
			}
		}		
		checkField = checkField.getNextSiblingElement();
	}	
	while(checkField != null);
}

function loadMandatoryVariableRuleFromJSON(ruleString)
{

	if (ruleString == null || ruleString == "") {
		return;
	}
		
	var JSON = system.library.JSON.json();
    var jsonObj = JSON.parse(ruleString);
	
	var validateAll = jsonObj.validateAll;
	if(validateAll!=null) {
	    vars.$validateAll=validateAll;
	}

	var messageType = jsonObj.messageType;
	if(messageType!=null) {
	    vars.$messageType = messageType;
	}
	
	var variableList = jsonObj.variableList;
	if (variableList == null) {
		vars.$variableNames = [];
		vars.$defaultValues = [];
		return;
	}
		
	var checkVariable;
	var i, len;
	for(i=0, len=variableList.length; i&lt;len; i++) {
		checkVariable = variableList[i];
		if (checkVariable != null) {
			var field = checkVariable.variableName;
			if(field != null &amp;&amp; field != "null") {
				vars.$variableNames = system.functions.insert(vars.$variableNames,0,1,field);
				var defaultV = checkVariable["default"];
				if(defaultV==null) {
				    defaultV = "";
				}
				vars.$defaultValues = system.functions.insert(vars.$defaultValues,0,1,defaultV);
			}
	    }		
	}
	
}


function loadValidateRuleFromXml(ruleString) {
	if (ruleString == null || ruleString == "") {
		return;
	}
	
	var rule = new XML();
	rule.setContent(ruleString);	
	var messageType = lib.xmlHelpers.getElement( rule, "messageType", null );
	if(messageType!=null){vars.$messageType=messageType.getValue();}
	if (lib.xmlHelpers.getElement( rule, "fieldName", null ) != null) {
		vars.$fieldName = lib.xmlHelpers.getElement( rule, "fieldName", null ).getValue();
	}
	if (lib.xmlHelpers.getElement( rule, "toTable", null ) != null) {
		vars.$toTable = lib.xmlHelpers.getElement( rule, "toTable", null ).getValue();
	}
	if (lib.xmlHelpers.getElement( rule, "toField", null ) != null) {
		vars.$toField = lib.xmlHelpers.getElement( rule, "toField", null ).getValue();
	}
	if (lib.xmlHelpers.getElement( rule, "filter", null ) != null)	{
		vars.$filter = lib.xmlHelpers.getElement( rule, "filter", null ).getValue();
	}

	//get fill data
	var fieldList = lib.xmlHelpers.getElement( rule, "fillDataList", null );
	if (fieldList != null) {
		var checkField = fieldList.getFirstChildElement();
		do {
			if (checkField == null) {
				break;
			}
			var fillFrom = lib.xmlHelpers.getElement(checkField,"fillFrom");
			if (fillFrom !=  null) {
				vars.$fillFroms = system.functions.insert(vars.$fillFroms,0,1,fillFrom.getValue());
			}
			var fillTo = lib.xmlHelpers.getElement(checkField,"fillTo");	
			if (fillTo != null) {
				vars.$fillTos = system.functions.insert(vars.$fillTos,0,1,fillTo.getValue());
			}		
		
			checkField = checkField.getNextSiblingElement();
		}	
		while (checkField != null);
	}	
}

function populateValidateRule()
{
	var xml = new XML();
	xml.setContent("&lt;validateRecord&gt;&lt;/validateRecord&gt;");
	
	var messageType = xml.addElement("messageType");
    messageType.setValue(vars.$messageType);
    
	var fieldName = xml.addElement("fieldName");	
	fieldName.setValue( vars.$fieldName );
	
	var toTable = xml.addElement("toTable");	
	toTable.setValue( vars.$toTable );
	
	var toField = xml.addElement("toField");	
	toField.setValue( vars.$toField );
	
	if (!system.functions._null(vars.$filter) )
	{
		var filter = xml.addElement("filter");	
		filter.setValue( vars.$filter );
	}	
	
	if (vars.$fillFroms != null)
	{
		var fillDataList = xml.addElement("fillDataList");
		var i, iLoopTimes;
		for (i = 0, iLoopTimes = vars.$fillFroms.length();i &lt; iLoopTimes;++i)
		{
			if (!system.functions._null(vars.$fillFroms[i]))
			{
				var fillData1 = fillDataList.addElement("fillData");	
				var fillFrom = fillData1.addElement("fillFrom");	
				fillFrom.setValue( vars.$fillFroms[i] );			
				if (!system.functions._null(vars.$fillTos[i]))
				{
					var fillTo = fillData1.addElement("fillTo");	
					fillTo.setValue( vars.$fillTos[i] );		
				}	
			}	
		}
	}		
			
	vars.$L_xmlstring = xml.toXMLString();
	vars.$L_file.ruleXML = xml.toXMLString();
}

function getRuleDescription(ruleType,currentDes,tableName, values)
{
	var index, names, desc, i, iLoopTimes;
	if (ruleType == "mandatory" || "clearFields")
	{
		index = currentDes.indexOf("&lt;fields&gt;");
		if (index &gt;-1)
		{
			names = "";
			for (i = 0, iLoopTimes = values.length();i &lt; iLoopTimes;++i)
			{
				names += lib.tableFunctions.getFieldCaption(values[i],tableName)+";";
			}
		
			desc = names.substring(0,names.length-1)+currentDes.substring(index+8);
			return desc;
		}
	}

	
	if (ruleType == "mandatoryVariables")
	{
		index = currentDes.indexOf("&lt;variables&gt;");
		if (index &gt;-1)
		{
			names = "";
			for (i = 0, iLoopTimes = values.length();i &lt; iLoopTimes;++i)
			{
				names += lib.tableFunctions.getFieldCaption(values[i],tableName)+";";
			}
		
			desc = names.substring(0,names.length-1)+currentDes.substring(index+11);
			return desc;
		}
	}
	return currentDes;
}


function populateFields()
{
	var datadict = new SCFile("datadict", SCFILE_READONLY);
	var sql = "name=\""+system.vars.$L_tablename+"\"";
	var rc = datadict.doSelect(sql);
	if (rc == RC_SUCCESS)
	{
		system.vars.$fillToValues = datadict.fields;
		system.vars.$fillToCaptions = datadict.captions;
	}	

	var datadict2 = new SCFile("datadict", SCFILE_READONLY);
	var sql2 = "name=\""+system.vars.$toTable+"\"";
	rc = datadict2.doSelect(sql2);
	if (rc == RC_SUCCESS)
	{
		system.vars.$fillFromValues = datadict2.fields;
		system.vars.$fillFromCaptions = datadict2.captions;
	}	
}

function loadValidateListRuleFromXml(ruleString)
{  
  if (ruleString == null || ruleString == "") {
		return;
  }
  
  var rule = new XML();
  rule.setContent(ruleString);	
  var messageType = lib.xmlHelpers.getElement( rule, "messageType", null );
  if(messageType!=null){vars.$messageType=messageType.getValue();}

  if (lib.xmlHelpers.getElement( rule, "toList", null ) != null) {
  	vars.$toList = lib.xmlHelpers.getElement( rule, "toList", null ).getValue();
  }
  if (lib.xmlHelpers.getElement( rule, "fieldName", null ) != null) {
		vars.$fieldName = lib.xmlHelpers.getElement( rule, "fieldName", null ).getValue();
  }
  if (lib.xmlHelpers.getElement( rule, "toGlobal", null ) != null)	{
		vars.$toGlobal = lib.xmlHelpers.getElement( rule, "toGlobal", null ).getValue();
  }
  
  var List = lib.xmlHelpers.getElement( rule, "manualList", null );
  if (List != null)
  {
		var checkList = List.getFirstChildElement();
		do 
		{
			if (checkList == null) {
				break;
			}
		
			var toManual = checkList.getValue();
			
			if (toManual !=  null) {
			 	vars.$toManual = system.functions.insert(vars.$toManual,0,1,toManual);
			}
					
			checkList = checkList.getNextSiblingElement();
		}	
		while (checkList != null);		
	}
			
}


function populateValidateListRule()
{
	var xml = new XML();
	xml.setContent("&lt;validateList&gt;&lt;/validateList&gt;");
	
	var messageType = xml.addElement("messageType");
    messageType.setValue(vars.$messageType);

	var toList = xml.addElement("toList");	
	toList.setValue( vars.$toList );
	
	var fieldName = xml.addElement("fieldName");	
	fieldName.setValue( vars.$fieldName );
	
	var toGlobal = xml.addElement("toGlobal");	
	toGlobal.setValue( vars.$toGlobal );
    	
    if (vars.$toManual != null) {
		var manualList = xml.addElement("manualList");
	}
		
	var i, iLoopTimes;
	for (i = 0, iLoopTimes = vars.$toManual.length();i &lt; iLoopTimes;i++)
	{		
		if (!system.functions._null(vars.$toManual[i]))
			{
				var manualItem = manualList.addElement("manualItem");	
				manualItem.setValue(vars.$toManual[i] );
			}	
	}
	
	vars.$L_xmlstring = xml.toXMLString();
	vars.$L_file.ruleXML = xml.toXMLString();
}

function populateClockNames()
{
 var clockRecs = new SCFile("codes", SCFILE_READONLY);
 var clockNameArray = new SCDatum();
 var query="type=\"ClockName:"+vars.$L_tablename+"\"";
 if(clockRecs.doSelect(query)==RC_SUCCESS)
 { 
   clockRecs.getFirst();
   do
   {
     clockNameArray.push(clockRecs.value);
   }while(clockRecs.getNext()==RC_SUCCESS);
   
 }
 vars.$clockNameList=clockNameArray;
 
}


function populateDateFieldsList()
{
 var datadict = new SCFile("datadict", SCFILE_READONLY);
 datadict.doSelect("name=\""+vars.$L_tablename+"\"");
 if(datadict.getFirst()==RC_SUCCESS)
 {
   var fieldNames = new SCDatum();
   var fieldCaptions = new SCDatum();
  
   var i, iLoopTimes;
   for(i = 0, iLoopTimes = datadict.types.length();i &lt; iLoopTimes;i++)
   {
    if(datadict.types[i]==3)
    {
     fieldNames.push(datadict.fields[i]);
     fieldCaptions.push(datadict.captions[i]);
    }
   }
   
   vars.$fieldsNameList = fieldNames;
   vars.$fieldsCaptionList = fieldCaptions;
   
   fieldNames.push("[Current Date/Time]");
   fieldCaptions.push("[Current Date/Time]");
   
   vars.$fieldsNameList2 = fieldNames;
   vars.$fieldsCaptionList2 = fieldCaptions;
 }
 
}

function populateTextNumFieldsList()
{
 var datadict = new SCFile("datadict", SCFILE_READONLY);
 datadict.doSelect("name=\""+vars.$L_tablename+"\"");
 if(datadict.getFirst()==RC_SUCCESS)
 {
   var fieldNames = new SCDatum();
   var fieldCaptions = new SCDatum();
   var i, iLoopTimes;
   for(i = 0, iLoopTimes = datadict.types.length();i &lt; iLoopTimes;i++)
   {
    if(datadict.types[i]==1)
    {
     fieldNames.push(datadict.fields[i]);
     fieldCaptions.push(datadict.captions[i]);
    }
    if(datadict.types[i]==2)
    {
     fieldNames.push(datadict.fields[i]);
     fieldCaptions.push(datadict.captions[i]);
    }
   }
   vars.$fieldsNameList = fieldNames;
   vars.$fieldsCaptionList = fieldCaptions;
  }
}


function populateFieldsSetNumberRule()
{
 var datadict = new SCFile("datadict", SCFILE_READONLY);
 datadict.doSelect("name=\""+vars.$L_tablename+"\"");
 if(datadict.getFirst()==RC_SUCCESS)
 {
   var fieldNames = new SCDatum();
   var fieldCaptions = new SCDatum();
  
   var i, iLoopTimes;
   for(i = 0, iLoopTimes = datadict.types.length();i &lt; iLoopTimes;i++)
   {
    if(datadict.types[i]==1 || datadict.types[i]==2)
    {
     fieldNames.push(datadict.fields[i]);
     fieldCaptions.push(datadict.captions[i]);
    }
   }
   vars.$fieldsNameList = fieldNames;
   vars.$fieldsCaptionList = fieldCaptions;

 }
 
}

function populateRADResultXML(message)
{
  var RESULTXML = "&lt;result&gt;&lt;/result&gt;";
  var result = new XML();
  result.setContent(RESULTXML);
  messageXML = result.addElement("message");
  messageXML.setValue(message);
  result.setAttributeValue("returnCode",1);
  return result;
}

function populateSetFieldRuleJSON() {
    var jsonObj = {};
    jsonObj.type = "setField";
    jsonObj.fieldName = vars.$L_ruleFieldName;
    jsonObj.script = vars.$L_ruleScript;

    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.type = "setField";
    vars.$L_file.ruleXML = null;
}

function loadSetFieldRuleFromJSON(ruleString) {
    if (ruleString == null || ruleString == "") {
        return;
    }

    var JSON = system.library.JSON.json();
    var jsonObj = JSON.parse(ruleString);
    vars.$L_ruleFieldName = jsonObj.fieldName;
    vars.$L_ruleScript = jsonObj.script;
}

function loadValidateListRuleFromJson(ruleString) {
    if (ruleString == null || ruleString == "") {
        return;
    }

    var JSON = system.library.JSON.json();
    var jsonObj = JSON.parse(ruleString);
    vars.$messageType = jsonObj.messageType;
    vars.$toList = jsonObj.toList;
    vars.$fieldName = jsonObj.fieldName;

    vars.$toGlobal = jsonObj.toGlobal;
    vars.$toManual = jsonObj.manualList;
}

function populateValidateListRuleJSON() {

    var jsonObj = {};
    jsonObj.type = "validateList";
    jsonObj.messageType = vars.$messageType;
    jsonObj.toList = vars.$toList;
    jsonObj.fieldName = vars.$fieldName;
    jsonObj.toGlobal = vars.$toGlobal;

    if (vars.$toManual != null) {
        var manualItems = [];
        jsonObj.manualList = manualItems;
        var i, iLoopTimes;
        for (i = 0, iLoopTimes = vars.$toManual.length(); i &lt; iLoopTimes; i++) {

            if (!system.functions._null(vars.$toManual[i])) {
                manualItems.push(vars.$toManual[i]);
            }
        }
    }

    vars.$L_file.type = "validateList";
    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

function loadValidateRangeRuleFromJson(ruleString) {
    if (ruleString == null || ruleString == "") {
        return;
    }

    var JSON = system.library.JSON.json();
    var jsonObj = JSON.parse(ruleString);

    vars.$messageType = jsonObj.messageType;
    vars.$fieldName = jsonObj.fieldName;
    vars.$rangeType = jsonObj.rangeType;

    if (jsonObj.comparison) {
        vars.$not = jsonObj.comparison.not;
        vars.$operator = jsonObj.comparison.operator;
    }
    if (jsonObj.compareField) {
        vars.$compareField1 = jsonObj.compareField.cField1;
        vars.$compareField2 = jsonObj.compareField.cField2;
    }
    if (jsonObj.value) {
        vars.$value1 = jsonObj.value.value1;
        vars.$value2 = jsonObj.value.value2;
    }
}


function populateValidateRangeRuleJSON() {

    var jsonObj = {};
    jsonObj.type = "validateRange";

    jsonObj.fieldName = vars.$L_fieldName;
    jsonObj.messageType = vars.$L_messageType;
    jsonObj.rangeType = vars.$rangeType;

    jsonObj.comparison = {};
    jsonObj.comparison.not = vars.$L_not;
    jsonObj.comparison.operator = vars.$operator;

    jsonObj.compareField = {};
    jsonObj.compareField.cField1 = vars.$L_compareField1;
    jsonObj.compareField.cField2 = vars.$L_compareField2;

    jsonObj.value = {};
    jsonObj.value.value1 = vars.$L_value1;
    jsonObj.value.value2 = vars.$L_value2;

    vars.$L_file.type = "validateRange";
    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

function loadValidateRecordRuleFromJSON(ruleString) {
    if (ruleString == null || ruleString == "") {
        return;
    }

    var JSON = system.library.JSON.json();
    var jsonObj = JSON.parse(ruleString);

    vars.$messageType = jsonObj.messageType;
    vars.$fieldName = jsonObj.fieldName;
    vars.$toTable = jsonObj.toTable;
    vars.$toField = jsonObj.toField;
    vars.$filter = jsonObj.filter;
    vars.$alwaysValidate = jsonObj.alwaysValidate;
    if(vars.$alwaysValidate==null) {
        vars.$alwaysValidate = false;
    }

	var i, lng;
    for (i = 0, lng = jsonObj.fillDataList.length; i &lt; lng; ++i) {
        vars.$fillFroms = system.functions.insert(vars.$fillFroms, 0, 1, jsonObj.fillDataList[i].fillFrom);
        vars.$fillTos = system.functions.insert(vars.$fillTos, 0, 1, jsonObj.fillDataList[i].fillTo);
    }
}

function populateValidateRecordRuleJSON() {

    var jsonObj = {};
    jsonObj.type = "validateRecord";

    jsonObj.messageType = vars.$messageType;
    jsonObj.fieldName = vars.$fieldName;
    jsonObj.toTable = vars.$toTable;
    jsonObj.toField = vars.$toField;
    jsonObj.filter = vars.$filter;
    jsonObj.alwaysValidate = vars.$alwaysValidate;

    var fillFields = [];
    jsonObj.fillDataList = fillFields;
    if (vars.$fillFroms != null) {
    	var i, iLoopTimes;
        for (i = 0, iLoopTimes = vars.$fillFroms.length(); i &lt; iLoopTimes; ++i) {
            if (!system.functions._null(vars.$fillFroms[i])) {
                var fillField = {};
                fillField.fillFrom = vars.$fillFroms[i];
                fillField.fillTo = vars.$fillTos[i];
                fillFields.push(fillField);
            }
        }
    }

    vars.$L_file.type = "validateRecord";
    vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
    vars.$L_file.ruleXML = null;
}

/**
* return true if the email body contains a email action
* @body Email body defined in htmltemplates
*/
function hasEmailAction(body) {
  var action_regx = /email_action\(.*?\)/i;
  var ret = action_regx.test(body);
  return ret;
}

function getUserList4Assignment(group, sendTo, hasSmartToken) {
  var list = [];
  if ((sendTo == "Manager") &amp;&amp; group.wdManagerName != null) {
    list.push(group.wdManagerName);
  } else if (sendTo == "Approvers") {
    if (hasSmartToken || group.approverGroupEmail == null) {
      lib.ArrayUtil.addAll(list, funcs.denull(group.approvers));
    } else {
      list.push(group.approverGroupEmail);
    }
  } else if (sendTo == "Operators") {
    if (hasSmartToken || group.memberGroupEmail == null) {
      lib.ArrayUtil.addAll(list, funcs.denull(group.operators));
    } else {
      list.push(group.memberGroupEmail);
    }
  } else if (sendTo == "All") {
    if (hasSmartToken || group.memberGroupEmail == null) {
      lib.ArrayUtil.addAll(list, funcs.denull(group.operators));
    } else {
      list.push(group.memberGroupEmail);
    }

    if (hasSmartToken || group.approverGroupEmail == null) {
      lib.ArrayUtil.addAll(list, funcs.denull(group.approvers));
    } else {
      list.push(group.approverGroupEmail);
    }

    if (group.wdManagerName) {
      list.push(group.wdManagerName);
    }
  }

  return list;
}</script>
    <package type="string">Rules Engine</package>
    <sysmodtime type="dateTime">06/19/19 16:27:34</sysmodtime>
    <sysmoduser type="string">qiqingsong</sysmoduser>
    <sysmodcount type="decimal">93</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
