<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;RequestTaskService&quot;" recordid="RequestTaskService">
    <name type="string">RequestTaskService</name>
    <script type="string">/**
 * @fileOverview  Proivde the functionality of RequestTask Object
 * @author Wang Xun
 * @date Dec. 2013
 */

//Const variable declare
var STOCK_NUMBER_TYPE_ON_ORDER    = 1;
var STOCK_NUMBER_TYPE_RECEIVED    = 7;
var STOCK_NUMBER_TYPE_AVAILABLE   = 3;
var STOCK_NUMBER_TYPE_RESERVED    = 4;
var STOCK_NUMBER_TYPE_INSTALLED   = 5;
var STOCK_NUMBER_TYPE_UNAVAILABLE = 6;
	
var Util = system.library.RequestUtil;

var MAX_ISIN_STR=200;
var MAX_ARRAY_LEN=10000;
// during this time, the save and save&amp;exit button of requestTask will be disabled
var MAX_SCHEDULE_WAITING_TIME=10*60;

var DENULL=system.functions.denull;
var VAL=system.functions.val;
var INDEX=system.functions.index;
var RTECALL=system.functions.rtecall;
var SCMSG=system.functions.scmsg;
var TOD=system.functions.tod;

/**
 * @public
 * @description  Get value list and status list for allowed status of each phase.
 * @param {String} WorkflowState - Workflow Phase
 * 
 */
function setStatusList(WorkflowState,Status)
{

    var allowStatus=lib.security.getRights("RequestTask", "allowedStatus");
	 
	if (WorkflowState == "Waiting")
	
		vars.$RequestTask_statusValueList = ["Planned", "Ready", "Cancelled"];
		
	else if (WorkflowState == "Active" &amp;&amp; Status == "Ready")
		
		vars.$RequestTask_statusValueList = [ "Ready", "In Progress" , "Pending Customer" , "Pending Vendor" ];
		
	else if (WorkflowState == "Active" &amp;&amp; Status != "Ready")
		
		vars.$RequestTask_statusValueList = [ "In Progress" , "Pending Customer" , "Pending Vendor" ];
		
	else if (WorkflowState == "CMDB Update" )	
		
		vars.$RequestTask_statusValueList = [ "CMDB Update" ];
		
	else if (WorkflowState == "Review")	
		
		vars.$RequestTask_statusValueList = [ "Pending Review"];
		
	else if (WorkflowState == "Cancelled")	
		
		vars.$RequestTask_statusValueList = [ "Cancelled"];
		
	else if (WorkflowState == "Closure")	
		
		vars.$RequestTask_statusValueList = [ "Closed"];
		
	  
  	vars.$RequestTask_statusValueList = Util.intersect(vars.$RequestTask_statusValueList, allowStatus);
  	  	 
  	vars.$RequestTask_StatusDisplayList= Util.getDisplayList("requesttask",vars.$RequestTask_statusValueList);

  }

function cancelPlannedTask(file, closurecode, closurecomment)
{
	if(file.status=="Planned")
	{
	file.closure_code =VAL(closurecode,2);
	file.closure_comments=closurecomment;
	file.current_phase="Cancelled";
	file.status="Cancelled";
	file.open=false;
	vars.$bypass_bg_authcheck = true;
    vars.$bypass_failed_validation = true; 
	file.doUpdate();
	vars.$bypass_bg_authcheck = false;
    vars.$bypass_failed_validation = false; 
    lib.TaskPlannerHelper.updatePlan(file);
	}

}

/**
	* @fileOverview  Cancel Open  task
 	* @author Wang Yonglei
 	* @date March. 2014: 		
	* @param {record} 	file				- the task record
	* @param {Number} 	closurecode		  	- the closure code
	* @param {String} 	closurecomment		- the closure comment
**/
function cancelOpenedTask(file, closurecode, closurecomment)
{
	var phase = file["current_phase"];
	if (file.open == true &amp; !isCompletedPhase(phase) &amp; file.status!="Planned") 
	{
	file.closure_code =VAL(closurecode,2);
	file.closure_comments=closurecomment;
	file.current_phase="Cancelled";
	file.status="Cancelled";
	file.open=false;
	vars.$bypass_bg_authcheck = true;
    vars.$bypass_failed_validation = true; 
	file.doUpdate();
	
	vars.$bypass_bg_authcheck = false;
    vars.$bypass_failed_validation = false; 
    lib.TaskPlannerHelper.updatePlan(file);
	}

}


var completedPhase = ["Closure","Cancelled"];
/**
	* @fileOverview  if phase in completed phase list
 	* @author Wang Yonglei
 	* @date March. 2014: 
 	* @param {String} 	phase --the phase of request task		
 
**/
function isCompletedPhase(phase) 
{
	for (var i = 0; i &lt; completedPhase.length; i++) 
	{
		if (phase == completedPhase[i])
		{
			return true;
		}
	}
	return false;
}
/////////////////////////////////////////////////////////////////
////////////////////////// CMDB Update //////////////////////////
/////////////////////////////////////////////////////////////////

/**
	* @fileOverview  Get Receipts which generated by previous step of current purchase task
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record				- the task record
**/

function getReceivedCIList(record)
{
	var ret = new SCDatum();
	ret.setType(8);
	
	var reciptno = new SCDatum();
	reciptno.setType(8);	
	
	var serialno = new SCDatum();
	serialno.setType(8);	
	
	var rec=new SCFile("ocmlrec", SCFILE_READONLY);
	var sql="requesttask=\""+record.number+"\" and request=\""+record.parentTicket+"\" and status~=\"closed\"";
	if(rec.doSelect(sql)===RC_SUCCESS){
		do{
			ret.push(rec.logical_name);
			reciptno.push(rec.receive_no);	
			serialno.push(rec.serial_no_);
		}while(rec.getNext()===RC_SUCCESS)
	}
	return {"CIListContext":ret,"CIReciptNo":reciptno, "CISerialNo":serialno};
}



/**
	* @fileOverview  Check whether current logical name(CI) already existing in CMDB
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {character} 	logicalname			- CI logical name
**/

function checkCMDBExisting(logicalname)
{
	var dev=new SCFile("device", SCFILE_READONLY);
	dev.setFields(["logical.name"]);
	var sql="logical.name=\""+logicalname+"\"";
	if(dev.doSelect(sql)===RC_SUCCESS){
		return false;
	}
	return true;
}


/**
	* @fileOverview  Generate array value list for CMDB Update phase of Request Task.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record			- Task record
**/
function getTicketContextCMDBUpdateList(record)
{
	if(record.current_phase==="CMDB Update"){
		if(record.category==="Purchase"){
			var temp= getReceivedCIList(record);
			record.CIReciptNo=temp.CIReciptNo;
			vars.$ciSerialNo=temp.CISerialNo;
			return temp.CIListContext;
		}else{
			// from Additional Properties  input of current task record.		
			var CIInputList=getMyCIListTicketContextConfigName(record, "input");
			var tcc=new SCFile("ticketContextConfig");
			var tccsql="fileId=\""+record.parentTicket+"\" and fileName=\"request\" and type=\"configurationitem\" and id=\""+CIInputList+"\"";
			if(tcc.doSelect(tccsql)===RC_SUCCESS){
				var ret = new SCDatum();
				ret.setType(8);
				if(tcc.value!=null){
					var ciarray = tcc.value.split(",");
					for(var i=0; i&lt;ciarray.length; i++){
						ret.push(ciarray[i]);
					}
					return ret;	
				}
			}		
		}
	}
	
	return null;
}

/**
	* @fileOverview  Utility function to merge 2 array together.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {array} 	array1			- array tobe merged
	* @param {arrat} 	array2			- array tobe merged
**/


function MergeArray(array1, array2)
{
	var temp = new SCDatum();
	temp.setType(8);
	
	if(array1!=null){
		for(var i=0; i&lt;array1.length(); i++){
			temp.push(array1[i]);
		}
	}
	
	if(array2!=null){
		for(var i=0; i&lt;array2.length(); i++){
			temp.push(array2[i]);
		}
	}
	
	return removeduplicate(temp);
}

/**
	* @fileOverview  remove the duplicate member of array.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {array} 	array1			- array tobe remove duplicated
**/

function removeduplicate(arr1)
{
	var temp = new SCDatum();
	temp.setType(8);
	
	var provisionalTable = {}; 
	var arr=arr1.toArray();
	if(arr==null || arr.length===0){
		return temp;
	}
	if(arr.length &gt; MAX_ARRAY_LEN){
		return arr1;
	}
	for (var i = 0; i&lt;arr.length; i++) {
		var item=arr[i];
		if (!provisionalTable[item]) { 
			temp.push(item); 
			provisionalTable[item] = true; 
		} 
	}
	return temp; 
}

/**
	* @fileOverview  check is there any duplicate member existing in one array.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {array} 	arrayinput			- array tobe checked
**/

function isDuplicate( arrayinput )
{
	var duplicateResult=[];
	if(arrayinput== null){
		return {"ret":false,"retstr":""};
	}
	
	var arr = trimArray(arrayinput).toArray();
	if(arr==null || arr.length===0){
		return {"ret":false,"retstr":""};
	}
	
	if(arr.length &gt; MAX_ARRAY_LEN){
		return {"ret":false,"retstr":""};
	}
	
	var temp={};
	for(var i=0; i&lt;arr.length; i++){
		var item=arr[i];
	
		if(temp[item]){
			duplicateResult.push(arr[i]);
		}else{
			temp[item]=true;
		}
	}

		
	if(duplicateResult.length&gt;0){
		return {"ret":true,"retstr":duplicateResult};
	}else{
		return {"ret":false,"retstr":""};
	}
}

/**
	* @fileOverview  check is there any reference of non-existing Additional Properties  CI logicalname.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record - current request task
**/


function isRefNotExistingTicketContextCI(record)
{
	var t1=getTicketContextCMDBUpdateList(record);
	var t2=trimArray(record.CIListContext);
		
	if(t1 == null){
		t1 = new SCDatum([]);
		t1.setType(8);
	}
	
	var arr1=t1.toArray();
	var arr2=t2.toArray();
	
	if(arr1.length&gt;MAX_ARRAY_LEN || arr2.length &gt; MAX_ARRAY_LEN || (arr1.length + arr2.length) &gt; MAX_ARRAY_LEN ){
		return {"ret":true,"retstr":""};
	}
			
	var newArray=[]; 
	var provisionalTable = {}; 

	for (var i = 0; i&lt;arr1.length; i++) {
		var item=arr1[i];
		if (!provisionalTable[item]) { 
			provisionalTable[item] = true; 
		} 
	}
	
	for (var i = 0; i&lt;arr2.length; i++) {
		var item=arr2[i];
		if (!provisionalTable[item]) { 
			newArray.push(item); 
		} 
	}
	
	if(newArray.length&gt;0){
		return {"ret":false,"retstr":newArray};
	}else{
	 	return {"ret":true,"retstr":""};
	}
	
	
	return newArray; 
}

/**
	* @fileOverview Validate the user operation reference a CI existing in CMDB
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record				- the task record
**/
function isRefExistingCMDBCI(record)
{	
	var arrayToCheck=trimArray(record.CIListContext);
	var CILength = arrayToCheck.length();	
	
	if(CILength==0){
		return {"ret":false,"retstr":""};
	}
	
	var isinsql = "";
	var sql="";
	
	if(CILength&gt;MAX_ISIN_STR){
		var divGroups=Math.ceil(CILength/MAX_ISIN_STR);
		for(var a=0;a&lt;divGroups;a++){
			var tempcheck=[];
			
			isinsql="{";
			
			for(var b=a*MAX_ISIN_STR;(b&lt;(a+1)*MAX_ISIN_STR)&amp;&amp;b&lt;CILength;b++){
				if((b+1)==(a+1)*MAX_ISIN_STR ||(b+1)== CILength){
					isinsql+="\""+arrayToCheck[b]+"\"";
				}
				else{
					isinsql+="\""+arrayToCheck[b]+"\",";
				}
			}
			isinsql+="}";
			
			sql =  " logical.name isin " + isinsql;
			var dev= new SCFile("device", SCFILE_READONLY);
			dev.setFields(["logical.name"]);
			
			var tempCI=[];
			print(sql);
			if(dev.doSelect(sql)===RC_SUCCESS){
				do{
					tempCI.push(dev["logical.name"]);
				}while(dev.getNext()===RC_SUCCESS)
			}
			if (tempCI.length&gt;0)
			  return {"ret":true,"retstr":tempCI};
		}
	}else{
		isinsql="{";
		for(var i=0;i&lt;CILength;i++){
			if((i+1)==CILength){
				isinsql+="\""+arrayToCheck[i]+"\"";
			}
			else{
				isinsql+="\""+arrayToCheck[i]+"\",";
			}
		}
		isinsql+="}";
		
		sql =  " logical.name isin " + isinsql;
		var dev= new SCFile("device", SCFILE_READONLY);
		dev.setFields(["logical.name"]);
		
		var tempCI=[];
		if(dev.doSelect(sql)===RC_SUCCESS){
			do{
				tempCI.push(dev["logical.name"]);
			}while(dev.getNext()===RC_SUCCESS)
		}
		
		if(tempCI.length&gt;0){
			return {"ret":true,"retstr":tempCI};
		}
	}	
	
	return {"ret":false,"retstr":""};
}

/**
	* @fileOverview  check is there any reference of non-existing CMDB CI logicalname.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record - current request task
**/


function SubetDiffArray(arr1, arr2)
{
	var newArray=[]; 
	var provisionalTable = {}; 
	
	if(arr1===null || arr2===null){
		return newArray;
	}
	
	if(arr1.length &gt; MAX_ARRAY_LEN || arr2.length&gt; MAX_ARRAY_LEN || (arr1.length + arr2.length) &gt; MAX_ARRAY_LEN ){
		return newArray;
	}
	
	for (var i = 0; i&lt;arr1.length; i++) {
		var item=arr1[i];
		if (!provisionalTable[item]) { 
			provisionalTable[item] = true; 
		} 
	}
	
	for (var i = 0; i&lt;arr2.length; i++) {
		var item=arr2[i];
		if (!provisionalTable[item]) { 
			newArray.push(item); 
			provisionalTable[item] = true; 
		} 
	}
	return newArray;
}

/**
	* @fileOverview Validate the user operation reference a CI not existing in CMDB
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	record				- the task record
**/

function isRefNotExistingCMDBCI(record)
{	
	var arrayToCheck = MergeArray(trimArray(record.CIListContext), trimArray(record.CIListCMDB));
	var CILength = arrayToCheck.length();	
	
	if(CILength==0){
		return {"ret":false,"retstr":""};
	}
	
	var isinsql = "";
	var sql="";
	
	if(CILength&gt;MAX_ISIN_STR){
		var divGroups=Math.ceil(CILength/MAX_ISIN_STR);
		for(var a=0;a&lt;divGroups;a++){
			var tempcheck=[];
			
			isinsql="{";
			
			for(var b=a*MAX_ISIN_STR;(b&lt;(a+1)*MAX_ISIN_STR)&amp;&amp;b&lt;CILength;b++){
				tempcheck.push(arrayToCheck[b]);
				
				if((b+1)==(a+1)*MAX_ISIN_STR ||(b+1)== CILength){
					isinsql+="\""+arrayToCheck[b]+"\"";
				}
				else{
					isinsql+="\""+arrayToCheck[b]+"\",";
				}
			}
			isinsql+="}";
			
			sql =  " logical.name isin " + isinsql;
			var dev= new SCFile("device", SCFILE_READONLY);
			dev.setFields(["logical.name"]);
			
			var tempCI=[];
			print(sql);
			if(dev.doSelect(sql)===RC_SUCCESS){
				do{
					tempCI.push(dev["logical.name"]);
				}while(dev.getNext()===RC_SUCCESS)
			}
			
			var tresult=SubetDiffArray(tempCI, tempcheck);
			
			if(tresult.length&gt;0){
				return {"ret":true,"retstr":tresult};
			}		
		}
	}else{
		isinsql="{";
		for(var i=0;i&lt;CILength;i++){
			if((i+1)==CILength){
				isinsql+="\""+arrayToCheck[i]+"\"";
			}
			else{
				isinsql+="\""+arrayToCheck[i]+"\",";
			}
		}
		isinsql+="}";
		
		sql =  " logical.name isin " + isinsql;
		var dev= new SCFile("device", SCFILE_READONLY);
		dev.setFields(["logical.name"]);
		
		var tempCI=[];
		if(dev.doSelect(sql)===RC_SUCCESS){
			do{
				tempCI.push(dev["logical.name"]);
			}while(dev.getNext()===RC_SUCCESS)
		}
		
		var tresult=SubetDiffArray(tempCI, arrayToCheck.toArray());
		
		if(tresult.length&gt;0){
			return {"ret":true,"retstr":tresult};
		}
	}	
	
	return {"ret":false,"retstr":""};;
}


/**
	* @fileOverview  utility function to remove blank CI in array(include middle member or tail member).
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {array} 	arrayrecord - array to trim
**/

function trimArray(arrayrecord)
{
	var _ = lib.Underscore.require();
	var _str = _.str;
	var temp = new SCDatum([]);
	temp.setType(8);
	
	if(arrayrecord==null){
		return temp;
	}
	
	var tempArray=arrayrecord.toArray();
	if(tempArray==null || tempArray.length===0){
		return temp;
	}
	
	for(var i=0; i&lt;tempArray.length;i++)
	{
		var t=tempArray[i];
		if(t==null || t.length==0){
			continue;
		}else{
			temp.push(t);
		}
	}
	
	return temp;
}

/**
	* @fileOverview  Get parent ticket of current task
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {parentTicketNum} 	- the parent request number
**/

function getParentTicket(parentTicketNum){
	var req=new SCFile("request");
	var sql="number=\""+parentTicketNum+"\"";
	if(req.doSelect(sql)===RC_SUCCESS){
		return req;
	}
	return null;
}

/**
	* @fileOverview  Get parent ticket by current task id
 	* @author quan.mi@hpe.com
 	* @date Nov, 2015	
	* @param {taskId} 	- the request task id
**/
function getParentTikcetbyTaskId(taskId){

	var reqTask=new SCFile("requestTask", SCFILE_READONLY);
	var sql="number=\""+taskId+"\"";
	if(reqTask.doSelect(sql)===RC_SUCCESS){
		var parentId =reqTask.parent_request;
		if(parentId!=null) {
			return getParentTicket(parentId);			
		}
	}
	return null;

}
/**
	* @fileOverview  get configuration for current request task
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/
function getMapConfiguration(record){
	var t=getParentTicket(record.parentTicket);
	if(t!=null){
		var parentCategory=t.category;
		if(parentCategory!=null){
			var map=new SCFile("requestTaskCMDBUpdateMap", SCFILE_READONLY);
			var sql="task.category=\""+record.category+"\" and request.category=\""+parentCategory+"\"";
			if(map.doSelect(sql)===RC_SUCCESS){
				return map;
			}
		}
	}
	return null;
}

/**
	* @fileOverview  get department of requestor in request ticket 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/

function getRequestorDeptName(reqName){
	var con=new SCFile("contacts", SCFILE_READONLY);
	con.setFields(["dept.name"]);
	var sql="contact.name=\""+reqName+"\"";	
	if(con.doSelect(sql)===RC_SUCCESS){
		return con.dept_name;
	}
	return null;
}

/**
	* @fileOverview  get link filter configuration 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/

function getLinkFilterQuery(record){
	var t=getParentTicket(record.parentTicket);
	var map=getMapConfiguration(record);
	if(map!=null &amp;&amp; t.requested_for){
		var deptname=getRequestorDeptName(t.requested_for);
		return map.filter_query.replace("@depname@",deptname);
	}else{
		return null;
	}
}


/**
	* @fileOverview  get old CI status value 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/
function getOldStatusValue(record){
	var map=getMapConfiguration(record);
	if(map!=null){
		return map.old_ci_status;
	}else{
		return null;
	}
}

/**
	* @fileOverview  get new CI status value 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/

function getNewStatusValue(record){
	var map=getMapConfiguration(record);
	if(map!=null){
		return map.target_ci_status;
	}else{
		return null;
	}
}

/**
	* @fileOverview  get forname displayed in current request task base on configuration 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/
function getFormName(record){	
	var map=getMapConfiguration(record);
	if(map!=null){
		return map.form_name;
	}else{
		return "rm.requestTask.CMDBUpdate";
	}
}

/**
	* @fileOverview  get action ( createCI or updateCI) 
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {record} 	- request Task
**/

function getAction(record){	
	var map=getMapConfiguration(record);
	if(map!=null){
		return map.action;
	}else{
		return null;
	}
}

function DeviceFieldExisting(fieldname, tablename)
{
	var table = new SCFile( "datadict" );
	var sql = "name=\""+tablename+"\"";
	
	if ( table.doSelect( sql ) == RC_SUCCESS ){	
		var indexp = INDEX( fieldname.replace(/^\s*/, '').replace(/\s*$/, ''), table.fields );
		if ( indexp &gt; 0 ){
			return true;
		}
	}
	
	return false;
}
/**
	* @fileOverview get receipts instance by receipts number.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	recno - receipts number
**/

function getReceipts(recno, tablename){

	var ocmlrec = new SCFile("ocmlrec")
	
	var sql="receive.no=" + recno;
	var ret=[];
	if(ocmlrec.doSelect(sql)===RC_SUCCESS){
		
		if(ocmlrec.asset_tag!=null){
			ret.push({"fieldname":"asset_tag","fieldvalue":ocmlrec.asset_tag});
		}else{
			ret.push({"fieldname":"asset_tag","fieldvalue":""});
		}
	
		if(ocmlrec.part_no!=null){
			ret.push({"fieldname":"part_no","fieldvalue":ocmlrec.part_no});
		}else{
			ret.push({"fieldname":"part_no","fieldvalue":""});
		}

		if(ocmlrec.serial_no_!=null){
			ret.push({"fieldname":"serial_no_","fieldvalue":ocmlrec.serial_no_});
		}else{
			ret.push({"fieldname":"serial_no_","fieldvalue":""});
		}
								
		var fieldName=DENULL(ocmlrec.receiving_fields_name);
		var fieldValue=DENULL(ocmlrec.receiving_fields);
	
		if(fieldName!= null &amp;&amp; fieldName.length()&gt;0){
			for(var i=0; i&lt;fieldName.length(); i++){
				if(fieldName[i] === null|| fieldName[i].length === ""){
					continue;
				}else{
					if(DeviceFieldExisting(fieldName[i], tablename)){
						var fname=fieldName[i].replace(/\./g,"_");
					
						if(fieldValue!== null &amp;&amp; fieldValue[i]!==null){
							var fvalue=fieldValue[i].replace(/[\ |\~|\`|\!|\@|\#|\$|\%|\^|\&amp;|\*|\(|\)|\-|\_|\+|\=|\||\\|\[|\]|\{|\}|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?]/g,""); 
							ret.push({"fieldname":fname,"fieldvalue":fvalue});			
						}else{
							ret.push({"fieldname":fname,"fieldvalue":""});		
						}
					}
				}
			}
		}
		
		ocmlrec.status="closed";	
		ocmlrec.doSave();
	}
	return ret;
}

/**
	* @fileOverview get receipts correspond table name and corrspond CI device type want to be created.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	recno - receipts number
**/

function getDeviceTableName(recno){
	
	var tablename = "device";
	
	var ocmlrec = new SCFile("ocmlrec", SCFILE_READONLY);
	var sql="receive.no=" + recno;	
	var devtype="";

	if(ocmlrec.doSelect(sql)===RC_SUCCESS){
		var fieldName=DENULL(ocmlrec.receiving_fields_name);
		var fieldValue=DENULL(ocmlrec.receiving_fields);
		
		
		if(fieldName!= null &amp;&amp; fieldName.length()&gt;0){

			for(var i=0; i&lt;fieldName.length(); i++){
				var fname=fieldName[i].replace(/\./g,"_");
				if(fname==="type"){
					if(fieldValue!== null &amp;&amp; fieldValue[i]!==null){
						devtype=fieldValue[i];
					}
					break;
				}
			}
		}
		
		if(devtype==null || devtype==""){
			var part = new SCFile("productCatalog", SCFILE_READONLY);
			var sql1 = "part.no=\""+ocmlrec.part_no+"\"";
			
			if(part.doSelect(sql1)===RC_SUCCESS){
				devtype=part.device_type;
			}
		}
		
		if(devtype!= null &amp;&amp; devtype != ""){
			var devt = new SCFile("devtype", SCFILE_READONLY);
			var sql2="device.type=\""+devtype+"\""
					
			if(devt.doSelect(sql2)===RC_SUCCESS){
				if(devt.joindef!=null || devt.joindef!=""){
					tablename=devt.joindef;
				}
			}
		}
		
		if(devtype == null || devtype==""){
			devtype="example";
		}
	}
	
	return {"tablename":tablename,"devtype":devtype};
}



/**
	* @fileOverview update current task output Additional Properties  which contain the CI to be update/create.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {Array} 	CIList - CI need to be add to my CI Additional Properties  
	* @param {record} 	record - task record
**/

function updateMyOutputCIList(record, CIList){
	var CIListOutput = getMyCIListTicketContextConfigName(record, "output");
	if(CIListOutput!=null){
		var tcc=new SCFile("ticketContextConfig");
		var tccsql="fileId=\""+record.parentTicket+"\" and fileName=\"request\" and type=\"configurationitem\" and id=\""+CIListOutput+"\"";
		if(tcc.doSelect(tccsql)===RC_SUCCESS){
			if(tcc.value!=null){
				var con = new SCDatum();
				var tempstr="";
				con.setType(8);
				
				for(var i=0; i&lt;CIList.length; i++){
					con.push(CIList[i]);
				}
				var tcca=tcc.value.split(",");
				for(var i=0; i&lt;tcca.length; i++){
					con.push(tcca[i]);
				}
				
				var con1=removeduplicate(con);
				for(var i=0; i&lt;con1.length(); i++){
					tempstr = tempstr + con1[i] +",";
				}
				
				tempstr = tempstr.substring(0, tempstr.length-1);
				tcc.value=tempstr;
			}else{
				var tempstr="";
				for(var i=0; i&lt;CIList.length; i++){
					tempstr = tempstr + CIList[i] +",";
				}
				tempstr = tempstr.substring(0, tempstr.length-1);
				tcc.value=tempstr;
			}
			tcc.doSave();
		}
	}
	return;
}

/**
	* @fileOverview Get CI list Additional Properties  name for current task.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	method - "Input" or "Output" 
	* @param {record} 	task - task record
**/

function getMyCIListTicketContextConfigName(task, method){
	var changeplan=new SCFile("changePlan");
	var sql="fileId=\""+task.parentTicket+"\" and fileName=\"request\"";
	
	if(changeplan.doSelect(sql)===RC_SUCCESS){
		var temptasks = changeplan.tasks;
		for(var s=0; s&lt;temptasks.length(); s++){
			if(task.number == temptasks[s].taskNumber){
				var mytask=temptasks[s];
				var inputORoutput=null;
				if(method=="input"){
					inputORoutput=mytask.inputs;
				}else if(method=="output"){
					inputORoutput=mytask.outputs;
				}
				
				if(inputORoutput!=null){
					var t=[];
					for(var i=0;i&lt;inputORoutput.length(); i++){
						eval("var type=inputORoutput[i]."+method+"Type");
						eval("var id=inputORoutput[i]."+method+"Id");
						
						if(type==="3"){
							t.push(id);
						}
					}
					
					var tcc=new SCFile("ticketContextConfig");
					var tccsql="fileId=\""+task.parentTicket+"\" and fileName=\"request\" and type=\"configurationitem\"";
					for(var i=0; i&lt;t.length; i++){
						var tsql=tccsql + " and id=\""+t[i]+"\"";
						if(tcc.doSelect(tsql)===RC_SUCCESS){
							return t[i];	
						}	
					}
				}
			}
		}	
	}
	return null;
}

/**
	* @fileOverview get stock number field name in modelconfig table.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	statusValue - status value 
**/
	
function getTargetStockNumberValue( statusValue ){
	if(statusValue == null){
		return STOCK_NUMBER_TYPE_RECEIVED;
	}
	
	var modelConfig = new SCFile("modelconfig", SCFILE_READONLY);
	var sql="unique.id=\"modelconfig\"";
	
	if(modelConfig.doSelect(sql) === RC_SUCCESS){
		
		
		var installed_status = modelConfig["installed.status"]
		var available_status = modelConfig["available.status"]
		var reserved_status = modelConfig["reserved.status"]
		var unavailable_status = modelConfig["unavailable.status"]
		
		for(var i=0; i&lt;installed_status.length(); i++){
			if(statusValue === installed_status[i]){
				return STOCK_NUMBER_TYPE_INSTALLED;
			}
		}
		
		for(var i=0; i&lt;available_status.length(); i++){
			if(statusValue === available_status[i]){
				return STOCK_NUMBER_TYPE_AVAILABLE;
			}
		}
		
		for(var i=0; i&lt;reserved_status.length(); i++){
			if(statusValue === reserved_status[i]){
				return STOCK_NUMBER_TYPE_RESERVED;
			}
		}
		
		for(var i=0; i&lt;unavailable_status.length(); i++){
			if(statusValue === unavailable_status[i]){
				return STOCK_NUMBER_TYPE_UNAVAILABLE;
			}
		}						
	}
	
	return null;
}

/**
	* @fileOverview Create CI.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	rec_no - receipt number 
	* @param {string} 	ci_name - CI name
	* @param {string} 	DeviceTypeAndTableName - structure to contain device table and device type
	* @param {string} 	location - location which CI belonged
	* @param {string} 	newValue - CI new value
	* @param {string} 	taskno - request task number
**/
	
function newCI(rec_no, ci_name, DeviceTypeAndTableName, location, newValue, taskno, requestno){

	var tablename=DeviceTypeAndTableName.tablename;
	var devtype=DeviceTypeAndTableName.devtype;
	var recelog=getReceipts(rec_no, tablename);	
	var ciinstance=new SCFile(tablename);
	
	for(var i=0; i&lt;recelog.length; i++){
		ciinstance[recelog[i].fieldname]=recelog[i].fieldvalue;		
	}	
	
	ciinstance.location=location;
	
	//FOR CR,122274,now the passed in ci_name is not used as logical name but the display name to create CI, the logical.name will be generated automatically.
	ciinstance.logical_name=lib.DisplayName.getRecordNumber("device");
	ciinstance.display_name=ci_name;
	ciinstance.istatus=newValue;
	ciinstance.type=devtype;
	
	
	ciinstance.order_line_item=taskno;
	ciinstance.order_number=requestno;
	
	var ret= ciinstance.doSave();
	
	if(ret == RC_SUCCESS){
		return ciinstance.logical_name;
	}
	return null;
}

/**
	* @fileOverview Update CI status.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	logical_name - CI logical name
	* @param {string} 	newValue - CI new value
	* @param {string} 	taskno - request task number
**/

function updateCI(logical_name, newValue, taskno){
	var dev=new SCFile("device");
	var sql="logical.name=\"" + logical_name +"\"";
	var ret="";
	
	if(dev.doSelect(sql)===RC_SUCCESS){
		dev.istatus=newValue;
		dev.quote_line_item=taskno;
		
		ret = dev.doSave();
	}
	
	if(ret == RC_SUCCESS){
		return true;
	}
	return false;	
}

/**
	* @fileOverview Update stock number.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	task - request task
	* @param {string} 	oldValue - CI old value
	* @param {string} 	newValue - CI new value
	* @param {string} 	logical_name - CI logical name
	* @param {string} 	amount - the CI number you have updated or created
**/

function updateMyStockNumber(task, logical_name, newValue, oldValue, amount)
{
	var location=null;
	var stock=null;
	var part_no=null;
	
	if(task.ship_to_code==null || task.ship_to_code==""){
		var ci = new SCFile("device", SCFILE_READONLY);
		ci.setFields(["location","part.no"]);
		var sql= "logical.name=\""+logical_name+"\"";
		if(ci.doSelect(sql)===RC_SUCCESS){
			location = ci.location;
			stock = lib.StockService.getStockforModelByStockRoom(location,ci.part_no);
			part_no = ci.part_no;
		}
	}else{
		location =  lib.StockService.getLocationbyFullname(task.ship_to_code);  	
		stock = lib.StockService.getStockforModelByStockRoom(location,task.part_no);
		part_no = task.part_no;
	}
	
	var stock_number_type_old=0
	var stock_number_type_new=0;	

	stock_number_type_old = getTargetStockNumberValue(oldValue);
	stock_number_type_new = getTargetStockNumberValue(newValue); 	
	if(stock_number_type_old!= null &amp;&amp; stock_number_type_new!= null){
		lib.StockService.stockChange(stock,  amount, stock_number_type_new);
		lib.StockService.stockChange(stock, -amount, stock_number_type_old);		
	}
	
}

/**
	* @fileOverview save CI create/update history.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	taskid - request task number
	* @param {string} 	logical_name - CI logical name
	* @param {string} 	oldValue - CI old value
	* @param {string} 	newValue - CI old value
	* @param {string} 	is_done - CI operation is finished(create or update)
	* @param {string} 	rec_no - receipt number
**/
function SaveUpdateHistory(taskid, logical_name, oldValue, newValue, is_done, rec_no )
{
	var CIDataModeNew = new SCFile("requestTaskCIModEvent");
	
	CIDataModeNew.fileId=taskid;
	CIDataModeNew.logical_name=logical_name;
	CIDataModeNew.fieldName="status";
	CIDataModeNew.oldValue=oldValue;
	CIDataModeNew.newValue=newValue;
	CIDataModeNew.operation_time=TOD();
	CIDataModeNew.is_done=is_done;
			
	CIDataModeNew.rec_no=rec_no;
	CIDataModeNew.doInsert();
}

/**
	* @fileOverview get CMDB update schedule instance
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	requestTaskNo - request task number
**/

function GetCMDBUpdateSchedule(requestTaskNo)
{
	var schedulename = SCMSG("24", "requestTask", [requestTaskNo]);
	
	var schedule = new SCFile("schedule");
	var sql="name=\""+schedulename+"\"";
	
	if(schedule.doSelect(sql)===RC_SUCCESS){
		return schedule;
	}else{
		return null;	
	}
}
/**
	* @fileOverview To check the CMDB Update schedule is generated or not.
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	requestTaskNo - request task number
**/


function CMDBUpdateISScheduled(requestTaskNo)
{
	var sch=GetCMDBUpdateSchedule(requestTaskNo);
	
	if(sch!== null){
		return {"scheduled":true,"msg":SCMSG("23", "requestTask", [sch["schedule.id"]])};
	}else{
		return {"scheduled":false,"msg":""};	
	}
}
/**
	* @fileOverview To check the CMDB Update schedule is expired or not
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	TaskRecord - request task instance
**/


function ScheduleISExpired(TaskRecord)
{
	if(TaskRecord["current.phase"] === "CMDB Update"){
		if(TaskRecord["cmdb.update.has.done"]=== true){
			return true;
		}
					
		var sch=GetCMDBUpdateSchedule(TaskRecord.number);
		
		if(sch === null){
			return true;
		}else{
			var now=VAL(TOD(),1);
			var schedule_exp=VAL(sch["expiration"],1);
			
			if((now - schedule_exp) &lt;MAX_SCHEDULE_WAITING_TIME){
				return false;
			}else{
				return true;
			}
		}
	}
	
	return true;

}
function GetRunningMode(requestTask)
{
	var len1 = trimArray(requestTask.CIListContext).length();
	var len2 = trimArray(requestTask.CIListCMDB).length();

	
	if((len1 + len2) &gt; 50){
		return false;
	}else{
		return true;
	}
}

/**
	* @fileOverview To generate the CMDB Update schedule record for current task
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	requestTaskNo - request task number
**/

function ScheduleActionCMDBUpdate( requestTask )
{
	if(requestTask.doAction("save") ){
		
		/*SYNC*/
		if(GetRunningMode(requestTask)){
			print(SCMSG("26", "requestTask"));
			//print("Submit CMDB/Update CMDB by SYNC MODE");
		
			lib.RequestTaskService.actionCMDBUpdate(requestTask["number"]);	
			return true;
				
		/*ASYNC*/
		}else{
			print(SCMSG("27", "requestTask"));
			//print("Submit CMDB/Update CMDB by ASYNC MODE");
			var requestTaskNo=requestTask["number"];
			var schedule = new SCFile("schedule");
			var schedulename = SCMSG("24", "requestTask", [requestTaskNo]);
		
			schedule._class = "linker";
			var time = new Date();
			var sched = new Date(time.getTime());
			schedule.expiration = sched;
		  	
			schedule.name = "CMDB Update background operation process: " + requestTaskNo;
		  	
			var JSStr = "lib.RequestTaskService.actionCMDBUpdate(\""+requestTaskNo+"\");";
			schedule.javascript=JSStr;
		  	
			if ( schedule.doSave() == RC_SUCCESS){
				var msg= SCMSG("25", "requestTask", [schedule["schedule.id"]]);
				print(msg);
				return true;
			}
			
		}
	}
		
	return false; 
}

/**
	* @fileOverview schedule called this function to generate this function to perform the CMDB update action
 	* @author xunw@hp.com
 	* @date May, 2014	
	* @param {string} 	requestTaskNo - request task number
**/


function actionCMDBUpdate(requestTaskNO)
{
	var requestTask=new SCFile("requestTask");
	var sql="number=\""+requestTaskNO+"\"";
	var amount = 0;	
	var CIList=[];
	
	if(requestTask.doSelect(sql)===RC_SUCCESS){
		var len1 = trimArray(requestTask.CIListContext).length();
		var len2 = trimArray(requestTask.CIListCMDB).length();
		
		if(	(len1 + len2)&gt; 0 ){
			var action=getAction(requestTask);	
			var oldValue=getOldStatusValue(requestTask);
			var newValue=getNewStatusValue(requestTask);
			
			if(action==="create"){	
				var deviceTypeAndTablename = getDeviceTableName(requestTask.CIReciptNo[0]);
				var location=lib.StockService.getLocationbyFullname(requestTask.ship_to_code);			
				var arrlen = requestTask.CIListContext.length();
				
				for(var i=0; i&lt;arrlen; i++){	
					var retLogicalName = newCI(requestTask.CIReciptNo[i], requestTask.CIListContext[i], deviceTypeAndTablename, location, newValue, requestTaskNO, requestTask.parentTicket);
					if(retLogicalName){
						requestTask.CIListContext[i]=retLogicalName;//For CR122274,logical.name is generated and returned after CI added.
						var ciDisplayName = lib.DisplayName.getDisplayNameById("device",requestTask.CIListContext[i]); 
						var msg = SCMSG("addci", "requestTask", [ciDisplayName]);
						print(msg);
						amount++;
						CIList.push(requestTask.CIListContext[i]);
					}
					SaveUpdateHistory(requestTaskNO, requestTask.CIListContext[i], oldValue, newValue, retLogicalName!=null, requestTask.CIReciptNo[i]);
				}
			}else{
				var tempCIList = MergeArray(trimArray(requestTask.CIListContext), trimArray(requestTask.CIListCMDB));
				var arrlen = tempCIList.length();
				for(var i=0; i&lt;arrlen; i++){	
					var ret=updateCI(tempCIList[i], newValue, requestTaskNO);
					if(ret){
						var ciDisplayName = lib.DisplayName.getDisplayNameById("device",tempCIList[i]); 
						var msg = SCMSG("updateci", "requestTask", [ciDisplayName]);
//						var msg = SCMSG("updateci", "requestTask", [tempCIList[i]]);
						print(msg);
						amount++;
						CIList.push(tempCIList[i]);
					}
					SaveUpdateHistory(requestTaskNO, tempCIList[i], oldValue, newValue, ret, null);	
				}
			}
			
			updateMyStockNumber(requestTask, requestTask.CIListContext[0],newValue, oldValue, amount);	
			updateMyOutputCIList(requestTask, CIList);
			requestTask.cmdb_update_has_done=true;
			requestTask.doSave();	
		}else{
			requestTask.cmdb_update_has_done=true;
			requestTask.doSave();							
		}
	}

	return;
	
}

function getMyParentSvcCartID(record){
	var parentTicket=record.parentTicket;
	var sql="number=\""+parentTicket+"\"";
	var req=new SCFile("request", SCFILE_READONLY);
	req.setFields("svcCartId");
	
	if(req.doSelect(sql)===RC_SUCCESS){
		 record.parent_svcCartId=req.svcCartId;
	}
	return;
}

function validateAssignmentGroup( record )
{
   var Assignmentfile=new SCFile("assignment");
   var sql="true";
   if(record.assigned_group!=null){
     sql=sql+" and name=\""+record.assigned_group+"\""   
   }
   if(vars.$G_multi==true &amp;&amp; record.company!= null){
      sql=sql+" and company=\""+record.company+"\"";
   }
   if (Assignmentfile.doSelect(sql)!==RC_SUCCESS) {
	  return false;
   }else{
		if(Assignmentfile.name===null){
			return false;
		}
		return true;
	}
}

/**
	* @fileOverview Get the location list from stockroom table.
 	* @author xiaoning.li@hp.com
 	* @date Oct, 2014	
	* @return The array of all locations defined in each record of stockroom table. 
**/
function getsupportlocationlist()
{
    var _denull=system.functions.denull;
	var file = new SCFile("stockroom",SCFILE_READONLY);
	file.setFields("location");
	var query=true;	
	var supportlocationlist = [];
	var rc = file.doSelect(query);
	while(rc==RC_SUCCESS) {
	  var length=_denull(file.location).length();
	  for(i=0; i&lt;length; i++) {
	  supportlocationlist.push(file.location[i]);
	  }
      rc=file.getNext();  
    }
    return supportlocationlist; 
 }

</script>
    <package type="string">RequestManagement</package>
    <sysmodtime type="dateTime">04/27/19 15:32:11</sysmodtime>
    <sysmoduser type="string">zhuwenying</sysmoduser>
    <sysmodcount type="decimal">13</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
