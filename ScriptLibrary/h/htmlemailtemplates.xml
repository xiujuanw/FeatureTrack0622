<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;htmlemailtemplates&quot;" recordid="htmlemailtemplates">
    <name type="string">htmlemailtemplates</name>
    <script type="string">var $ = lib.c.$;
var _ = lib.Underscore.require();
var log = getLog("HTML Templates");
//log.setLevel("debug");

var sys_lang = getSysLang();

/**
 * Parses the template header and returns an HTML String
 * &lt;br&gt;
 * History:&lt;br&gt;
 * 20090126 - Tom Hauri, HP - Change / Requirement: N/A Description: Function created&lt;br&gt;
 * Contains code from Outlance GmbH - www.outlance.de - Lars Detmers, Dejan Djurovski
 *
 * @date	20090126
 * @param   {String} templateName
 * @param   {File} Record
 * @param   {File} Record Old (if available, otherwise same as Record)
 * @param   {String} Email Recipient (used to determine language)
 * @param   {String} Language (used to override recipient language, optional)
 *
 * @returns	{String} HTML Code with values
 */
function getTemplate(templateName, $RECORD, $RECORDOLD, recipient, lang, templateField, removeToken) {

	var logMsgStep="getTemplate";
	var content = "";
	
	if (log.isDebugEnabled()) {
	    log.debug(logMsgStep + ";Start: " + (recipient != null ? recipient : "no recipient"));
	}

    function parseTemplate(content, data) {

        content=String(content);
        var re = /\{[a-zA-Z_|., $\[\]0-9]{0,}\}/gi;
        
        return (
            content.replace(
                re,
                function ($1,$2,$3) {
                    var tag_content = $1.substr(1, $1.length-2);
                    var splitparameters = tag_content.split(',');
                    splitparameters[0] = trimString(splitparameters[0]);
                    var splitarray = splitparameters[0].split('.');
                    var variable;
                    if ( typeof splitarray[1] != "undefined" ) {
                        variable = 'lib.StringUtil.escapeStringforXML(data[\''+splitarray[0]+'\'].' + splitarray[1] + ')';
                    } else {
                        variable = splitarray[0];
                    }

                    var splitmodifiers = variable.split("|");
					var str="";
                    if( typeof splitmodifiers[1] != "undefined" &amp;&amp; splitmodifiers[1] == 'formatdate' ) {
                        str=( formatJSDateTime(eval(splitmodifiers[0])) );
                    } else {
                        var tmp = null;
                        try {
                            tmp = eval(variable);
                        }
                        catch (ex) {
                            tmp = funcs.scmsg("Error", "global") + ": " + ex.message;
                            log.error(logMsgStep + ';Template record "' + templateName + '" contains invalid code: ' + ex.message);
                        }
                        
                        if ( tmp == null ) {
                            str= '';
                        } else if ( typeof splitparameters[1] != "undefined" ) {
                            splitparameters[1] = trimString(splitparameters[1]);
                            str=( eval( variable + '.substr(0, ' + splitparameters[1] + ' )' ) );
                            //str = lib.StringUtil.escapeStringforXML(str);
                        } else 	{
                        	if (funcs.type(tmp) == 8){
                                str = tmp.join('##br/##');
                                if (str) {
    	                            str = lib.StringUtil.escapeStringforXML(str);
    	                            str = str.replace(/##br\/##/g, '&lt;br/&gt;');
                                } else {
                              	    str = '';
                                }                        
                            }else if(funcs.type(tmp) == 3){
                                str = formatJSDateTime(tmp);
                            }else{
                                //str=lib.StringUtil.escapeStringforXML(tmp);
    							str = tmp;
                            }
                        } // end if typeof
                    }
                    
                    if (str == null) {
                       str = '';
                    }
                    
                    return str;
                } // end function
            )
        );
    }

    // added by Ryan
    if (!lang)
    {
        try{
			if(recipient){
				lang = lib.NotificationRecipientsHelp.determinLang(recipient);
        	}else{
				lang = vars.$L_mailLang || determinLang();
			}

        } catch (e) {
            log.error(logMsgStep + ';Language determination: Tempalte record "' + templateName + '" contains invalid code');
            lang = sys_lang;
        }
    }
    
    /*
	var htmlTemplate = $.cachedSelect("htmltemplates", "name=\""+templateName + "\" and language=\"" + lang + "\" and active=true");
	if (htmlTemplate == null &amp;&amp; lang != sys_lang) {
		htmlTemplate = $.cachedSelect("htmltemplates", "name=\""+templateName + "\" and language=\"" + sys_lang + "\" and active=true");
	}
        if (htmlTemplate == null) {
		htmlTemplate = $.cachedSelect("htmltemplates", "name=\""+templateName + "\" and language=\"en\" and active=true");
	}
    */
    
    //Optimize performance start added by Henrry 06/23/2015
    var htmlTemplate = new SCFile('htmltemplates', SCFILE_READONLY);
    var res = htmlTemplate.doSelect("name=\""+templateName + "\" and language=\"" + lang + "\"");
    if(res == RC_SUCCESS &amp;&amp; htmlTemplate.active != true){
        res = RC_ERROR;
    }
    if (res != RC_SUCCESS &amp;&amp; lang != sys_lang) {
        res = htmlTemplate.doSelect("name=\""+templateName + "\" and language=\"" + sys_lang + "\"");
        if(res == RC_SUCCESS &amp;&amp; htmlTemplate.active != true){
            res = RC_ERROR;
        }
    }
    if (res != RC_SUCCESS) {
         res = htmlTemplate.doSelect("name=\""+templateName + "\" and language=\"en\"");
         if(res == RC_SUCCESS &amp;&amp; htmlTemplate.active != true){
             res = RC_ERROR;
         }
    }
    if (res == RC_SUCCESS) {
     //end
    //if (htmlTemplate != null) {

		try {
			vars.$L_mailLang = htmlTemplate.language;
            var javascript_expression = htmlTemplate.expression;
			var data = {};
		   	data['$RECORD'] = $RECORD;			
            data['$RECORDOLD'] = $RECORDOLD;
			eval(javascript_expression);
			if(templateField=="subject") {
                content = _.unescape(parseTemplate(htmlTemplate.mail_title, data));
				vars.$L_mailLang = null;
                //added by Ryan
            }
			else {
		        content = lib.MailService.convertActionString2HTML(htmlTemplate.htmlcode, $RECORD, recipient, !!!removeToken);
		        content = "&lt;html&gt;" + parseTemplate(content, data) + "&lt;/html&gt;";
		    }
		    content = parseXMLString(content);
		    
		    if (log.isDebugEnabled()) {
		        log.debug(logMsgStep + ";" + htmlTemplate.mail_title);
                log.debug(logMsgStep + ";" + htmlTemplate.htmlcode);
                log.debug(logMsgStep + ";" + htmlTemplate.content);
			}

			return content;
		} catch (ex) {
		    log.error(logMsgStep + ';Template record "' + templateName + '" contains invalid code: ' + ex);
			return null;
		} // end try

	} else 	{
		if (log.isDebugEnabled()) {
			log.debug(logMsgStep + ";Template " + templateName +" could not be found.");
		}
	} // end if template
	
	return null;
}


function getMailBody(templateName, $RECORD, $RECORDOLD, recipient, lang, removeToken) {

	var logMsgStep="formatMailBody";
    if (log.isDebugEnabled()) {
        log.debug(logMsgStep + ";Start " + templateName + " mail for " + recipient);
	}
	
	return getTemplate(templateName, $RECORD, $RECORDOLD, recipient, lang, "body", removeToken);
}


/**
 *  Parses the template header and returns an HTML String
 *  May add the htmltemplate name suffix
 */
function getMailHeader(templateName, $RECORD, $RECORDOLD, recipient, lang) {
    var subject = getPureMailHeader(templateName, $RECORD, $RECORDOLD, recipient, lang);
    var append = appendHtmltemplateName(templateName, subject != null);
    if (append.length == 0) {
        return subject;
    } else {
        subject = subject == null ? "" : subject;
        return subject + append;
    }
}

/**
 * Parses the template header and returns an HTML String
 * &lt;br&gt;
 * History:&lt;br&gt;
 * 20090126 - Tom Hauri, HP - Change / Requirement: N/A Description: Function created&lt;br&gt;
 * Contains code from Outlance GmbH - www.outlance.de - Lars Detmers, Dejan Djurovski
 *
 * @date	20090126
 * @param   {String} templateName
 * @param   {File} Record
 * @param   {File} Record Old (if available, otherwise same as Record)
 * @param   {String} Email Recipient (used to determine language)
 * @param   {String} Language (used to override recipient language, optional)
 * @returns	{String} HTML Code with values
 *
 */
function getPureMailHeader(templateName, $RECORD, $RECORDOLD, recipient, lang) {
	var logMsgStep="getMailHeader";
	if (log.isDebugEnabled()) {
	    log.debug(logMsgStep + ";Start: " + (recipient != null ? recipient : "no recipient"));
	    log.debug(logMsgStep + ";record: " + $RECORD);
	    log.debug(logMsgStep + ";RECORDOLD: " + $RECORDOLD);
	}

	return getTemplate(templateName, $RECORD, $RECORDOLD, recipient, lang, "subject");
}

/**
 * Generates the PreView of an HTML EMail
 * &lt;br&gt;
 * History:&lt;br&gt;
 * 20090126 - Tom Hauri, HP - Change / Requirement: N/A Description: Function created&lt;br&gt;
 *
 * @date	20090126
 * @param   {String} String
 * @returns	{String} HTML Code with values
 *
 */
function getPreview(tablename) {
    if (tablename) {
		var targetKeys = lib.tableFunctions.getUniqueKey(tablename);
		if (targetKeys) {
			var query = targetKeys[0] + "=\"" + vars.$L_file.test_record + "\"";
			var HTMLString = "";
			if (query) {
				var fRecord = new SCFile(tablename);
				var rc = fRecord.doSelect(query);
				if ( rc == RC_SUCCESS ) {
					if (vars.$L_file.type == "mail") {
						HTMLString += "&lt;b&gt;Mail Header:&lt;/b&gt; " + getPureMailHeader(vars.$L_file.name, fRecord, fRecord, funcs.operator(), vars.$L_file.language) + "&lt;br&gt;&lt;br&gt;";
					}
					var body = getMailBody(vars.$L_file.name, fRecord, fRecord, funcs.operator(), vars.$L_file.language, true);
					if (body != null) {
						HTMLString += body;
					}
					
					return HTMLString;
				}
			} // if query
		} // if targetkey
	} // if tablename
	return funcs.scmsg(4, "HTMLTemplate" ); 
}

/**
 *  Return htmltemplates tag seperator
 */
function getHtmltemplateTagSeperator() {
    return "&lt;@@@htmltemplates@@@&gt;";
}

/**
 *  Return the special tag for inactive htmltemplates
 */
function getHtmltemplateInactiveTag() {
    return "@@@Inactive@@@";
}

/**
 *  Return the htmltemplates tag
 *  Parameter active
 *      false: template is inactive and provide the special inactive template tag
 */
function appendHtmltemplateName(templateName, active) {
    if (templateName != null &amp;&amp; templateName.length &gt; 0) {
        var tag = getHtmltemplateTagSeperator();
        if (active == false) {
            templateName = getHtmltemplateInactiveTag();
        }
        return tag + templateName + tag;
    }
    
    return "";
}

/**
 *  Check if the htmltemplates is active
 *  Return true when the template is active
 *  Return false when the template doesn't exist or is not active
 */
function getTemplateActive(templateName) {
    if (templateName == null) {
        return false;
    }
    
    var template = new SCFile("htmltemplates", SCFILE_READONLY);
    template.setFields(["active"]);
    var query = "name=\"" + templateName + "\"";
    var rc = template.doSelect(query);
    if (rc == RC_SUCCESS &amp;&amp; template["active"] == true) {
        return true;
    }
    
    return false;
}

/**
 *  Return the append string of htmltemplates name
 *  Parameter ignoreInactive: when the template doesn't exist or is not active, return inactive tag or not
 *      true:  return empty string
 *      false: return inactive tag
 *      null: equals to false
 *  When the template exists and is active, always return the htmltemplates name tag
 */
function checkAndAppendHtmltemplateName(templateName, ignoreInactive) {
    if (ignoreInactive == null) {
        ignoreInactive = false;
    }
    
    var active = getTemplateActive(templateName);
    if (!active &amp;&amp; ignoreInactive) {
        return "";
    }
    
    return appendHtmltemplateName(templateName, active);
}

/**
 *  Parse the subject with htmltemplates name suffix
 *  Return one array:
 *     [pure subject, htmltemplates name]
 *  If the subject doesn't have htmltemplates name suffix, returned array is:
 *     [subject, null]
 */
function parseSubjectHtmltemplates(subject) {
    if (subject == null) {
        return [subject, null];
    }
    
    var templateName = null;
    var subj = "";
    var tag = getHtmltemplateTagSeperator();
    var result = subject.split(tag);
    if (result != null &amp;&amp; result.length &gt; 0) {
        subj = result[0];
        
        if (result.length &gt; 1) {
            templateName = result[1];
        }
        
        if (result.length &gt; 2) {
            subj += result[2];
        }
    }
    
    return [subj, templateName];
}


/**
 *  Trim the appended htmltemplates names tag to get the pure subject
 */
function getSubjectTrimmedHtmltemplates(subject) {
    var result = parseSubjectHtmltemplates(subject);
    if (result != null &amp;&amp; result.length &gt; 0) {
        subject = result[0];
    }
    
    return subject;
}

/**
 *  The rule of CID of email inline attachment is &lt;uid&gt;
 */
function getInlineAttachmentCID(filename, uid) {
    //return filename + "_" + uid;
    return uid;
}

/**
 *  Replace the url in html email for the inline attachment
 *  The parameter content is the string of the html email body content
 *  The parameter templateName is the name of htmltemplates
 */
function replaceMailBodyHtmltemplateInlineImage(content, templateName) {
    return replaceMailBodyInlineImage(content, ["htmltemplates"], [templateName]);
}

/**
 *  Replace the url in html email for the inline attachment
 *  The parameter content is the string of the html email body content
 *  The parameter applications is the array of the value of the field application in SYSATTACHMENTS
 *  The parameter topics is the array of the value of the field topic in SYSATTACHMENTS
 *  The length of applications and topics should be equal.
 */
function replaceMailBodyInlineImage(content, applications, topics) {
    var images = [];
    var result = [];
    
    if (applications != null &amp;&amp; topics != null &amp;&amp; applications.length == topics.length &amp;&amp; applications.length &gt; 0) {
        var appl_topics = [];
        var connector = "==&gt;";
        var i;
        var lng = applications.length;
        for (i=0; i&lt;lng; i++) {
            appl_topics.push(applications[i] + connector + topics[i]);
        }
        
        // example: &lt;img height="100" alt="image text" width="100" src="scattach://&lt;uid&gt;:&lt;filename&gt;:htmltemplates:&lt;htmltemplates name&gt;" /&gt;
        var re = /(&lt;img [^&lt;&gt;]+ src=\")(scattach:\/\/)([^\"]+)(\"[^&lt;&gt;]*\/&gt;)/gi;
        content = content.replace(re, 
                          function ($1, $2, $3, $4, $5) {
                              var imgid = "unknown";
                              // $4 - &lt;uid&gt;:&lt;filename&gt;:htmltemplates:&lt;htmltemplates name&gt;
                              // After splite, 0 - uid; 1 - filename; 2 - applicaiton; 3 - topic 
                              var attach = $4.split(":");
                              if (attach != null &amp;&amp; attach.length == 4 &amp;&amp; lib.ArrayUtil.contains(appl_topics, attach[2] + connector + attach[3])) {
                                  imgid = getInlineAttachmentCID(attach[1], attach[0]);
                                  images.push(attach[0]);
                              }
                              return $2 + "cid:" + imgid + $5;
                          });
    }
    
    result[0] = content;
    result[1] = images;
       
    return result;
}

/**
 * Trims a String from leading and trailing spaces
 * &lt;br&gt;
 * History:&lt;br&gt;
 * 20090126 - Tom Hauri, HP - Change / Requirement: N/A Description: Function created&lt;br&gt;
 *
 * @date	20090126
 * @param   {String} String
 * @return	{String} String
 *
 */
function trimString(str) {
      str = str.replace('/^[ ]+(.*)$/', str); // Trims leading spaces
      str = str.replace('/^(.*)[ ]+$/', str); // Trims trailing spaces
      return str;
}

/**
 * Returns SC DateTime String
 * &lt;br&gt;
 * History:&lt;br&gt;
 * 20090126 - Tom Hauri, HP - Change / Requirement: N/A Description: Function created&lt;br&gt;
 *
 * @date	20090126
 * @param   {Date} JS Date
 * @return	{String} SCDateTimeString
 *
 */
function formatJSDateTime(date) {
   var retVal = "";
   if (date!=null) {
   		var myDate = new XMLDate( date );
		retVal = myDate.getSCDateTimeString();
		return retVal;
   }
   return retVal;
}


function determinLang() {

    var logMsgStep="determine_language";

    var lang = "";
    var lang_temp = [];
    var temp = "";
    var operator = funcs.operator();

    //determine if it is called from notification engine
    if(vars.$L_notification)
    {
        var userList = getUserList();
        
        if (log.isDebugEnabled()) {
            log.debug(logMsgStep + ";userList -- " + userList);
        }

        //parse language
        if( typeof userList == "string") {
        	lang = getLang(userList);
        }
        else{
        	userList = _.uniq(userList);
        	var i;
        	for (i = 0; i &lt; userList.length; i++) {
        	    var user = userList(i); 
                if( user == operator )  {
                	continue;
                }
                temp = getLang(user);
                if (lang_temp.indexOf(temp) &gt;= 0) {
                	continue;
                }
                lang_temp.push(temp);
                
                // multiple languages found
                if (lang_temp.length &gt; 1) {
                    break;
                }
            }

            lang = ( lang_temp.length == 1 ) ? lang_temp[0] : sys_lang;
        }

        if (log.isDebugEnabled()) {
            log.debug(logMsgStep + ";language is " + lang);
        }

        vars.$L_mailLang = lang;
    }
    else 
    {
    	lang = getLang( operator );
    }

    return lang;
}


function getSysLang()
{
    var sysInfo = new SCFile("info", SCFILE_READONLY);
    sysInfo.setFields(["syslanguage"]);
    var sql = 'type="company" and format="info.company"';

    if( sysInfo.doSelect(sql) == RC_SUCCESS )
    {
        return sysInfo.syslanguage;
    }
    else 
    {
    	return "en";
	}
}

function getUserList()
{
    var logMsgStep="getUserList";

    var userList = [];

    //evaluate recipient field
    var index = vars.$L_i;
    var message = new SCDatum();
    message.setType(9);
    message = vars.$L_notification.message[index-1];
    
    //initialize vars
    var str_recipients = funcs.nullsub(funcs.str(message[2]),"");
    
    if (log.isDebugEnabled()) {
        log.debug(logMsgStep + ";str_recipients is " + str_recipients);
    }
    
    var users = "";
    var userSql = "";
    
    //evaluate recipient field
    users = vars.$L_users; //users is defined in process.msg panel of us.nofity rad , it's workaround to fix issue QCCR1E94254
    
    if (log.isDebugEnabled()) {
        log.debug(logMsgStep + ";users is " + users);
    }

    if (users == null)
    {
    	return userList;
    }
    
    //generate user sql
    userSql = ( funcs.type(users) == 2 ) ? "name isin {\"" + users + "\"}" : "name isin " + funcs.str(users);

    //generate user list
    userList = ( funcs.type(users) == 2 ) ? users : users.toArray();

    //determine whether it`s a group or not
    if(!funcs._null(message[5]))
    {
        var groupFile = message[5];
        var groupArea = message[7];
        var subGroup = message[8];
        var groupUsers = [];
        var emptyArray = new SCDatum();
        emptyArray.setType(8);
        var groupUsersDatum = new SCDatum();
        groupUsersDatum.setType(8);
		var groupUsersDatum2 = new SCDatum();
        groupUsersDatum2.setType(8);

        if( ("cm3groups, ocmgroups".indexOf(groupFile) != -1) &amp;&amp; ("c, t, q, o, l".indexOf(groupArea) != -1) )
        {
            userSql = userSql + " and area=\"" + groupArea + "\"";
        }

        //extract operators
        var groupRecord = new SCFile(groupFile, SCFILE_READONLY);
        if( groupRecord.doSelect(userSql) == RC_SUCCESS )
        {
            do{
                if( ("cm3groups, ocmgroups".indexOf(groupFile) != -1) &amp;&amp; (subGroup == "approvers") )
                {
                    groupUsersDatum = funcs.nullsub(funcs.denull(groupRecord.approvers),emptyArray);
                    groupUsers = (groupUsersDatum.toArray())?groupUsers.concat(groupUsersDatum.toArray()) : groupUsers;
                }

                if( ("cm3groups, ocmgroups".indexOf(groupFile) != -1) &amp;&amp; (subGroup == "members") )
                {
                    groupUsersDatum = funcs.nullsub(funcs.denull(groupRecord.members),emptyArray);
                    groupUsers = (groupUsersDatum.toArray())?groupUsers.concat(groupUsersDatum.toArray()) : groupUsers;
                }
				
				if( ("cm3groups, ocmgroups".indexOf(groupFile) != -1) &amp;&amp; (funcs.nullsub(subGroup,"all") == "all") )
				{
					groupUsersDatum = funcs.nullsub(funcs.denull(groupRecord.approvers),emptyArray);
					groupUsersDatum2 = funcs.nullsub(funcs.denull(groupRecord.members),emptyArray);
                    groupUsers = (groupUsersDatum.toArray())?groupUsers.concat(groupUsersDatum.toArray()) : groupUsers;
					groupUsers = (groupUsersDatum2.toArray())?groupUsers.concat(groupUsersDatum2.toArray()) : groupUsers;
				}
				
                if( groupFile == "assignment" )
                {
                    groupUsersDatum = funcs.nullsub(funcs.denull(groupRecord.operators),emptyArray);
                    groupUsers = (groupUsersDatum.toArray())?groupUsers.concat(groupUsersDatum.toArray()) : groupUsers;
                }

            }while( groupRecord.getNext() == RC_SUCCESS );

            // set user list, remove redundant user name
            user_list = _.uniq(groupUsers);
        }
    }
    
    return userList;
}


function getLang(user) {

    var operator_sql = "name=\"" + user + "\"";
    var contact_sql  = "contact.name=\"" + user + "\"";
    
    /**QCCR1E101238, SM934, dengxin
	 **add readonly for doselect, and add the selected fields
	 **apply for operator, contact
	 */

    var contact = new SCFile("contacts", SCFILE_READONLY);
    var operator = new SCFile("operator", SCFILE_READONLY);
    contact.setFields(["language","operator.id"]);
    operator.setFields(["syslanguage","contact.name"]);

    if( contact.doSelect(contact_sql) == RC_SUCCESS )
    {
        if( !funcs._null(contact.language) ) 
        {
        	return contact.language;
        }
        else if( operator.doSelect( "name=\"" + contact.operator_id + "\"" ) == RC_SUCCESS )
        {
            if( !funcs._null(operator.syslanguage) ) 
            {
            	return operator.syslanguage;
            }
            else 
            {
            	return sys_lang;
            }
        }
    }

    if( operator.doSelect(operator_sql) == RC_SUCCESS )
    {
        if( !funcs._null(operator.syslanguage) ) 
        {
        	return operator.syslanguage;
        }
        else if( contact.doSelect( "contact.name=\"" + operator.contact_name + "\"" ) == RC_SUCCESS )
        {
            if( !funcs._null(contact.language) ) 
            {
            	return contact.language;
            }
            else 
            {
            	return sys_lang;
            }
        }
    }

    return sys_lang;
}


/**
 * Parse content, convert XML symbol
 * 
 * @param {String} content
 * @returns {String}
 */
function parseXMLString(content) {
	if (content == null) {
		return null;
	}
	
	var string = content;
	
	var regExp = /&amp;apos;/g;
	string = string.replace(regExp, "'");
	
	return string;
}


/**
 * Get localized global scmessage
 *
 * @param {Number} value
 * @param {Array} values
 * @param {Array} msgIds
 * @returns {String}
 */
function getGlobalScmessage(value, values, msgIds) {
	if (value == null) {
		return "";
	}
	
	var message = String(value);
	
	var index = lib.ArrayUtil.indexOf(values, value);
	if (index == -1) {
		return message;
	}

	var msgId = msgIds[index];

	var lang = vars.$L_mailLang || sys_lang;
	var query = "syslanguage=\"" + lang + "\" and class=\"global\" and message.id=\"" + msgId + "\""; 

	var scmessage = $("scmessage", SCFILE_READONLY).select(query).uniqueResult();
	if (scmessage) {
		message = scmessage.message;
	}
	else if (lang != "en") {
		// query en scmessage
		query = "syslanguage=\"en\" and class=\"global\" and message.id=\"" + msgId + "\"";
		scmessage = $("scmessage", SCFILE_READONLY).select(query).uniqueResult();
		if (scmessage) {
			message = scmessage.message;
		}
	}

	return message;
}

/**
 * Get localized global scmessage by checking globallist
 *
 * @param {Number/String} value
 * @param {String} glname
 * @returns {String}
 */
function getGlobalScmessageByGloballist(value, glname) {
    var values = [];
    var msgIds = [];
    var query = "name=\"" + glname + "\"";
    var gl = $("globallists", SCFILE_READONLY).select(query).uniqueResult();
    if (gl != null) {
        values = funcs.val(gl["value.list"], 8);
        msgIds = funcs.val(gl["display.list"], 8);
    }
    
    return getGlobalScmessage(value, values, msgIds);
}

/**
 * Get impact localized string, see globallist "Initial Impact"
 *
 * @param {Number} value
 * @returns {String}
 */
function getImpactString(value) {
	var values = [1,2,3,4];
	var msgIds = ["21","22","23","24"];
	return getGlobalScmessage(value, values, msgIds);
}


/**
 * Get priority localized string, see globallist "Calculated Priority"
 *
 * @param {Number} value
 * @returns {String}
 */
function getPriorityString(value) {
	var values = [1,2,3,4];
	var msgIds = ["10","12","13","14"];
	return getGlobalScmessage(value, values, msgIds);
}


/**
 * Get severity localized string, see globallist "Urgency"
 *
 * @param {Number} value
 * @returns {String}
 */
function getSeverityString(value) {
	var values = [1,2,3,4];
	var msgIds = ["10","12","13","14"];
	return getGlobalScmessage(value, values, msgIds);
}


/**
 * Get risk localized string, see globallist "Impact"
 *
 * @param {Number} value
 * @returns {String}
 */
function getRiskString(value) {
	var values = [0,1,2,3,4,5];
	var msgIds = ["0 - No Risk","1 - Low Risk","2 - Some Risk","3 - Moderate Risk","4 - High Risk","5 - Very High Risk"];
	return getGlobalScmessage(value, values, msgIds);
}

/**
 * Get Incident Task Completion Code localized string, see globallist "Incident Task Completion Codes"
 */
function getIncidentTaskCompletionCodeString(value) {
    return getGlobalScmessageByGloballist(value, "Incident Task Completion Codes");
}

/**
 * Get Incident Closure Code localized string, see globallist "Incident Closure Codes"
 */
function getIncidentClosureCodeString(value) {
    return getGlobalScmessageByGloballist(value, "Incident Closure Codes");
}

/**
 * Get Problem Closure Code localized string, see globallist "Problem Closure Codes"
 */
function getProblemClosureCodeString(value) {
    return getGlobalScmessageByGloballist(value, "Problem Closure Codes");
}

/**
 * Get Problem Task Closure Code localized string, see globallist "Problem Task Closure Codes"
 */
function getProblemTaskClosureCodeString(value) {
    return getGlobalScmessageByGloballist(value, "Problem Task Closure Codes");
}

/**
 * Get Local status localized string"
 *
 * @param {String} file, status
 * @returns {String}
 */
function getLocalStatusValue(file, status){
	if (status == "" || file =="" || file == null){
	    return status;
	}
	
	var message = String(status);
	var filename = funcs.filename(file);
	
	var msgId=null;
	var msgClass = null;
	if (filename != "cm3t") {
	    var modStatus = new SCFile("ModuleStatus", SCFILE_READONLY);
	    modStatus.setFields(["module"]);
	    var workflowName = getWorkflowNameByRecord(file);
	    var query1 = "module=\""+filename+"\" and status=\""+message+"\" and workflow=\""+workflowName+"\"";
	    var rc1 = modStatus.doSelect(query1);	
	    if (rc1 == RC_SUCCESS){
	        msgId = filename+";"+status+";"+workflowName;
	    }else{
	        msgId = filename+";"+status+";NULL";
	    }
	    msgClass = "local:ModuleStatus";
	} else {
	    msgId = "taskStatus;" + status;
	    msgClass = "local:codes";
	}
	
	message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return status;
	}else{
		return message;
	}
}

/**
 * Get Localized approval status"
 *
 * @param {String} status
 * @returns {String}
 */
function getLocalizedApprovalStatus(approvalStatus){
	if(approvalStatus != null &amp;&amp; approvalStatus != ""){
		approvalStatus = approvalStatus.charAt(0).toUpperCase()+approvalStatus.slice(1);
		var localizedApprovalStatus = getScmessagebyMailLang(approvalStatus,"global");
		if (localizedApprovalStatus.indexOf("Could not be found")&gt;-1){
			return approvalStatus;
		}else{
			return localizedApprovalStatus;
		} 
	}
}

function getWorkflowNameByRecord(record){
	if (record =="" || record == null){
		return null;
	}

	var filename = funcs.filename(record);
	var object = new SCFile("Object");
	var query = "file.name=\""+filename+"\"";
	var rc = object.doSelect(query);
	if (rc == RC_SUCCESS){
		var workflowName = null;
	    if (object.workflowLocation == "category") {
	        if (record["category"] != null &amp;&amp; record["category"] != "") {
	            workflowName = lib.Workflow.getWorkflowName(record, object);
	        }
	    } else if (object.workflowLocation == "object") {
	        workflowName = object.workflow;
	    } else if (object.workflowLocation == "default") {
	        workflowName = object["file.name"];
	    }
		return workflowName;
	}
}

/**
 * Get Localized category"
 *
 * @param {String} file name, category
 * @returns {String}
 */
function getLocalizedCategory(filename, category){
	if (category == "" || filename =="" || filename == null){
		return category;
	}
	var msgClass;
	switch (filename) {
		case "incidents":
			msgClass = "local:sdCategory";
			break;
		case "probsummary":
			msgClass = "local:imCategory";
			break;
		case "imTask":
			msgClass = "local:imTaskCat";
			break;
		case "cm3r":
			msgClass = "local:cm3rcategory";
			break;
		case "cm3t":
			msgClass = "local:cm3tcategory";
			break;
		case "rootcause":
			msgClass = "local:pbmCategory";
			break;
		case "rootcausetask":
			msgClass = "local:pbmTaskCat";
			break;
		case "request":
			msgClass = "local:rmCategory";
			break;
		case "requestTask":
			msgClass = "local:rmTaskCat";
			break;
		case "sla":
			msgClass = "local:slmCategory";
			break;		
		default:
			msgClass = "";
	}
	var msgId = category;
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return category;
	}else{
		return message;
	}
}

/**
 * Get Localized subcategory"
 *
 * @param {String} file name, category, subcategory
 * @returns {String}
 */
function getLocalizedSubcategory(filename, category, subcategory){
	if (category == "" || subcategory == "" || filename =="" || filename == null){
		return subcategory;
	}
	var msgClass;
	var msgId;
	switch (filename) {
		case "incidents":
			msgClass = "local:sdSubcategory";
			break;
		case "probsummary":
			msgClass = "local:imSubcategory";
			break;
		case "cm3r":
			msgClass = "local:cm3rsubcat";
			break;
		case "rootcause":
			msgClass = "local:pbmSubcategory";
			break;
		case "request":
			msgClass = "local:rmSubcategory";
			break;
		default:
			msgClass = "";
	}
	if (filename == "request") {
		msgId = category+";"+subcategory;
	} else {
		msgId = subcategory+";"+category+";NULL";
	}
	
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return subcategory;
	}else{
		return message;
	}
}

/**
 * Get Localized workflow phase"
 *
 * @param {String} file, category, subcategory
 * @returns {String}
 */
function getLocalizedPhase(file, phase){
	var filename = funcs.filename(file);
	if (phase == "" || filename =="" || filename == null){
		return phase;
	}
	var msgClass = "local:WorkflowPhase";
	var workflowName = getWorkflowNameByRecord(file);
	var msgId = phase + ";" + workflowName + ";" + filename;
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return phase;
	}else{
		return message;
	}
}

/**
 * Get localized document type, see globallist "KM DocTypes"
 *
 * @param {Number} value
 * @returns {String}
 */
function getKmDoctype(value) {
	var values = ["errormsg", "external", "probsol", "howto", "reference"];
	var msgIds = ["60", "61", "62", "63", "64"];
	return getGlobalScmessage(value, values, msgIds);
}

/**
 * Get localized document subtype, see globallist "SLA Document SubType"
 *
 * @param {Number} subtype
 * @returns {String}
 */
function getKmSubtype(subtype) {
	var msgClass = "global";
	var msgId = String(subtype);
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return subtype;
	}else{
		return message;
	}
}

/**
 * Get localized request model, see globallist "KM DocTypes"
 *
 * @param {Number} model
 * @returns {String}
 */
function getRequestModel(model) {
	if (model == "" || model == null){
		return model;
	}
	var msgClass = "local:requestModel";
	var msgId = String(model);
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return model;
	}else{
		return message;
	}
}

/**
 * Get localized agreement type
 *
 * @param {Number} slatype
 * @returns {String}
 */
function getSlaType(slatype) {
	if (slatype == "" || slatype == null){
		return slatype;
	}
	var msgClass = "global";
	//var msgId = String(slatype);
	var msgId = "";
	if (slatype == "customer") {
		msgId = "Customer";
	}else{
		msgId = String(slatype);
	}
	var message = getScmessagebyMailLang(msgId,msgClass);
	if (message.indexOf("Could not be found")&gt;-1){
		return slatype;
	}else{
		return message;
	}
}

// Fetch the relevant record of probcause and the search the relevant scmessage to return
// The display list is defined in globallists "Interaction Local Completion Codes"
function getLocalizedResolutionCode(code) {
    var query = "resolution.code=\"" + code + "\" and category=\"prob\"";
    var probcause = $("probcause", SCFILE_READONLY).select(query).uniqueResult();
    if (probcause) {
        var tag = new SCDatum();
        var ret = new SCDatum();
        funcs.rtecall("tag", ret, tag, probcause);
        var msgId = tag.getText().substring(10);
        return getScmessagebyMailLang(msgId, "local:probcause");
    }
    
    return code;
}

/**
 * Get scmessage by email recipient's language
 *
 * @param {String} msgId
 * @param {String} msgClass
 * @returns {String}
 */
function getScmessagebyMailLang(msgId, msgClass) {
	var lang = vars.$L_mailLang || sys_lang;
	var query = "syslanguage=\"" + lang + "\" and class=\"" + msgClass + "\" and message.id=\"" + msgId + "\""; 

	var scmessage = $("scmessage", SCFILE_READONLY).select(query).uniqueResult();
	var message = "";
	if (scmessage) {
		message = scmessage.message;
	}
	else if (lang != "en") {
		// query en scmessage
		query = "syslanguage=\"en\" and class=\"" + msgClass + "\" and message.id=\"" + msgId + "\"";
		scmessage = $("scmessage", SCFILE_READONLY).select(query).uniqueResult();
		if (scmessage) {
			message = scmessage.message;
		}
	}

	return message;
}</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">09/28/20 15:16:06</sysmodtime>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodcount type="decimal">357</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
