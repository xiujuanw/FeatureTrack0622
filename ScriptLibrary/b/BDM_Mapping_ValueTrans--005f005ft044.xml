<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;BDM_Mapping_ValueTrans&quot;" recordid="BDM_Mapping_ValueTrans">
    <name type="string">BDM_Mapping_ValueTrans</name>
    <script type="string">
//
//--- constans -----------------------------
//
var SMT = lib.BDM_Mapping_Constants.SMTYPES;
var BDMT = lib.BDM_Mapping_Constants.BDMTYPES;


//
//--- variables cache ----------------------
//
var util_isArray = lib.BDM_Util.isArray;


//
//--- translator functions -----------------
//
function getSMBDMTranslator() {

    var translator = createDefaultTranslator();

    translator[ SMT.Character + '-&gt;' + BDMT.Number ] = 
    translator[ SMT.Number + '&lt;-' + BDMT.String ] = function( value ) {
        return value ? Number( value ) : null ;
    }

    translator[ SMT.Number + '-&gt;' + BDMT.String ] =
    translator[ SMT.Character + '&lt;-' + BDMT.Number ] = function( value ) {
        return value != null ? String( value ) : value ;
    }
    translator[ SMT.Number + '&lt;-' + BDMT.Number ] = function( value ) {
        return value != null ? Number( value ) : null;
    }

    translator[ SMT.Logical + '-&gt;' + BDMT.String ] = function( value ) {
        return value == null ? null : ( value ? "true" : "false" );
    }

    translator[ SMT.Logical + '&lt;-' + BDMT.String ] = function( value ) {
        return __transStrToBoolean( value );
    }

    translator[ SMT.Character + '-&gt;' + BDMT.Datetime ] = function( value ) {
        if( value ) {
            var dt = new Date( value );
            var y = dt.getYear();
            if( y &lt; 100 ) {
                dt.setFullYear( Math.floor( new Date().getFullYear() / 100 ) * 100 + y );
            }
            value = new XMLDate( dt ).getISODateTimeString();
        }
        return value;
    }
    
    translator[ SMT.Datetime + '-&gt;' + BDMT.Datetime ] = function( value ) {
        return value != null &amp;&amp; value != ""
                ? new XMLDate( value ).getISODateTimeString() : null ;
    }

    translator[ SMT.Datetime + '&lt;-' + BDMT.String ] =
    translator[ SMT.Datetime + '&lt;-' + BDMT.Datetime ] = function( value ) {
        if( value ) {
            value = new XMLDate( value ).getDate();
        }else {
            value = null;
        }
        return  value;
    }
    
    return translator;
}

function getSMDefaultValueTranslator() {

    var dvt = createDefaultValueTranslator();

    dvt[ '-&gt;' + SMT.Datetime ] = function( value ) {
        if( value ) {
            var d = new Datum();
            d.setType( SMT.Datetime );
            d.setValue( value );
            value = d;
        }
        return  value;
    }

    dvt[ '-&gt;' + SMT.Number ] = function( value ) {
        return value ? Number( value ) : null ;
    }

    dvt[ '-&gt;' + SMT.Logical ] = function( value ) {
        return __transStrToBoolean( value );
    }

    return dvt;

}

function getBDMDefaultValueTranslator() {

    var dvt = createDefaultValueTranslator();

    dvt[ '-&gt;' + BDMT.Number ] = function( value ) {
        return value ? Number( value ) : null ;
    }

    return dvt;

}

function getDefaultTranslator() {
    var translator = createDefaultTranslator();

    translator[ BDMT.String + '-&gt;' + BDMT.Number ] =
    translator[ BDMT.Number + '&lt;-' + BDMT.String ] = function( value ) {
        return value ? Number( value ) : null ;
    }

    return translator;
}

function getDefaultValueTranslator() {
    return createDefaultValueTranslator();
}

function createDefaultTranslator() {
    var translator = {
        transValue : function( bEp1ToEp2, value, ep1Type, ep2Type ) {
            var tval = null;
            var tf = ep1Type + ( bEp1ToEp2 ? "-&gt;" : "&lt;-" ) + ep2Type;
            var __f = this[tf];
            if( ! __f || typeof __f != 'function' ) {
                __f = this._default;
            }

            var arrCheck = util_isArray( value );
            if( arrCheck[0] ) {
                tval = new Array();
                for( var i = 0; i &lt; arrCheck[1]; i++ ) {
                    tval[i] = __f.apply( this, [ value[i] ] );
                }
            }else {
                tval = __f.apply( this, [value] );
            }

            return tval;
        },

        _default : function( value ) {
            return value;
        }
    };

    return translator;
}

function createDefaultValueTranslator() {
    return {
        transDefaultValue : function( defaultValue, targetType ) {
            var tf = '-&gt;' + targetType;
            var __f = this[ tf ];
            if( ! __f || typeof __f != 'function' ) {
                __f = this._default;
            }

            return __f.apply( this, [ defaultValue ] );
        },

        _default : function( value ) {
            return value;
        }
    }
}

//
//--- assist functions --------------------------------
//

function __transStrToBoolean( str ) {
    str = str.toLowerCase();
    return "false" == str ? false : true;
}
</script>
    <package type="string">BDM</package>
    <sysmodtime type="dateTime">03/02/10 12:58:45</sysmodtime>
    <sysmoduser type="string">zengwe</sysmoduser>
    <sysmodcount type="decimal">16</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
