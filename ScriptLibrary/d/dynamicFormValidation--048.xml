<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;dynamicFormValidation&quot;" recordid="dynamicFormValidation">
    <name type="string">dynamicFormValidation</name>
    <script type="string">/** This function adds or updates a validation node based on the passed in ID.
*	The function relys on several RAD variables being set.
*
*	@param {xmlString} 	-	the xml String containing the validation information
*	@param {string} id    - the xml field name to be added/updated
*	@return The new xml String
*   @type xmlString
*/
function addValidation( xmlString, id)
{
	var xml = new XML(); 
	
	if ( xmlString == null || xmlString == "" )
		xmlString="&lt;validations&gt;&lt;/validations&gt;";
	if ( xml.setContent(xmlString) ) 
	{
		var type = vars.$field_type;
		if ( type == null || type == "")
			type = "string";
		var node = new XML( type );

		if ( id != null )
			node.setAttributeValue("id", id);
			
		if ( vars.$mandatory !="" &amp;&amp; vars.$mandatory != null)
			node.setAttributeValue("mandatory",vars.$mandatory);
		
			
		if ( vars.$match_type != null )
		{
			if ( vars.$match_type == "table" )
			{	
				if ( vars.$match_field != null &amp;&amp; vars.$match_field != "" )
				{
					node.setAttributeValue( "matchField", vars.$match_field );
					node.setAttributeValue( "matchTable", vars.$match_table );
					if ( vars.$multiSelections != null &amp;&amp; vars.$multiSelections != "" )
					   node.setAttributeValue( "multiSelections", vars.$multiSelections );
					else 
					   node.setAttributeValue( "multiSelections", 0 );
				}
				if ( vars.$match_group != null &amp;&amp; vars.$match_group != "" &amp;&amp; system.functions.type( vars.$match_group) == 8  &amp;&amp; system.functions.lng(system.functions.denull(vars.$match_group))&gt;0)
				{
			
					var lng = system.functions.lng(vars.$match_group);
					var groupNode = new XML( "matchGroup" );
					for (var i = 0; i &lt; lng; i++ )
					{
						vars.$match_group.setType(8);
						var childNode = new XML( "groupField" );
						if ( vars.$match_group[i] != null &amp;&amp; vars.$match_group[i] != "null" )
						{
							childNode.setValue( vars.$match_group[i] );
							groupNode = lib.xmlHelpers.addChildElement( groupNode, childNode );
						}
					}
					node = lib.xmlHelpers.addChildElement( node, groupNode );
				}
				if ( vars.$query != null ){
					node.setAttributeValue( "query", vars.$query );
				}
			}
			if ( vars.$match_type == "list" )
			{
				var lng = vars.$match_values.length();
				for (var i = 0; i &lt; lng; i++ )
				{
					if ( vars.$match_values[i] != null &amp;&amp; vars.$match_values[i] != "" )
					{
						var item = node.addElement( "value" );
						item.setValue( vars.$match_values[i] );
					}
				}
			} else if (vars.$match_type == "script" &amp;&amp; vars.$script != "" &amp;&amp; vars.$script != null )  {
                node.setAttributeValue( "matchScript", vars.$script);
                var lng = system.functions.lng(vars.$parameters);
                var paramNode = new XML("parameters");
                for (var i = 0; i &lt; lng; i++ ) {
                    var childNode = new XML("param");
                    childNode.setValue(vars.$parameters[i]);
                    paramNode = lib.xmlHelpers.addChildElement( paramNode, childNode);
                }
                node = lib.xmlHelpers.addChildElement( node, paramNode);
            }
		}
		if ( vars.$field_type == "number" )
		{
			if ( vars.$gt != null )
				node.setAttributeValue( vars.$gte, vars.$gt );
			if ( vars.$lt != null )
				node.setAttributeValue( vars.$lte, vars.$lt );
		}
		
		if ( vars.$field_type == "date" )
		{
			
			if ( vars.$gt != null )
			{
				var date = lib.tzFunctions.convertDateStringToGMT(vars.$gt, 6);
				node.setAttributeValue( vars.$gte, date );	
			}
			if ( vars.$lt != null )
			{
				var date = lib.tzFunctions.convertDateStringToGMT(vars.$lt, 6);
				node.setAttributeValue( vars.$lte, date );
			}
		}
		
		xml = lib.xmlHelpers.addReplaceChild( xml, node, "id" );
		
		return xml.toXMLString();
	}
	
	return xmlString;
}

/** This function returns the validation text for a specified dynamic field node.
*
*	@param {string} name    - the xml field name to be checked for validation
*	@param {xmlString} 	-	the xml String containing the validation information
*	@return The String containing the validation rules for the field
*   @type String
*/
function setValidationText( name, xmlString )
{
	var xml = new XML();
	var valString = "";
	if ( xmlString == null || xmlString == "" )
		xmlString = "&lt;validations&gt;&lt;/validations&gt;";
	if ( xml.setContent( xmlString ) )
	{
		var node = lib.xmlHelpers.getElement( xml, name, "id" );
		if ( node != null )
		{
			
			if ( node.getAttributeValue("mandatory") != null &amp;&amp;  node.getAttributeValue("mandatory") != "")
				
				valString += system.functions.scmsg(18, "dfwxml")+"  ";
			
			if ( node.getAttributeValue("matchField") != null &amp;&amp; node.getAttributeValue("matchTable") != null &amp;&amp; 
			     node.getAttributeValue("matchField") != "" &amp;&amp; node.getAttributeValue("matchTable") != "" )		
				valString += "Must match the " + node.getAttributeValue("matchField") 
				  + " field in the " + node.getAttributeValue("matchTable") + " table.  ";
			
			if ( node.getAttributeValue("query")!=null &amp;&amp; node.getAttributeValue("query")!="")
				valString += system.functions.scmsg(19, "dfwxml")+"  " + node.getAttributeValue("matchTable") +". ";
					  
			if ( node["value"] != null )
				valString += system.functions.scmsg(13, "dfwxml")+"  ";
			
			if ( node.getAttributeValue("gt") != null &amp;&amp; node.getAttributeValue("gt") != "" )
				valString += system.functions.scmsg(14, "dfwxml") +" "+ lib.tzFunctions.convertDateStringToLocal(node.getAttributeValue("gt"), 6) + ".  ";
				
			if ( node.getAttributeValue("gte") != null &amp;&amp; node.getAttributeValue("gte") != "" )
				valString += system.functions.scmsg(15, "dfwxml") +" " + lib.tzFunctions.convertDateStringToLocal(node.getAttributeValue("gte"), 6) + ".  ";
			
			if ( node.getAttributeValue("lt") != null &amp;&amp; node.getAttributeValue("lt") != "" )
				valString += system.functions.scmsg(16, "dfwxml") +" " + lib.tzFunctions.convertDateStringToLocal(node.getAttributeValue("lt"), 6) + ".  ";
				
			if ( node.getAttributeValue("lte") != null &amp;&amp; node.getAttributeValue("lte") != "" )
				valString += system.functions.scmsg(17, "dfwxml") +" " + lib.tzFunctions.convertDateStringToLocal(node.getAttributeValue("lte"), 6) + ".  ";
		}

		
		return valString;
	}
}

/** This function determines if the requested.for is valid.  If null, it also prints a message.
*
*	@param {String} strRequestedFor		- the string for $requested.for field
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function requestedForIsValid( strRequestedFor )
{
  if (strRequestedFor == null || strRequestedFor == "" )
  {
    print( system.functions.scmsg( 1203, "fc" ) );
    return false;
  }
  else
    return true;
}

/** This function determines if the dynamic form is valid or not.  If not it also prints a message that states what is not valid.
*
*	@param {XML String} form	    	- the dynamic form to be checked for validation
*	@param {XML String} validations 	- The XML String containing the validation rules.
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function formIsValid( form, validations )
{
	validations = lib.ScAPI_DVD_Utility.parseDateRangeValidation(validations);
	var xml = new XML();
	var valid = true;
	if ( xml.setContent( form ) )
	{
		var node = xml.getFirstChildElement();
		while ( node != null &amp;&amp; valid == true )
		{
			valid = elementIsValid( node, validations, form );
			node = node.getNextSiblingElement();
		}
	}
	
	return valid;
}


/** This function determines if a element of the dynamic form is valid or not.  If not it also prints a message that states what is not valid.
*
*	@param {element} element	    	- the xml element from the dynamic form to be checked for validation
*	@param {XML String} validations 	- The XML String containing the validation rules.
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function elementIsValid( element, validations, form )
{
	var xml = new XML();
	if ( element != null )
	{

		var name = element.getAttributeValue("id");
		var label = element.getAttributeValue("label");
		var regex = element.getAttributeValue("regex");
		var regexMsg = element.getAttributeValue("regexMsg");
		
		var isValid = true;
		
		var value = element.getValue();
		var display = element.getAttributeValue("display");
		if (value == '' &amp;&amp; display!='') {
		    funcs.msg(funcs.scmsg('20', 'dfwxml', [label]));
		    return false;
		}

		
		if ( validations != null )
		{
			if ( xml.setContent( validations ) )
			{
				rules = lib.xmlHelpers.getElement( xml, name, "id" );
				if ( rules != null )
				{
					var type = rules.getName();

					if ( value == null || value =="" )
					{
						
						
						if ( rules.getAttributeValue("mandatory") !=null &amp;&amp; rules.getAttributeValue("mandatory") !="")
						{
							if  (isMandatory( name, label, value, rules, form, validations )){
							
								var msg = system.functions.scmsg(117, "ScriptLibrary", [label]);
								print(msg);
								return false;
							}
						}
					}
					
					if ( type == "string" )
						isValid = isValidString( name, label, value, rules, form, validations );
						
					if ( type == "number" )
						return isValidNumber( name, label, value, rules );
						
					if ( type == "date" )
						return isValidDate( name, label, value, rules );
					
				}	
			}		
		}
	}
	
	if(value &amp;&amp; regex &amp;&amp; type == "string"){
       var match = new RegExp(regex).test(value);
       if(!match){
           print(regexMsg);
       }
       
       return match;
    }
	
	return isValid;
}




/** This function determines if a mandatory condition field is valid or not.  
*
*	@param {String} name	    	- the name of the field to be checked.
*	@param {String} label	    	- the name of the field to be checked.
*	@param {String} value	    	- the name of the field to be checked.
*	@param {XML} 	rules	    	- xml of options
*	@param {XML} 	validations	    - xml of option.validation
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function isMandatory( name, label, value, rules, form, validations )
{
	 
	var condition = rules.getAttributeValue("mandatory");
	
	if ( condition!=null &amp;&amp; condition !="" )
	{
	 
		var conditionConverted = lib.xmlFill.replaceElementValue(form, validations, condition);
		 
		var conditionEva = system.functions.parse_evaluate( conditionConverted, 4);
	 
		return conditionEva;
		
	} 
}


/** This function determines if a string field is valid or not.  If not it also prints a message that states what is not valid.
*
*	@param {String} name	    	- the name of the field to be checked.
*	@param {String} label	    	- the name of the field to be checked.
*	@param {String} value	    	- the name of the field to be checked.
*	@param {XML} 	rules	    	- xml of options
*	@param {XML} 	validations	    - xml of option.validation
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function isValidString( name, label, value, rules, form, validations )
{
	var field = rules.getAttributeValue("matchField");
	var table = rules.getAttributeValue("matchTable");
	var query = rules.getAttributeValue("query");
	var matchScript = rules.getAttributeValue("matchScript");
	
	var multiSelections = parseInt(rules.getAttributeValue("multiSelections"));	

	
	if ( field != null &amp;&amp; table != null &amp;&amp; field != "" &amp;&amp; table != "" &amp;&amp; value != null &amp;&amp; value !="" &amp;&amp; multiSelections != null)
	{
	    var fieldValues = value.split("\n");
	    
		var file = new SCFile( table );
	    for (var i = 0; i &lt; fieldValues.length; i++)
		{
		  var fieldValue = fieldValues[i];
		  var sql = field + " = \"" + fieldValue + "\"";
		  if( multiSelections &gt; 1 &amp;&amp; (fieldValue == null || fieldValue == ""))
		    continue;
		  if (query != null &amp;&amp; query != ''){
			var query = lib.xmlFill.replaceElementValue(form, validations, query);
			sql = sql + " and " + query;
		  }
		 
	 	//start for logical name
		var fields = new Array();
		fields.push("*");
		sql=system.functions.generate_sql_query(fields, sql, table, false);
		
		if(sql===null || sql==="") sql="true";
		//end for logical name
		
		if ( file.doSelect( sql ) == RC_SUCCESS )
			continue;
		else
		{
			var fDbdict=lib.dbdictHelper.initDbdictFile(table);
			var fieldType= lib.dbdictHelper.getFieldType(fDbdict,field);
			if(fieldType==8)
			{
				continue; 
			}
			var msg = system.functions.scmsg(118, "ScriptLibrary", [fieldValue, table]);
			print(msg);
			return false;
		}
		
	}
		return true;
	}
	
	var list = rules.getFirstChildElement();
	
	if ( list != null &amp;&amp; !matchScript)
	{
		while ( list != null )
		{
			if ( list.getValue() == value )
				return true;
			
			list = list.getNextSiblingElement();
		}
		
		var msg = system.functions.scmsg(119, "ScriptLibrary", [value])
		print(msg);
		return false;
		
	}
	
	return true;
}

/** This function determines if a number field is valid or not.  If not it also prints a message that states what is not valid.
*
*	@param {String} name	    	- the name of the field to be checked.
*	@param {String} label	    	- the name of the field to be checked.
*	@param {String} value	    	- the name of the field to be checked.
*	@param {XML} 	rules	    	- the name of the field to be checked.
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function isValidNumber( name, label, value, rules )
{
	if ( value != null &amp;&amp; value != "")
	{
		var PreValue = value;
		value = system.functions.val( value );
		if ( value == null || value != PreValue)
		{
			var msg = system.functions.scmsg(120, "ScriptLibrary", [label])
			print(msg);
			return false;
		}
	
		var gt = rules.getAttributeValue("gt");
		var gte = rules.getAttributeValue("gte");
		var lt = rules.getAttributeValue("lt");
		var lte = rules.getAttributeValue("lte");
	
		if ( gt != null &amp;&amp; gt != "" )
		{
			if ( value &lt;= gt )
				{
					var msg = system.functions.scmsg(121, "ScriptLibrary", [label, gt])
					print(msg);
					return false;
				}
		}
		
		if ( gte != null &amp;&amp; gte != "" )
		{
			if ( value &lt; gte )
				{
					var msg = system.functions.scmsg(122, "ScriptLibrary", [label, gte])
					print(msg);
					return false;
				}
		}
		
		if ( lt != null &amp;&amp; lt != "" )
		{
			if ( value &gt;= lt )
				{
					var msg = system.functions.scmsg(123, "ScriptLibrary", [label, lt])
					print(msg);
					return false;
				}
		}
		if ( lte != null &amp;&amp; lte != "" )
		{
			if ( value &gt; lte )
				{
					var msg = system.functions.scmsg(124, "ScriptLibrary", [label, lte])
					print(msg);
					return false;
				}
		}
	}

	return true;
}

/** This function determines if a date field is valid or not.  If not it also prints a message that states what is not valid.
*
*	@param {String} name	    	- the name of the field to be checked.
*	@param {String} label	    	- the name of the field to be checked.
*	@param {String} value	    	- the name of the field to be checked.
*	@param {XML} 	rules	    	- the name of the field to be checked.
*	@return True if the field is valid, false if not
*   @type Boolean
*/
function isValidDate( name, label, value, rules )
{
	if ( value != null &amp;&amp; value != "")
	{
		value = system.functions.val( value , 3);
		var svalue = system.functions.str(value);
		//He, Peng-Fei the value will be the current time if svalue is null. So use svalue to judge if it is a valid date format
		if ( svalue == null )
		{
			var msg = system.functions.scmsg(125, "ScriptLibrary", [label])
			print(msg);
			return false;			
		}

		
		
	    var sgt=lib.tzFunctions.convertDateStringToLocal(rules.getAttributeValue("gt"), 6);
	    var sgte=lib.tzFunctions.convertDateStringToLocal(rules.getAttributeValue("gte"), 6);
	    var slt=lib.tzFunctions.convertDateStringToLocal(rules.getAttributeValue("lt"), 6);
	    var slte=lib.tzFunctions.convertDateStringToLocal(rules.getAttributeValue("lte"), 6);
	    var gt = system.functions.val(sgt, 3);
	    var gte = system.functions.val(sgte, 3);
	    var lt = system.functions.val(slt, 3);
	    var lte = system.functions.val(slte, 3);
			
		if ( gt != null &amp;&amp; gt != "" )
		{
			if ( value &lt;= gt )
				{
					var msg = system.functions.scmsg(121, "ScriptLibrary", [label, sgt])
					print(msg);
					return false;		
				}
		}
		
		if ( gte != null &amp;&amp; gte != "" )
		{
			if ( value &lt; gte )
				{
					var msg = system.functions.scmsg(122, "ScriptLibrary", [label, sgte])
					print(msg);
					return false;
				}
		}
		
		if ( lt != null &amp;&amp; lt != "" )
		{
			if ( value &gt;= lt )
				{
					var msg = system.functions.scmsg(123, "ScriptLibrary", [label, slt])
					print(msg);
					return false;
				}
		}
		if ( lte != null &amp;&amp; lte != "" )
		{
			if ( value &gt; lte )
				{
					var msg = system.functions.scmsg(124, "ScriptLibrary", [label, slte])
					print(msg);
					return false;
				}
		}
	}

	return true;
}

/** This function adds/modifies button ids for text elements that have match tables and fields.
*
*	@param {xmlString} 	-	the xml String containing the validation information
*	@return The new xml String
*   @type xmlString
*/
function addButtonIds( xmlString )
{
	var xml = new XML();
	if ( xmlString == null || xmlString == "" )
		xmlString="&lt;validations&gt;&lt;/validations&gt;"
	if ( xml.setContent( xmlString ) )
	{
		var node = xml.getFirstChildElement();
		var i = 4001;
		while ( node != null)
		{
			if ( (node.getAttributeValue("matchField") != null &amp;&amp; node.getAttributeValue("matchTable") != null &amp;&amp; 
			     node.getAttributeValue("matchField") != "" &amp;&amp; node.getAttributeValue("matchTable") != "")
			     || (node.getAttributeValue("matchScript") != null  &amp;&amp; node.getAttributeValue("matchScript") != "") )
			{
				node.setAttributeValue( "button", i );
				i++;	
				
			}
			else
				node.setAttributeValue( "button", 0);
			node = node.getNextSiblingElement();
		}
		
		return xml.toXMLString();
	}
	
	return xmlString;
}

/** This function adds/modifies button ids for text elements that have match tables and fields.
*
*	@param {validations} 	-	the xml String containing the validation information
*	@param {form} 	-	the xml String containing the options information
*	@param {fieldValue} -	the option value
*	@param {id} -	the option id
*	@return The new xml String
*   @type boolean
*/
function isValidMatchFieldValue( fieldValue, id, form, validations )
{
  
  if(validations == null || validations == "")
    return true;
   var xml_validation = new XML();
	
  if ( xml_validation.setContent( validations ) )	
  {
  
    var element_validation = lib.xmlHelpers.getElement( xml_validation, id, "id" );
   
	var field = element_validation.getAttributeValue("matchField");
	var table = element_validation.getAttributeValue("matchTable");
	var query = element_validation.getAttributeValue("query");
	
    var file = new SCFile( table ); 
    var sql = field + " = \"" + fieldValue + "\"";
    if (query != null &amp;&amp; query != '') {
	   query = lib.xmlFill.replaceElementValue(form, validations, query);
       sql = sql + " and " + query;
    }
    
    //start for logical name
	var fields = new Array();
	fields.push("*");
	sql=system.functions.generate_sql_query(fields, sql, table, false);
	if(sql===null || sql==="") sql="true";
	//end for logical name
    if ( file.doSelect( sql ) == RC_SUCCESS )
	  return true;
	else
	  return false;
  }
    return false;
 
}</script>
    <package type="string">Service Catalog</package>
    <sysmodtime type="dateTime">06/15/21 00:48:46</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
