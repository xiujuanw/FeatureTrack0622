<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;dynamicFormDvd&quot;" recordid="dynamicFormDvd">
    <name type="string">dynamicFormDvd</name>
    <script type="string">var testFields = {
    "NewORDeactivate": {
        mandatory: false,
        visible: true,
        type: 'radio',
        value: ''
    },
    "SerialNumber": {
        mandatory: '[NewORDeactivate]="Deactivate"',
        visible: '[NewORDeactivate]="Deactivate"',
        type: 'string',
        value: ''
    },
    "SecureIDORSoftID": {
        mandatory: '[NewORDeactivate]="New"',
        visible: '[NewORDeactivate]="New"',
        type: 'combo',
        value: ''
    },
    "Company": {
        mandatory: false,
        visible: '[SecureIDORSoftID]="Secure ID"',
        type: 'combo',
        value: ''
    },
    "Department": {
        mandatory: '$L.format&lt;&gt;"svcCat.disp.item"',
        visible: '[SecureIDORSoftID]="Secure ID"',
        type: 'string',
        value: ''
    },
    "Address": {
        mandatory: '$L.format="svcCat.disp.item"',
        visible: '[SecureIDORSoftID]="Secure ID"',
        type: 'string',
        value: ''
    },
    "OperatingSystem": {
        mandatory: '[SecureIDORSoftID]="Soft ID"',
        visible: '[SecureIDORSoftID]="Soft ID"',
        type: 'combo',
        value: ''
    }
};

var dvdVisibleStack;

function evaluate(fields) {
    //printValue(fields);
    cleanDvdResult(fields);
    for (var fieldId in fields) {
        if (!fields.hasOwnProperty(fieldId)) {
            continue;
        }
        //print(fieldId + '...');
        var field = fields[fieldId];
        dvdVisibleStack = [];
        evalVisibleResult(field, fields);
        evalMandatoryResult(field, fields);
    }
    //printVisibleResult(fields);
    return fields;
}

function cleanDvdResult(fields) {
    for (var fieldId in fields) {
        if (!fields.hasOwnProperty(fieldId)) {
            continue;
        }
        var field = fields[fieldId];
        delete field.visibleResult;
        delete field.mandatoryResult;
    }
}

function evalVisibleResult(field, fields) {
    if (field.hasOwnProperty('visibleResult')) {
        return;
    }
    if (field.hasOwnProperty('visible')) {
        if (arrayFind(dvdVisibleStack, field) != -1) {
            throw new Error('Dynamic Form DVD detect endless loop...');
        }
        dvdVisibleStack.push(field);
        field.visibleResult = dvdEvaluate(field, 'visible', fields);
        dvdVisibleStack.pop();
    } 
}

function evalMandatoryResult(field, fields) {
     //print(rteJSONStringify(field))
    if (field.hasOwnProperty('mandatoryResult')) {
        return;
    }
    if (field.hasOwnProperty('mandatory')) {
        field.mandatoryResult = dvdEvaluate(field, 'mandatory', fields);
    } 
}

function dvdEvaluate(field, propName, fields) {
    var prop = field[propName];
    if (prop == 'true' || prop === true) {
        return true;
    }
    if (prop == 'false' || prop === false) {
        return false;
    }
    var cond = parseCondition(fields, prop);
   
    var conditionEva = system.functions.parse_evaluate(cond, 4);
    //print('     ' + propName + '...' + cond + '...' + conditionEva);
    return conditionEva == true;
}

function parseCondition(fields, query) {
    var reg = /\"(.*?)\"/gi; //regular expression for finding out double quotation mark ""
    var subStringArr = [];
    var tmp;
    var firstBracketIndex = 0;
    var secondBracketIndex = 0;
    var result = [];
    while ((tmp = reg.exec(query)) != null) {
        firstBracketIndex = tmp.index;
        if (firstBracketIndex &gt; 0) {
            subStringArr.push(query.substring(secondBracketIndex, firstBracketIndex));
        }
        secondBracketIndex = firstBracketIndex + tmp[0].length;
        subStringArr.push(query.substring(firstBracketIndex, secondBracketIndex));
    }
    if (secondBracketIndex != query.length) {
        subStringArr.push(query.substring(secondBracketIndex, query.length));
    }

    for (var i = 0; i &lt; subStringArr.length; i++) {
        var tempStr = subStringArr[i];
        if (tempStr.charAt(0) != '"') {
            tempStr = parseField(fields, tempStr);
        }
        result.push(tempStr);
    }

    return result.join('');
}


function parseField(fields, query) {
    var reg = /\[(.*?)\]/gi; //regular expression for find out brackets []
    var subStringArr = [];
    var tmp;
    var firstBracketIndex = 0;
    var secondBracketIndex = 0;
    var result = [];
    while ((tmp = reg.exec(query)) != null) {
        firstBracketIndex = tmp.index;
        if (firstBracketIndex &gt; 0) {
            subStringArr.push(query.substring(secondBracketIndex, firstBracketIndex));
        }
        secondBracketIndex = firstBracketIndex + tmp[0].length;
        subStringArr.push(query.substring(firstBracketIndex, secondBracketIndex));
    }
    if (secondBracketIndex != query.length) {
        subStringArr.push(query.substring(secondBracketIndex, query.length));
    }

    for (var i = 0; i &lt; subStringArr.length; i++) {
        var tempstr = subStringArr[i];
        if (tempstr.charAt(0) == '[') {
            tempstr = tempstr.substring(1, tempstr.length - 1);

            var field = fields[tempstr];
            if (field == null) {
                result.push('""');
                break;
            }
            var fieldValue = field.value;

            //referenced field has not calculate its visible status, calculate it first
            if (field.visibleResult === undefined) {
                evalVisibleResult(field, fields);
            }
            if (field.visibleResult === false) {
                fieldValue = '';
            }

            var fieldType = field.type;
            // if the depended field is a string or picklist, doulbe quotation mark should be added automatically
            if (fieldType == 'select' || fieldType == 'text'|| fieldType == "string" || fieldType == "multitext" || fieldType == "picklist" || fieldType == "combo" || fieldType == "radio")
         	{
                tempstr = '"' + fieldValue + '"';
            } else if (fieldType == "date") {
                tempstr = fieldValue == "" ? "NULL" : "'" + fieldValue + "'";
            } else {
                if (fieldType == "checkbox") {
                    tempstr = fieldValue;
                    if (tempstr == "") {
                        tempstr = "false";
                    }
                } else if (fieldType == "number") {
                    tempstr = fieldValue == "" ? "NULL" : fieldValue;
                }
                query = fieldValue;
            }
        }
        result.push(tempstr);
    }

    return result.join('');
}

function arrayFind(arr, obj) {
    for (var i = 0; i &lt; arr.length; i++) {
        if (arr[i] == obj) {
            return i;
        }
    }
    return -1;
}


function setTestFieldValue(fieldId, value) {
    testFields[fieldId].value = value;
}

function printValue(fields) {
    var out = ['Field values: '];
    for (var p in fields) {
        //print(p);
        if (fields[p].value) {
            out.push(p + '=' + fields[p].value + ';');
        }
    }
    print(out.join(''));
}


function printVisibleResult(fields) {
    var out = [' Visible fields: '];
    for (var p in fields) {
        //print(p);
        if (fields[p].visibleResult) {
            out.push(p + ';');
        }
    }
    print(out.join(''));
}

function test() {

    setTestFieldValue('NewORDeactivate', 'Deactivate');
    setTestFieldValue('SecureIDORSoftID', 'Secure ID');
    var result = evaluate(testFields);

}

test();</script>
    <package type="string">Client</package>
    <sysmodtime type="dateTime">01/10/16 15:56:42</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">3</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
