<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;configurationManagement&quot;" recordid="configurationManagement">
    <name type="string">configurationManagement</name>
    <script type="string">var setExitType = lib.ScAPI_Util.setExitType;
var NORMAL_EXIT = lib.ScAPI_Constants.NORMAL_EXIT();
var NO_RECORD_EXIT = lib.ScAPI_Constants.NO_RECORD_EXIT();
var _ = lib.Underscore.require();

function decideIsDown ( ciName )
{
	var outage = new SCFile("outage");
	var reschedule_date = new Date();
	var isDown = false;

	reschedule_date = null;

	var currentSql = "logical.name=\""+ ciName +
	                    "\" and (closed=NULL or closed=false) and outage.start&lt;=tod() and (outage.end&gt;tod() or outage.end=NULL)";
	
	if (outage.doSelect( currentSql ) == RC_SUCCESS )
	{
		isDown = true;
		do
        {
   			if (outage.outage_end != null )
   			{
   			  	if ( reschedule_date == null )
					reschedule_date = outage.outage_end;
   				else
   					if ( reschedule_date &gt; outage.outage_end )
   				  		reschedule_date = outage.outage_end;
   			}
        }
        while (outage.getNext() == RC_SUCCESS);
	}

	var futureSql = "logical.name=\""+ ciName +"\" and (closed=NULL or closed=false) and outage.start&gt;tod()";
	
	if (outage.doSelect( futureSql ) == RC_SUCCESS )
	{
		do
		{
			if ( reschedule_date == null )
				reschedule_date = outage.outage_start;
   			else
   				if ( reschedule_date &gt; outage.outage_start )
					reschedule_date = outage.outage_start;
		}
		while (outage.getNext() == RC_SUCCESS);
	}

	if ( isDown == true )
		markAsDown( ciName );
		
	else
	    markAsUp( ciName );

	var action = "decideDown";

	removeScheduleRecords( ciName, action )

	if ( reschedule_date != null )
	{
		scheduleAction( ciName, action, reschedule_date )
	}
}


function markAsDown ( ciName )
{
	var ci = new SCFile("device");
	var action = "markAsDown";
	var reschedule_action = "decideDown";
	var sql = "logical.name=\"" + ciName +"\"";

	if ( ci.doSelect( sql ) == RC_SUCCESS )
	{
		if ( ci.is_down != true )
	    {
	     	ci.is_down = true;
			var ciUpdateTemp=vars.$G_am_environment.update
	    	vars.$G_am_environment.update="always";
	     	var rc = ci.doAction("save");
	     	vars.$G_am_environment.update=ciUpdateTemp;

			if (rc == RC_CANT_HAVE || rc == 51 || rc == 3 )
			{
				var time = new Date();
				var sched = new Date(time.getTime() + 60*1000);
				var resched = scheduleAction( ciName, reschedule_action, sched )
	     	}
	    }
	}
}


function markAsUp ( ciName )
{
	var ci = new SCFile("device");
	var action = "markAsUp";
	var reschedule_action = "decideDown";
	var sql = "logical.name=\"" + ciName +"\"";

	if ( ci.doSelect( sql ) == RC_SUCCESS )
	{
		if ( ci.is_down == true )
	    {
			ci.is_down = false;
			var ciUpdateTemp=vars.$G_am_environment.update
	    	vars.$G_am_environment.update="always";
	     	var rc = ci.doAction("save");
	     	vars.$G_am_environment.update=ciUpdateTemp;

			if (rc == RC_CANT_HAVE || rc == 51 || rc == 3 )
			{
				var time = new Date();
				var sched = new Date(time.getTime() + 60*1000);
				var resched = scheduleAction( ciName, reschedule_action, sched )
			}
	    }
	}
}


function scheduleAction( ciName, action, runTime )
{
	var schedule = new SCFile("schedule");
	schedule._class = "linker";
		
	var sql = "application=\"am.decide.down\" and object=\""+ciName+"\" and type=\""+action+"\"";
	  
	if ( schedule.doSelect(sql) == RC_SUCCESS )
	{
		if ( schedule.expiration &lt;= runTime )
			return true;
	}
	
	var time = new Date();
	var sched = new Date();
	
	if ( runTime == null )
      sched = Date(time.getTime() + 60*1000);
      
	else
		sched = runTime;
	  
	schedule.expiration = sched;
	schedule.name = "CI " + ciName + " - " + action;
	schedule.application = "am.decide.down";
	schedule.status = "scheduled";
	schedule.strings[0] = ciName;
	schedule.strings[1] = action;
	schedule.object = ciName;
	schedule.type = action;
	
	if ( schedule.doInsert() == RC_SUCCESS)
		return true;
	return false;
}


function removeScheduleRecords( ciName, action )
{
	var schedule = new SCFile("schedule");
    var sql = "application=\"am.decide.down\" and object=\""+ciName+"\" and type=\""+action+"\"";
    
    if ( schedule.doSelect( sql ) == RC_SUCCESS )
    {
    	do
    	{
    		schedule.doDelete();
    	}
    	while ( schedule.getNext() == RC_SUCCESS );
    }
}


function setBaseLineGroupName(record, oldrecord)
{
	if (record.version != null) 
	{
		record.logical_name=record.logical_name+" "+record.version;
		
		var device = new SCFile("device");
		var currentSql = "logical.name=\""+ record.logical_name;
		
		if (device.doSelect(currentSql) == RC_SUCCESS )
		{
	 		device.logical_name=record.logical.name
	 		var rc = device.doUpdate()
	 	}
	}		
}

function getBaselineDeltas( record )
{
	var html;
	var strColumnWidth = "width=\"33%\"";
	var	 strRowClass;
	var caption;
	var fieldName;
	var row = 0;
	var fieldValue;
	if ( record.baseline != null )
	{
		html = lib.htmlTemplates.getBasicListTemplate() +
				"&lt;DIV class=\"resultTable\"&gt;&lt;TABLE class=\"listTable\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"&gt;";
		var baseline = new SCFile("baseline");
		var sql = "name=\"" + record.baseline + "\" and version = \"" + record.baseline_version + "\"";
		
		html += "&lt;TR valign=top CLASS=\"oddRow\"&gt;"+
				"&lt;TD&gt;&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(3, "baseline" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(4, "baseline" ) + "&lt;/TD&gt;&lt;/TR&gt;";
		if ( baseline.doSelect( sql ) == RC_SUCCESS )
		{
			for ( i=0; i &lt; baseline.field_names.length(); i++ )
			{
				fieldName = baseline.field_names[i];
				fieldValue = record[fieldName.replace( /\./g, "_" )];
				if ( fieldValue != baseline.field_values[i] )
				{
					strRowClass = i%2==0 ? "evenRow" : "oddRow";
					html += "&lt;TR valign=top CLASS=\""+ strRowClass +"\"&gt;";
					caption = lib.tableFunctions.getFieldCaption( baseline.field_names[i], 
									system.functions.filename( record ) );
					html += "&lt;TD " + strColumnWidth +" &gt;" + _.escape(caption)  + ": &lt;/TD&gt;";
					html += "&lt;TD&gt;" + _.escape(baseline.field_values[i]) + "&lt;/TD&gt;";
					html += "&lt;TD&gt;" + _.escape(fieldValue) + "&lt;/TD&gt;";
					html += "&lt;/TR&gt;";
				}
			}
		}
		
		html += "&lt;/TABLE&gt;";
	}
	
	return html;
}

function getPendingChanges( id )
{
	if( vars.$L_file ) {
		return getActiveDataModEvents( vars.$L_file, true );
	}else {
		return "";
	}
}

function getHistoricChanges( id )
{
	if( vars.$L_file ) {
		return getActiveDataModEvents( vars.$L_file, false );
	}else {
		return "";
	}
}

function getActiveDataModEvents( record, active )
{
	var html
	var strColumnWidth = "width=\"20%\"";
	var	 strRowClass;
	var caption;
	var row = 0;
	var fieldValue;
	var oldValue;
	var newValue;
	var filename = system.functions.filename( record );
	
	html = lib.htmlTemplates.getBasicListTemplate() +
				"&lt;DIV class=\"resultTable\"&gt;&lt;TABLE class=\"listTable\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\"&gt;";
	
	var events = new SCFile("dataModEvent");
	var filename = system.functions.filename( record );
	
	var sql = "(tableName=\"device\" or tableName=\"cirelationship\" or tableName=\""+filename+"\") and recordId=\"" +lib.StringUtil.escapeAllStr(record.logical_name) +
				"\" and active="+ active;
			
	
	if ( events.doSelect( sql ) == RC_SUCCESS )
	{
		html += "&lt;TR valign=top CLASS=\"oddRow\"&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(1, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(2, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(3, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(4, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(5, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(6, "dataModEvent" ) + "&lt;/TD&gt;"+
				"&lt;TD&gt;&lt;B&gt;" + system.functions.scmsg(7, "dataModEvent" ) + "&lt;/TD&gt;"+"&lt;/TR&gt;";
		var change = new SCFile("cm3r")
		do
		{
			var fieldType = lib.tableFunctions.getFieldType(events.fieldName,filename);
			 
			strRowClass = row%2==0 ? "evenRow" : "oddRow";
			html += "&lt;TR valign=top CLASS=\""+ strRowClass +"\"&gt;";
			caption = lib.tableFunctions.getFieldCaption( events.fieldName, 
							events.tableName );
			
			var isDisplayField = lib.ddmEventHelper.isDisplayField(events.tableName, events.fieldName);
			
			html += "&lt;TD " + strColumnWidth +" &gt;" + _.escape(caption)  + ": &lt;/TD&gt;";
			if(fieldType==3 ){
			//convert the ISO date to user format
			events.oldValue = system.functions.str(lib.dmeTimeConvert.formatFromISODate(events.oldValue));

			}
			
			if(isDisplayField){
				oldValue = lib.ddmEventHelper.getDisplayValue(events.oldValue);
			} else {
				oldValue = stripArray( events.oldValue );
			}
			
			html += "&lt;TD&gt;" + _.escape(oldValue) + "&lt;/TD&gt;";
			if(fieldType==3 ){
			//convert the ISO date to user format
			events.newValue = system.functions.str(lib.dmeTimeConvert.formatFromISODate(events.newValue));

			}
			
			if(isDisplayField){
				newValue = lib.ddmEventHelper.getDisplayValue(events.newValue);
			} else {
				newValue = stripArray( events.newValue );
			}
			
			html += "&lt;TD&gt;" + _.escape(newValue) + "&lt;/TD&gt;";
			html += "&lt;TD&gt;" + funcs.scmsg("status:" + _.escape(events.status), "dataModEvent")+ "&lt;/TD&gt;";
			
			if (events.linkedTableName &amp;&amp; events.linkedRecordId){
				html += '&lt;TD&gt;&lt;a href="sclink://'+events.linkedTableName+':number=&amp;quot;'+events.linkedRecordId+'&amp;quot;"&gt;'+events.linkedRecordId+'&lt;/TD&gt;';
			}
			else
			{
				var lri = "";
				if (events.linkedRecordId)lri=events.linkedRecordId;
				html += '&lt;TD&gt;' +lri+ '&lt;/TD&gt;';
			}
			
			/*
			var csql = "number=\""+events.linkedRecordId+"\"";
			if ( change.doSelect( csql ) == RC_SUCCESS )
			{
				if ( change.planned_start != null)
				{
					html += "&lt;TD&gt;" + _.escape(system.functions.str( change.planned_start ))+ "&lt;/TD&gt;";
				}
				else
				{
					html += "&lt;/TD&gt;";
				}
				if ( change.planned_end != null )
				{
			
					html += "&lt;TD&gt;" + _.escape(system.functions.str( change.planned_end ))+ "&lt;/TD&gt;";
				}
				else
				{
					html += "&lt;/TD&gt;";
				}
			}
			else
			{
				html+= "&lt;TD&gt;" + _.escape(system.functions.str( events.createdDate ))+ "&lt;/TD&gt;";
				html+= "&lt;TD&gt;" + _.escape(system.functions.str( events.processedDate ))+ "&lt;/TD&gt;";
				html+= "&lt;/TD&gt;&lt;/TD&gt;";
			}
			*/
			html+= "&lt;TD&gt;" + _.escape(system.functions.str( events.createdDate ))+ "&lt;/TD&gt;";
			html+= "&lt;TD&gt;" + _.escape(system.functions.str( events.processedDate ))+ "&lt;/TD&gt;";
			html+= "&lt;/TD&gt;&lt;/TD&gt;";
			
			html += "&lt;/TR&gt;";
			row++;
		}
		while ( events.getNext() == RC_SUCCESS );
	}
	
	html += "&lt;/TABLE&gt;";
	
	return html;			
	
}

function stripArray( field )
{
	if ( system.functions.index("{", field ) == 1 )
		field = system.functions.val( field, 8 );
	if ( system.functions.type( field ) == 8 )
	{
		var string = "";
		for (var i = 0; i &lt; field.length(); i++)
		{
			if ( field[i] == null )
			{
				field[i] = "";
			}
			string += system.functions.str(field[i]);
			if (i &lt; field.length() - 1 )
				string += ", ";
		}
		return string;
	}
	else
	{
		if ( field == null )
		{
			field = "";
		}
	}
	
	return field;
}

function getCINameFromUcmdbId( id, companyCode )
{
        if ( id == null || id == "" )
        {
                return null;
        }
        var ci = new SCFile( "device" );        
        var sql = "ucmdb.id=\"" + id + "\"";
        
        if(system.vars.$G_multi &amp;&amp; companyCode != null &amp;&amp; companyCode.length!=0)
        {
                sql="ucmdb.id=\"" + id + "\" and company=\""+companyCode+"\"";
        }
        
        if ( ci.doSelect( sql ) == RC_SUCCESS )
        {
                return ci.logical_name;
        }
        else
        {
                return null;
        }
}

function populateCompanyCode(relationship, oldRelationship)
{
	var parentName = relationship.logical_name;
	var isSame = system.functions.same(relationship,oldRelationship);
	if (!isSame)
	{
		var parentCi = new SCFile( "device" );	
		var sql = "logical.name=\"" + parentName + "\"";
		if ( parentCi.doSelect( sql ) == RC_SUCCESS )
		{
			if (!system.functions._null(parentCi.company))
			{
				relationship.company = parentCi.company;
			}
		}	
	}
}



/*
Author: Fei, Zhi-Chao
Push UCMDB ID to Service Manager when finish population ci.
*/
function pushUcmdbIDToSM(){
	var logicalName = vars.$L_file.logical_name;
	var ucmdbid = vars.$L_file.ucmdb_id;
	
	setExitType(NORMAL_EXIT);
	
	var ciobject = new SCFile( "device" );	
	var sql = "logical.name=\"" + logicalName + "\"";
	if ( ciobject.doSelect( sql ) == RC_SUCCESS )
	{
		
		ciobject.ucmdb_id=ucmdbid;
		ciobject.doUpdate();
	}
	else{
		setExitType(NO_RECORD_EXIT);
	}
}


/**
* @param record -&gt; $L.file
* @param object -&gt; $L.object
* @param list -&gt; $L.list
*/
function isJoinedCI(record, object, list){

	if(_.contains(vars.$G_joinfiles,funcs.filename(record))){
		if(record["logical.name"] == list["logical.name"] &amp;&amp; record["current.phase"] != list["current.phase"]){
        	return true;
		}
	}
	
	return false;
	
}
</script>
    <package type="string">Configuration Management</package>
    <sysmodtime type="dateTime">04/11/19 20:20:15</sysmodtime>
    <sysmoduser type="string">huangzhi</sysmoduser>
    <sysmodcount type="decimal">15</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
