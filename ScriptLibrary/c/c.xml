<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;c&quot;" recordid="c">
    <name type="string">c</name>
    <script type="string">/**
 * The ScriptLibrary is for common utility
 * 
 * @module c
 * @author Hao Ding &lt;hao.ding@hp.com&gt;
 */

/**
 * order in usage frequence
 * 
 * @private
 * @type {function[]}
 */
var __hs__ = [$SCFile, $SCFile2, $JSBeanFactory, $Class];

/**
 * The entrance '$' function
 * 
 * @param {*}
 *          arg0 any arguments passed to this entrance
 * @returns the result for function defined in __hs__
 */
function $(arg0) {
    if (arg0 == null || arg0 == undefined) {
        throw 'Argument[' + arg0 + '] does not supported!';
    }
    var rt = null;
    var hs = __hs__;
    var i;
    var length = hs.length;
    for (i = 0; i &lt; length; i++) {
        if (hs[i].accept(arg0)) {
            rt = arguments.length &gt; 1 ? hs[i].apply(hs[i], arguments) : hs[i](arg0);
            break;
        }
    }

    if (i &gt;= length) {
        throw 'Argument[' + arg0 + '] does not supported!';
    }

    return rt;
}

// Save a reference to some core methods
var _slice = Array.prototype.slice;
var _str = funcs.str;
var _type = funcs.type;
var _copycurrent = funcs.copycurrent;
var _fduplicate = funcs.fduplicate;

// SM Constants

/**
 * SM types
 * 
 * @private
 * @type {Object.&lt;string, number&gt;}
 */
var sctypes = {
    /**
     * @name $.Number
     * @memberof module:c
     * @type {number}
     * @default 1
     */
    Number: 1,
    /**
     * @name $.Character
     * @memberof module:c
     * @type {number}
     * @default 2
     */
    Character: 2,
    /**
     * @name $.Datetime
     * @memberof module:c
     * @type {number}
     * @default 3
     */
    Datetime: 3,
    /**
     * @name $.Logical
     * @memberof module:c
     * @type {number}
     * @default 4
     */
    Logical: 4,
    /**
     * @name $.Label
     * @memberof module:c
     * @type {number}
     * @default 5
     */
    Label: 5,
    /**
     * @name $.File
     * @memberof module:c
     * @type {number}
     * @default 6
     */
    File: 6,
    /**
     * @name $.Offset
     * @memberof module:c
     * @type {number}
     * @default 7
     */
    Offset: 7,
    /**
     * @name $.Array
     * @memberof module:c
     * @type {number}
     * @default 8
     */
    Array: 8,
    /**
     * @name $.Structure
     * @memberof module:c
     * @type {number}
     * @default 9
     */
    Structure: 9,
    /**
     * @name $.Operator
     * @memberof module:c
     * @type {number}
     * @default 10
     */
    Operator: 10,
    /**
     * @name $.Expression
     * @memberof module:c
     * @type {number}
     * @default 11
     */
    Expression: 11,
    /**
     * @name $.PseudoField
     * @memberof module:c
     * @type {number}
     * @default 12
     */
    PseudoField: 12,
    /**
     * @name $.GlobalVariable
     * @memberof module:c
     * @type {number}
     * @default 13
     */
    GlobalVariable: 13,
    /**
     * @name $.LocalVariable
     * @memberof module:c
     * @type {number}
     * @default 14
     */
    LocalVariable: 14
};

Object.keys(sctypes).forEach(function(name) {
    $[name] = sctypes[name];
});

/**
 * SM key types
 * 
 * @private
 * @type {Object.&lt;string, number&gt;}
 */
var keyTypes = {
    /**
     * @name $.keyType.Primary
     * @memberof module:c
     * @type {number}
     * @default 28
     */
    Primary: 28,
    /**
     * @name $.keyType.Unique
     * @memberof module:c
     * @type {number}
     * @default 12
     */
    Unique: 12,
    /**
     * @name $.keyType.NoNulls
     * @memberof module:c
     * @type {number}
     * @default 4
     */
    NoNulls: 4,
    /**
     * @name $.keyType.NoDuplicates
     * @memberof module:c
     * @type {number}
     * @default 8
     */
    NoDuplicates: 8,
    /**
     * @name $.keyType.NullAndDuplicates
     * @memberof module:c
     * @type {number}
     * @default 0
     */
    NullAndDuplicates: 0,
    /**
     * @name $.keyType.IRKey
     * @memberof module:c
     * @type {number}
     * @default 64
     */
    IRKey: 64
};

$.keyType = keyTypes;

/**
 * Retrieve the string format of type for the given type number
 * 
 * @param {number}
 *          type the number value for a type, e.g.:2 means Character
 * @returns {string} the string format for the type
 * @method $.scTypeToString
 * @memberof module:c
 */
$.scTypeToString = function (type) {
    var typeStr = "Unknown";
    var name;
    for (name in sctypes) {
        var sctype = sctypes[name];
        if (sctype == type) {
            typeStr = name;
            break;
        }
    }
    return typeStr;
};

/**
 * Check if the type is a primitive type
 * 
 * @param {number}
 *          type the number value for a type, e.g.:2 means Character
 * @returns {boolean} If it is a primitive type, returns true.
 * @method $.isPrimitiveType
 * @memberof module:c
 */
$.isPrimitiveType = function (type) {
    if (type != $.Array &amp;&amp; type != $.Structure) {
        return true;
    } else {
        return false;
    }
};

/**
 * Not supported characters in query
 * 
 * @name $.NOT_SUPPORTED_QUERY_CHARATERS
 * @memberof module:c
 * @type {string}
 */
$.NOT_SUPPORTED_QUERY_CHARATERS = "' \" &amp; \\ [ ] : | &lt; &gt; + = ; , ? # *";

/*-------------------------------------------
 / Common Functions
 /--------------------------------------------*/

/**
 * Print the status message to avoid the client die for a long running task
 * 
 * @param {string}
 *          msg The status message
 * @param {number}
 *          count The current step for the task
 * @param {number}
 *          [threshold=10] - After the number of steps, print the message.
 * @param {number}
 *          [last=false] - Is it the last step? If so, print the message also.
 * @method $.printStatus
 * @memberof module:c
 */
$.printStatus = function (msg, count, threshold, last) {
    threshold = threshold || 10;
    last = last || false;
    if (count % threshold == 0) {
        print(msg);
    } else if (last) {
        print(msg);
    }
};

/**
 * Deprecated, use lib.Underscore instead Determines whether a string ends with the characters of another string, returning true or false as appropriate.
 * 
 * @param {string}
 *          str The chosen string
 * @param {string}
 *          suffix The characters to be searched for at the end of this string.
 * @returns {boolean} True if appropriate *
 * @method $.endsWith
 * @memberof module:c
 */
$.endsWith = function (str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
};

/**
 * Deprecated, use lib.Underscore instead Determines whether a string starts with the characters of another string, returning true or false as appropriate.
 * 
 * @param {string}
 *          str The chosen string
 * @param {string}
 *          prefix The characters to be searched for at the start of this string.
 * @returns {boolean} True if appropriate *
 * @method $.startsWith
 * @memberof module:c
 */
$.startsWith = function (str, prefix) {
    return str.indexOf(prefix) === 0;
};

/**
 * Deprecated, use lib.Underscore instead The trim() function removes whitespace and other predefined characters from both sides of a string.
 * 
 * @param {string}
 *          str The chosen string
 * @returns {string} The string after whitespace removed.
 * @method $.trim
 * @memberof module:c
 */
$.trim = function (str) {
    if (str != null) {
        str = str.replace(/(^\s*)|(\s*$)/g, "");
    }
    return str;
};

/**
 * Deprecated, use lib.Underscore instead Check if a SM array or a JS array or a SM/JS string is empty.
 * 
 * @param {(string|Array)}
 *          src a SM array or a JS array or a SM/JS string
 * @returns {boolean} True if it is an empty array or an empty string
 * @method $.isEmpty
 * @memberof module:c
 */
$.isEmpty = function (value) {
    if (value == null || value == undefined) {
        return true;
    } else {
        if (value instanceof Array) {
            return value.length == 0;
        } else {
            var type = _type(value);
            if (type == $.Array) {
                return funcs.denull(value).length() == 0;
            } else if (type == $.Character) {
                return value.length == 0;
            } else {
                return false;
            }
        }
    }
};

/**
 * Deprecated, use lib.Underscore instead Returns the first index at which a given element can be found in the array/string
 * 
 * @param {(string|Array)}
 *          src a SM array or a JS array or a SM/JS string
 * @param {*}
 *          value A string value or an array field value
 * @returns {number} the first index can be found
 * @method $.indexOf
 * @memberof module:c
 */
$.indexOf = function (src, value) {
    if (!$.isEmpty(src) &amp;&amp; value != null) {
        var i;
        if (src instanceof Array) {
            for (i = 0; i &lt; src.length; i++) {
                if (value == src[i]) {
                    return i;
                }
            }
        } else {
            var type = _type(src);
            if (type == $.Array) {
                var iLoopTimes = src.length();
                for (i = 0; i &lt; iLoopTimes; i++) {
                    if (value == src[i]) {
                        return i;
                    }
                }
            } else if (type == $.Character) {
                return src.indexOf(value);
            } else {
                throw "Can't check index for " + _str(value);
            }
        }
    }
    return -1;
};

/**
 * Deprecated, use lib.Underscore instead Determines whether one string/array field may be found within another string/array, returning true or false as appropriate.See {@link module:c.$.indexOf}
 * 
 * @param {(string|Array)}
 *          src a SM array or a JS array or a SM/JS string
 * @param {*}
 *          value A string value or an array field value
 * @returns {boolean} True if as appropriate
 * @method $.contains
 * @memberof module:c
 */
$.contains = function (src, value) {
    if ($.indexOf(src, value) == -1) {
        return false;
    } else {
        return true;
    }
};

/**
 * Check whether a string contains specific charaters which SM query does not support. some specific characters used in reg expression: ^ - \\^ \ - \\\\ [ - \[ ] - \\]
 * 
 * @param {string}
 *          the choen string
 * @returns {boolean} True if as appropriate
 * @method $.isValidQueryString
 * @memberof module:c
 */
$.isValidQueryString = function (strValue) {
    var specCharReg = "[\\^%&amp;\"'\[\\],;:=&lt;&gt;+|?#*\\\\$]+";
    var searchResult = strValue.search(specCharReg);
    if (searchResult == -1) {
        return true;
    } else {
        return false;
    }
};

/*-------------------------------------------
 / RAD Proxy
 /--------------------------------------------*/

/**
 * Create a SM array
 * 
 * @param {*}
 *          The array field values, default to create an empty array.
 * @returns A sm array.
 * @method $.createSCArray
 * @memberof module:c
 */
$.createSCArray = function ( /* arg0, arg1, arg2, ... */ ) {
    var obj = new SCDatum();
    obj.setType($.Array);

    var length = arguments.length;
    if (length &gt; 0) {
        var i;
        for (i = 0; i &lt; length; i++) {
            obj.push(arguments[i]);
        }
    }
    return obj;
};

/**
 * Create a SM structure
 * 
 * @param {*}
 *          The structure field values, default to create an empty structure.
 * @returns A sm structure.
 * @method $.createSCStructure
 * @memberof module:c
 */
$.createSCStructure = function ( /* arg0, arg1, arg2, ... */ ) {
    var obj = new SCDatum();
    obj.setType($.Structure);
    var length = arguments.length;
    if (length &gt; 0) {
        var i;
        for (i = 0; i &lt; length; i++) {
            obj.push(arguments[i]);
        }
    }

    return obj;
};

/**
 * Select the result from cache for simple duplciated sql query if it exist . Otherwise, get the result from db directly
 * 
 * @param {String} fileName - The file that query run against 
 * @param {String} query - the simple query string       
 * @returns the query result either from db or from cache directly
 * @method $.cachedSelect
 * @memberof module:c
 */
$.cachedSelect = function (fileName, query) {

    var file = getSimpleCacheValue(fileName, query);
    if (file == null) {
        file = new SCFile(fileName);
        if (file.doSelect(query) === RC_SUCCESS) {
            setSimpleCacheValue(fileName, query, file);
        } else {
            file = undefined;
        }
    }

    return file;
};


/**
 * Use array as method arguments
 * 
 * @param {string}
 *          array a SM array or a JS array
 * @returns the arguments string
 */
function constructArguments(array) {
    var argumentsStr = "";
    var field;
    var i;
    if (array instanceof Array) {
        for (i = 0; i &lt; array.length; i++) {
            argumentsStr += ',';
            field = array[i];
            if (_type(field) == $.Character) {
                argumentsStr += '"' + field + '"';
            } else {
                argumentsStr += field;
            }
        }
    } else {
        var iLoopTimes = array.length();
        for (i = 0; i &lt; iLoopTimes; i++) {
            argumentsStr += ',';
            field = array[i];
            if (_type(field) == $.Character) {
                argumentsStr += '"' + field + '"';
            } else {
                argumentsStr += field;
            }
        }
    }
    return argumentsStr;
}

function createRequest() {
    return {
        // handle asynchronous call
        handlers: [],

        handlerResult: null,

        exceptionHandler: null,

        // configurations for handling request
        RECALL_CURRENT_HANDLER: false,

        recallCurrentHandler: function recallCurrentHandler(recall) {
            this.RECALL_CURRENT_HANDLER = recall;
        },

        getHandlerResult: function getHandlerResult() {
            return this.handlerResult;
        },

        setHandlers: function setHandlers( /* arg0, arg1, arg2, ... */ ) {
            var length = arguments.length;
            if (length &gt; 0) {
                var i;
                for (i = 0; i &lt; length; i++) {
                    this.handlers.push(arguments[i]);
                }
            }
        },

        setExceptionHandler: function setExceptionHandler(handler) {
            this.exceptionHandler = handler;
        },

        // handle request variables
        params: {},
        attrs: {},
        // used for redirect
        redirect: function (requestType, requestParameters) {
            this.attrs = requestParameters;
            this.attrs["$L.redirect.request.type"] = requestType;
            return "redirect";
        },

        getParameter: function (name) {
            return this.params[name];
        },
        setAttribute: function (name, value) {
            this.attrs[name] = value;
        },
        getAttribute: function (name) {
            return this.attrs[name];
        },
        removeAttribute: function (name) {
            delete this.attrs[name];
        },

        // handle thread variables
        getThread: function () {
            return {
                setAttribute: function (name, value) {
                    lib.executor.SetTLSValue(name, value);
                },
                getAttribute: function (name) {
                    return lib.executor.GetTLSValue(name);
                },
                removeAttribute: function (name) {
                    return lib.executor.RemoveTLSValue(name);
                }
            };
        },

        // handle global variables
        getGlobal: function () {
            return {
                setAttribute: function (name, value) {
                    system[name] = value;
                },
                getAttribute: function (name) {
                    return system[name];
                },
                removeAttribute: function (name) {
                    delete system[name];
                }
            };
        }
    };
}

/**
 * handle a MVC request
 * 
 * @param beanName
 *          JS bean name
 * @param methodName
 *          JS method name
 * @param requestNames
 *          SM array for request parameter names
 * @param requestValues
 *          SM array for request parameter values
 * @param viewNames
 *          SM array for request attribute names
 * @param viewValues
 *          SM array for request attribute values
 */
function doRequest(beanName, methodName, requestNames, requestValues, viewNames, viewValues) {
    // handle request parameters of record type
    var records = {};
    var i;
    var length = arguments.length;
    if (length &gt; 6 &amp;&amp; length % 2 == 0) {
        var recordList = _slice.call(arguments, 6);
        var recordName = null;
        for (i = 0; i &lt; recordList.length; i++) {
            if (i % 2 == 0) {
                recordName = recordList[i];
            } else {
                records[recordName] = recordList[i];
            }
        }
    }

    var request = createRequest();

    var requestParams = request.params;
    var iLoopTimes = requestNames.length();
    for (i = 0; i &lt; iLoopTimes; i++) {
        var requestName = requestNames[i];
        if (records[requestName] != null) {
            // Thre record type is passed through js arguments
            requestParams[requestName] = records[requestName];
        } else {
            requestParams[requestName] = requestValues[i];
        }
    }
    var requestAttrs = request.attrs;
    iLoopTimes = viewNames.length();
    for (i = 0; i &lt; iLoopTimes; i++) {
        requestAttrs[viewNames[i]] = viewValues[i];
    }

    var bean = $JSBeanFactory(beanName, [request]);
    var result = bean[methodName].apply(bean, [request]);

    function setViewResult() {
        var reqAttrs = request.attrs;
        var name;
        for (name in reqAttrs) {
            viewNames.push(name);
            viewValues.push(reqAttrs[name]);
        }
    }

    var handlers = request.handlers;
    var exceptionHandler = request.exceptionHandler;
    var handlersLength = handlers.length;
    if (handlersLength &gt; 0) {
        i = 0;

        function doNextHandler(res) {
            // set handler result
            request.handlerResult = res;

            // call it again when RECALL_CURRENT_HANDLER is true
            if (!request.RECALL_CURRENT_HANDLER) {
                i++;
            }
            var handler = handlers[i - 1];
            if (i == handlersLength) {
                lib.executor.ScheduleAsyncCall(bean, handler, [request], null, function (res) {
                    setViewResult();
                    return res;
                }, null, bean, exceptionHandler, request);
            } else {
                lib.executor.ScheduleAsyncCall(bean, handler, [request], null, doNextHandler, null, bean,
                    exceptionHandler, request);
            }
        }

        doNextHandler();
    } else {
        setViewResult();
        return result;
    }
}

/**
 * Set view object to vars.$L_view_names and vars.$L_view_values
 * 
 * @deprecated use doRequest
 * @param {Object}
 *          All request attributes and related values.
 * @method $.setViewObject
 * @memberof module:c
 */
$.setViewObject = function (obj) {
    var name;
    for (name in obj) {
        var value = obj[name];
        vars.$L_view_names.push(name);
        vars.$L_view_values.push(value);
    }
};

/**
 * Call a RAD application using "callrad"
 * 
 * @deprecated by lib.executor.CallRad
 * @param {string}
 *          appName The RAD application name.
 * @param {Object}
 *          parameters The RAD application parameters.
 * @param {boolean}
 *          [newThread=false] - Need start a new thread?
 * @method $.callrad
 * @memberof module:c
 */
$.callrad = function (appName, parameters, newThread) {
    var rteReturnValue = new SCDatum();
    var rteNames = new SCDatum();
    var rteValues = new SCDatum();
    newThread = newThread || false;
    var name;
    for (name in parameters) {
        rteNames.push(name);
        rteValues.push(parameters[name]);
    }
    funcs.rtecall("callrad", rteReturnValue, appName, rteNames, rteValues, newThread);
};

/**
 * Call a RAD application by reference using "js.runRad"
 * 
 * @deprecated by lib.executor.CallRad
 * @param {string}
 *          appName The RAD application name.
 * @param {Object}
 *          parameters The RAD application parameters.
 * @param {boolean}
 *          [newThread=false] - Need start a new thread?
 * @method $.callradByRef
 * @memberof module:c
 */
$.callradByRef = function (appName, parameters, newThread) {
    results = results || $.createSCArray();
    newThread = newThread || false;
    var rteReturnValue = new SCDatum();
    var rteNames = new SCDatum();
    var rteValues = new SCDatum();

    var parmNames = new SCDatum();
    var parmValues = new SCDatum();
    var parmTypes = new SCDatum();

    var name;
    for (name in parameters) {
        parmNames.push(name);
        parmValues.push(parameters[name]);
        var type = _type(parameters[name]);
        if (type == null || type == 0) {
            type = $.File;
        }
        parmTypes.push(type);
    }

    rteNames.push("name");
    rteNames.push("names");
    rteNames.push("values");
    rteNames.push("numbers");
    rteNames.push("description");

    rteValues.push(appName);
    rteValues.push(parmNames);
    rteValues.push(parmValues);
    rteValues.push(parmTypes);
    rteValues.push(parmNames);

    funcs.rtecall("callrad", rteReturnValue, "js.runRad", rteNames, rteValues, newThread);

    var results = vars.$smtestresult;
    var i = 0;
    for (name in parameters) {
        parameters[name] = results[i];
        i++;
    }
    return results;
};

/**
 * Call a SM process using "Rule.callProcess"
 * 
 * @deprecated by lib.executor.CallRad
 * @param {string}
 *          name The RAD process name.
 * @method $.callProcess
 * @memberof module:c
 */
$.callProcess = function (name) {
    var parameters = {};
    parameters["text"] = "&lt;rule&gt;&lt;callProcess&gt;&lt;process&gt;" + name + "&lt;/process&gt;&lt;/callProcess&gt;&lt;/rule&gt;";
    parameters["file"] = vars.$L_file;
    parameters["second.file"] = vars.$L_file_save;
    parameters["index"] = vars.$L_result;
    parameters["prompt"] = vars.$L_message;
    parameters["names"] = vars.$L_names;
    parameters["values"] = vars.$L_values;
    $.callrad("Rule.callProcess", parameters);
};

/**
 * Call the document engine "se.search.engine"
 * 
 * @deprecated by lib.executor.CallRad
 * @param {string}
 *          fileName The file be searched
 * @param {string}
 *          queryStr The query string
 * @method $.callSearchEngine
 * @memberof module:c
 */
$.callSearchEngine = function (fileName, queryStr) {
    $.callrad("se.search.engine", {
        text: fileName,
        query: queryStr
    });
};


/**
 * Compile JavaScript
 *
 * @param {string}
 *          script
 * @param {name}
 *          description
 */
$.compileJavaScript = function (script, description) {
    return compile(script, description);
};

/*
 * Simple JavaScript Inheritance By John Resig http://ejohn.org/ MIT Licensed.
 */
// Inspired by base2 and Prototype
var fnTest = /xyz/.test(function () {
    xyz;
}) ? /(\bcallSuper\b)|(\b_super\b)/ : /.*/;

/**
 * The inheritance method
 * 
 * @private
 * @param {*}
 *          arg0 The parent class
 * @param {*}
 *          arg1 The current class
 */
function $Class(arg0, arg1) {
    if (arg1) {
        parent = arg0;
        prop = arg1;
    } else {
        // The base Class implementation (does nothing)
        parent = new Function();
        prop = arg0;
    }

    var _super = parent.prototype;
    // Instantiate a base class (but only create the instance,
    // don't run the init constructor)
    var P = new Function();
    P.prototype = parent.prototype;
    var classPrototype = new P();

    // Copy the properties over onto the new prototype
    var name;
    for (name in prop) {
        // Check if we're overwriting an existing function
        classPrototype[name] = typeof prop[name] == "function" &amp;&amp; typeof _super[name] == "function" &amp;&amp;
            fnTest.test(prop[name]) ? (function (name, fn) {
                return function () {
                    var tmp = this._super;
                    // Add a new this.callSuper() method to get the super class
                    this.callSuper = function () {
                        return _super;
                    };
                    // Add a new this._super() method to get the super method
                    this._super = _super[name];
                    // The method only need to be bound temporarily, so we
                    // remove it when we're done executing
                    var ret = fn.apply(this, arguments);
                    this._super = tmp;

                    return ret;
                };
            })(name, prop[name]) : prop[name];
    }

    //

    var Class = new Function("return lib.c.$.$$Class.apply( this, arguments )");
    // Populate our constructed prototype object
    Class.prototype = classPrototype;

    // Enforce the constructor to be what we expect
    Class.prototype.constructor = Class;

    return Class;
}

/**
 * Check if the entrance {@link module:c.$} will go to {@link module:c.$Class}
 * 
 * @private
 * @method $Class.accept
 * @memberof module:c
 */
$Class.accept = function (arg0) {
    return typeof arg0 == 'object' || typeof arg0 == 'function';
};

/**
 * Call the init method when initilize a class instance
 * 
 * @private
 * @method $.$$Class
 * @memberof module:c
 */
$.$$Class = function () {
    if (this.init) {
        this.init.apply(this, arguments);
    }

    return this;
};

/*-------------------------------------------
 / JSBeanFactory
 /--------------------------------------------*/
var JSBeanFactoryPattern = /^#/;
var objects = {}; // to hold all singleton bean instances

/**
 * Get a javascript bean or invoke a public method of javascript bean
 * 
 * @private
 * @param {string}
 *          name The javascript bean name
 */
function $JSBeanFactory(name /* , arg0, arg1, arg2, ... */ ) {
    var c0 = name.charAt(0);
    if ('#' == c0) {
        var instanceName = name.substring(1);

        var length = arguments.length;
        var obj = null;
        if (length &gt; 1) {
            var initParams = arguments[1];
            if (_type(initParams) == $.Array) {
                function createBean() {
                    var q = [];
                    var i;
                    if (initParams instanceof Array) {
                        for (i = 0; i &lt; initParams.length; i++) {
                            q.push("initParams[" + i + "]");
                        }
                    } else {
                        var iLoopTimes = initParams.length();
                        for (i = 0; i &lt; iLoopTimes; i++) {
                            q.push("initParams[" + i + "]");
                        }
                    }
                    return eval("new $.$JSBeanFactory(instanceName," + q.join(",") + ")");
                }

                obj = createBean();

                if (length &gt; 2) {
                    return obj.invoke.apply(obj, _slice.call(arguments, 2));
                } else {
                    return obj.deref();
                }
            } else {
                obj = new $.$JSBeanFactory(instanceName);
                return obj.invoke.apply(obj, _slice.call(arguments, 1));
            }
        } else {
            obj = new $.$JSBeanFactory(instanceName);
            return obj.deref();
        }
    }
}

//
// JSBeanFactory Wrapper Class
//
$.$JSBeanFactory = $Class(new function () {
    // private section
    var name = null;
    var obj = null;

    // public section
    return {
        init: function (instanceName /* , initParam1, initParam2 */ ) {
            obj = objects[instanceName];
            if (!obj) {
                var jsBeanFactory = $("JSBeanFactory", SCFILE_READONLY).select('name="' + instanceName + '"').uniqueResult();
                if (jsBeanFactory != null) {
                    var usedClass = jsBeanFactory["used.class"];
                    var libObj = lib[usedClass];
                    if (libObj) {
                        var getClass = libObj.getClass;
                        if (getClass &amp;&amp; typeof getClass == 'function') {
                            var klass = getClass();
                            var newObject = (function () {
                                function F(args) {
                                    return klass.apply(this, args);
                                }
                                F.prototype = klass.prototype;
                                return function () {
                                    return new F(arguments);
                                };
                            })();

                            if (arguments.length &gt; 1) {
                                obj = newObject.apply(null, _slice.call(arguments, 1));
                            } else {
                                obj = newObject();
                            }

                            var scope = jsBeanFactory["scope"];
                            // save singletion
                            if (scope == 0) {
                                objects[instanceName] = obj;
                            }
                        } else {
                            throw 'Function "getClass" does not exist in lib[' + usedClass + ']!!';
                        }
                    } else {
                        throw 'Lib Name [' + usedClass + '] does not exist!!';
                    }
                } else {
                    throw 'Name [' + instanceName + '] does not exist in JSBeanFactory!!';
                }
            }

            name = instanceName;
            return this;
        },

        // invoke function
        invoke: function (fName /* , arg0, arg1, ... */ ) {
            if (fName &amp;&amp; typeof fName === 'string') {
                var f = obj[fName];
                if (typeof f === 'function') {
                    return f.apply(obj, _slice.call(arguments, 1));
                } else {
                    // return undefined if the function is not exists
                    return undefined;
                }
            }

            throw 'Object instance with name[' + name + '] does not have function[' + fName + ']!!';
            //return undefined;
        },

        deref: function () {
            return obj;
        }
    };
});

/**
 * Check if the entrance {@link module:c.$} will go to {@link module:c.$JSBeanFactory}
 * 
 * @private
 * @method $JSBeanFactory.accept
 * @memberof module:c
 */
$JSBeanFactory.accept = function (arg0) {
    return typeof arg0 === 'string' &amp;&amp; JSBeanFactoryPattern.test(arg0);
};

/*-------------------------------------------
 / SCFile
 /--------------------------------------------*/
var scfilePattern = /^[a-zA-Z]/;
var scfile2Pattern = /^![a-zA-Z]/;

/**
 * Get a proxy for SM SCFile
 * 
 * @private
 * @param {string}
 *          name The SM file name
 * @param {int}
 *          whether open record with readonly mode. Usually the SCFILE_READONLY is used.
 */
function $SCFile(fileName, readOnly) {
    if (!(readOnly === undefined)) {
        return new $.$SCFile(fileName, readOnly);
    } else {
        return new $.$SCFile(fileName);
    }
}


/**
 * Check if the entrance {@link module:c.$} will go to {@link module:c.$SCFile}
 * 
 * @private
 * @method $SCFile.accept
 * @memberof module:c
 */
$SCFile.accept = function (arg0) {
    return (typeof arg0 === 'string') &amp;&amp; scfilePattern.test(arg0);
};


function $SCFile2(fileName, isEdit) {
    this.readonly = !isEdit;
    if (isEdit) {
        return new $.$SCFile(fileName.substring(1));
    }

    var item = new $.$SCFile(fileName.substring(1), SCFILE_READONLY);
    item.readonly = true;
    return item;
}

$SCFile2.accept = function (arg0) {
    return (typeof arg0 === 'string') &amp;&amp; scfile2Pattern.test(arg0);
};

//
// SCFile Wrapper Class
//
/**
 * @class $SCFile
 * @classdesc The proxy class for SM SCFile.
 */
$.$SCFile = $Class(
    /** @lends $SCFile.prototype */
    {
        scfile: null,
        rc: null,
        fileName: null,
        success: false,
        readonly: false,
        returnFields: null,

        init: function (fileName, readOnly) {
            this.rc = null;
            this.fileName = fileName;

            if (!(readOnly === undefined)) {
                this.scfile = new SCFile(fileName, readOnly);
            } else {
                this.scfile = new SCFile(fileName);
            }
            this.fields = this.setFields;
            this.one = this.uniqueResult;
            this.each = this.forEach = this.iterate;
            this.orderBy = this.sortBy;
            this.success = false;
            return this;
        },

        /**
         * Set orders by
         * 
         * @param {string[]}
         *          fields Fields need be ordered by
         * @param {enum[]}
         *          orders An orders array to match fields, e.g. [SCFILE_ASC, SCFILE_DSC]
         */
        setOrderBy: function (fields, orders) {
            this.scfile.setOrderBy(fields, orders);
            return this;
        },

        sortBy: function (fields) {
            var sortFields = fields;
            if (typeof (fields) == 'string') {
                sortFields = Array.prototype.slice.call(arguments);
            }

            var listFields = [];
            var listOrder = [];
            var k;
            for (k = 0; k &lt; sortFields.length; k++) {
                var field = sortFields[k];
                if (field.length &lt; 0) {
                    continue;
                }
                var c = field.charAt(0);
                if (c == '-') {
                    listFields.push(field.substring(1));
                    listOrder.push(SCFILE_DSC);
                } else if (c == '+') {
                    listFields.push(field.substring(1));
                    listOrder.push(SCFILE_ASC);
                } else {
                    listFields.push(field);
                    listOrder.push(SCFILE_ASC);
                }
            }
            
            this.scfile.setOrderBy(listFields, listOrder);
            return this;
        },

        /**
         * Set Fields list
         * 
         * @param {string[]}
         *          fields Fields that should be selected
         */
        setFields: function (fields) {
            this.returnFields = fields;
            if (typeof (fields) == 'string') {
                this.returnFields = Array.prototype.slice.call(arguments);
            }

            this.scfile.setFields(this.returnFields);
            return this;
        },

        _doSelect: function (query, start, count) {
            this.rc = null;
            this.success = false;
            if (this.scfile) {

                if (start !== null &amp;&amp; start !== undefined) {
                    this.rc = this.scfile.doSelectEx(query, start, count);
                } else {
                    this.rc = this.scfile.doSelect(query);
                }

                this.success = (this.rc == RC_SUCCESS);
            }

            return this;
        },

        /**
         * Select the result
         * 
         * @param {string}
         *          query The SM query
         */
        select: function (query, params) {
            if (!query || typeof query !== 'string') {
                query = 'false'; // select nothing if query is non-string
            }

            if (params &amp;&amp; _type(params) == $.Array) {
                var i;
                for (i = 0; i &lt; params.length; i++) {
                    query = query.replace(/%S/, params[i]);
                }
            }

            return this._doSelect(query);
        },

        _makeParam: function (param) {
            if (null == param) {
                return 'NULL';
            }

            var type = typeof (param);

            if (type == 'number') {
                return param;
            }

            if (param instanceof Date) {
                return '\'' + funcs.str(param) + '\'';
            }

            if (type != 'string') {
                param = '' + param;
            }
            return '"' + lib.StringUtil.escapeAllStr(param) + '"';
        },

        makeSql: function (sql) {
            var args = arguments;
            var self = this;
            var argSize = args.length;

            if (argSize == 1) {
                return sql;
            }

            var sql1;
            if (argSize &gt;= 2 &amp;&amp; argSize &lt;= 4 &amp;&amp; typeof (args[1]) == 'object' &amp;&amp; !(args[1] instanceof Date)) {
                var params = args[1];
                sql1 = sql.replace(/\:(\w+)/g, function (match, name) {
                    return typeof params[name] != 'undefined' ? self._makeParam(params[name]) : match;
                });
            } else {
                var number = 0;
                sql1 = sql.replace(/\:(\w+)/g, function (match) {
                    number++;
                    return args[number] !== undefined ? self._makeParam(args[number]) : match;
                });
            }
            return sql1;
        },

        /*
         * Find with params
         * Params:
         *     1. query
         *     2. params
         * Usage 1: Use object as parameters
              var params={name: 'zhang', age:18, birth: new Date()};
              .find('name=:name and age=:age and birth=:birth', params);
               
              =&gt; name="zhang" and age=18 and birth='11/12/19 14:54:20'
           Usage 2: Use param array as paramters
              .find('name=:1 and age=:2 and birth=:3', 'zhang', 18, new Date());
              =&gt; name="zhang" and age=18 and birth='11/12/19 14:54:20'
         */
        find: function () {
            this._checkReadonly();
            var args = arguments;
            var query = this.makeSql.apply(this, args);
            return this._doSelect(query);
        },

        _checkReadonly: function () {
            if (this.readonly &amp;&amp; this.returnFields == null) {
                funcs.msg('setFields required before lib.c.$(\'!' + this.fileName + '\').find ' + lastStack(2), 2);
                var list = funcs.dbdict_helper("unique.key", this.fileName);
                this.setFields(list.toArray());
            }
        },

        _getPageParam: function (sql, args) {

            var isJsonParam = false;
            if (args.length &gt; 2 &amp;&amp; args.length &lt;= 4) {
                isJsonParam = (typeof (args[1]) == 'object' &amp;&amp; !(args[1] instanceof Date));
            }

            var start = 1;
            var count = 10;
            var paramSize = 0;
            if (isJsonParam) {
                paramSize = 1;
            } else {

                var matches = sql.match(/\:/);
                if (matches) {
                    paramSize = matches.length;
                } else {
                    // default 0
                }
            }

            if (args.length &gt; paramSize + 1) {
                start = args[paramSize + 1];
            }

            if (args.length &gt; paramSize + 2) {
                count = args[paramSize + 2];
            }

            return {
                start: start,
                count: count
            };
        },

        findx: function (sql) {
            this._checkReadonly();
            var args = Array.prototype.slice.call(arguments);
            var pageParam = this._getPageParam(sql, args);
            var query = this.makeSql.apply(this, args);
            return this._doSelect(query, pageParam.start, pageParam.count);
        },

        /**
         * Count the result
         * 
         * @param {string}
         *          query The SM query
         */
        count: function (query) {
            if (!query || typeof query !== 'string') {
                query = 'false'; // select nothing if query is non-string
            }

            this.rc = null;
            this.success = false;
            var count = 0;
            if (this.scfile) {
                count = this.scfile.doCount(query);
                this.rc = getLastRC();
                this.sucess = (this.rc == RC_SUCCESS);
            }
            return count;
        },

        /**
         * Same as select(true)
         */
        selectAll: function () {
            return this.select('true');
        },

        /**
         * Iterate the search result
         * 
         * @param callback
         *          The callback that handles the search result.
         */
        iterate: function (callback) {
            if (this.success &amp;&amp; typeof callback === 'function') {
                this.rc = (this.rc === null ? this.scfile.getFirst() : this.rc);
                while (this.rc != RC_NO_MORE) {
                    if (callback.call(this, this.scfile) === true) {
                        break;
                    }
                    this.rc = this.scfile.getNext();
                }
            }
            return this.success;
        },

        /**
         * Get the unique result
         */
        uniqueResult: function () {
            if (this.success) {
                this.rc = (this.rc === null ? this.scfile.getFirst() : this.rc);
                return this.scfile;
            } else {
                return null;
            }
        },

        /**
         * Get the multiple results
         * 
         * @param readonly
         *          If true, the result set is read only(can't doUpdate/doDelete/getNext etc)
         */
        list: function (readonly) {
            if (readonly == null) {
                readonly = false;
            }

            var values = [];
            if (this.success) {
                this.rc = (this.rc === null ? this.scfile.getFirst() : this.rc);
                while (this.rc != RC_NO_MORE) {
                    var value = new SCDatum();
                    if (readonly) {
                        _copycurrent(value, this.scfile);
                    } else {
                        _fduplicate(value, this.scfile);
                    }
                    values.push(value);
                    this.rc = this.scfile.getNext();
                }
            }
            return values;
        },

        /**
         * Get the related dbdict record.
         */
        dbdict: function () {
            return $('dbdict').select('name="' + this.fileName + '"').uniqueResult();
        }
    });


function stack() {
    try {
        throw new Error();
    } catch (e) {
        return e.stack;
    }
}

function lastStack(n) {
    var list = stack().split('\n');
    if (!n) {
        n = 0;
    }

    var index = 3 + n;
    index = index &gt; list.length - 2 ? list.length - 2 : index;
    return list[index];
}</script>
    <package type="string">BaseUtilities</package>
    <sysmodtime type="dateTime">06/15/21 00:48:46</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">0</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
