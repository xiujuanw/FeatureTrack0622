<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLFileMagic&quot;" recordid="IDOLFileMagic">
    <name type="string">IDOLFileMagic</name>
    <script type="string">// http://en.wikipedia.org/wiki/List_of_file_signatures

// service manager "attachment value" is interpreted as "javascript string"
// and javascript string is encoded in unicode, the "char code" size has two bytes
// need to consider big/little endian situation
var IDOLFileMagic = (function() {

  function detectMimeTypeOnBigEndian(bin) {
    if (bin.charCodeAt(0) === 0x8950 &amp;&amp; bin.charCodeAt(1) === 0x4e47) {
      return "image/png";
    } else if (bin.charCodeAt(0) === 0xffd8 &amp;&amp; (0xff00 &amp; bin.charCodeAt(1)) === 0xff00) {
      // http://www.garykessler.net/library/file_sigs.html
      // 
      // all JPEG files start with the three hex digits 0xFF-D8-FF.
      // The fourth digit is also indicative of JPEG content. Various options include:
      // 0xFF-D8-FF-DB — Samsung D807 JPEG file.
      // 0xFF-D8-FF-E0 — Shown above. Standard JPEG/JFIF file.
      // 0xFF-D8-FF-E1 — Shown above. Standard JPEG/Exif file.
      // 0xFF-D8-FF-E2 — Canon EOS-1D JPEG file.
      // 0xFF-D8-FF-E3 — Samsung D500 JPEG file.
      // 0xFF-D8-FF-E8 — Shown above. Still Picture Interchange File Format (SPIFF).
      return "image/jpeg";
    } else if (bin.charCodeAt(0) === 0x4749 &amp;&amp; bin.charCodeAt(1) === 0x4638 &amp;&amp; bin.charCodeAt(2) === 0x3761) {
      // GIF87a
      return "image/gif";
    } else if (bin.charCodeAt(0) === 0x4749 &amp;&amp; bin.charCodeAt(1) === 0x4638 &amp;&amp; bin.charCodeAt(2) === 0x3961) {
      // GIF89a
      return "image/gif";
    } else if (bin.charCodeAt(0) === 0x424d) {
      return "image/bmp";
    } else if (bin.charCodeAt(0) === 0x4d4d &amp;&amp; bin.charCodeAt(1) === 0x002a) {
      // big endian format
      return "image/tiff";
    } else if (bin.charCodeAt(0) === 0x4949 &amp;&amp; bin.charCodeAt(1) === 0x2a00) {
      // little endian forma
      return "image/tiff";
    } 
    return null;
  }

  function detectMimeTypeOnLittleEndian(bin) {
    if (bin.charCodeAt(0) === 0x5089 &amp;&amp; bin.charCodeAt(1) === 0x474e) {
      return "image/png";
    } else if (bin.charCodeAt(0) === 0xd8ff &amp;&amp; (0x00ff &amp; bin.charCodeAt(1)) === 0x00ff) {
      return "image/jpeg";
    } else if (bin.charCodeAt(0) === 0x4947 &amp;&amp; bin.charCodeAt(1) === 0x3846 &amp;&amp; bin.charCodeAt(2) === 0x6137) {
      // GIF87a
      return "image/gif";
    } else if (bin.charCodeAt(0) === 0x4947 &amp;&amp; bin.charCodeAt(1) === 0x3846 &amp;&amp; bin.charCodeAt(2) === 0x6139) {
      // GIF89a
      return "image/gif";
    } else if (bin.charCodeAt(0) === 0x4d42) {
      return "image/bmp";
    } else if (bin.charCodeAt(0) === 0x4d4d &amp;&amp; bin.charCodeAt(1) === 0x2a00) {
      // big endian format
      return "image/tiff";
    } else if (bin.charCodeAt(0) === 0x4949 &amp;&amp; bin.charCodeAt(1) === 0x002a) {
      // little endian forma
      return "image/tiff";
    } 
    return null;
  }

  function detectMimeType(bin) {
    var mimeType = detectMimeTypeOnLittleEndian(bin) || detectMimeTypeOnBigEndian(bin);
    return mimeType || "unknown";
  }

  // TODO: there is a typo, should change "mine" =&gt; "mime"
  return {
    detectMineType: detectMimeType
  };
}());


function require() {
  return IDOLFileMagic;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">03/07/16 18:57:59</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">8</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
