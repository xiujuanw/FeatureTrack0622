<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IncidentDAO&quot;" recordid="IncidentDAO">
    <name type="string">IncidentDAO</name>
    <script type="string">var log = lib.BDM_Logger.log( "IncidentDAO" );
var Class = lib.Prototype.getClass();
var dao = {};
var toJSON = lib.JSON2.toJSON;

var ResourceInUseException = lib.BasicDAO.ResourceInUseException;
var RecordModifiedException = lib.BasicDAO.RecordModifiedException;
var ValidationFailedException = lib.BasicDAO.ValidationFailedException;

dao.IncidentDAO = Class.create(lib.BasicDAO.getClass(),{
		initialize:function($super){
			$super("probsummary");
			this.setKeyField("number");
			this.updateCondition = "this.scFile['problem.status'] == 'Closed'";
		},
		
		identifierInfo:function(){
			return "number="+this.scFile["number"];
		},
		
		getKeyFields:function(){
			return ["number","id"];
		},
		
		print:function(){
			log.debug(this.identifierInfo());
		},
		
		findExistedIncident:function(eventid) {//change for QCCR1E110172
			var incidentList = new SCFile("probsummary", SCFILE_READONLY);
			var selectFields = new Array("id","number");
			incidentList.setFields(selectFields);
			
			try {
				var rc = incidentList.doSelect(new QueryCond("id", EQ, eventid))
				if(rc == RC_SUCCESS) {
					return incidentList;
				}
			}catch( ex ) {
				return null;
			}
			return null;
		},
		
		save:function($super,obj){
		    if( obj.category != "incident" )
		    	throw new lib.BasicDAO.ValidationFailedException(this.tableName, "The BDM incident_type (Category field of probsummary) has to be \"incident\" while creating a new incident in SM.");
		    		    
		    var externalProcessRefArray = obj["external.process.reference"];
		    if(externalProcessRefArray &amp;&amp; externalProcessRefArray[0] 
		    	&amp;&amp; lib.SMOMi.isRefBelongsToOMi(externalProcessRefArray[0])) {
		    	
		    	var eventid = lib.SMOMi.getOmiEventID(externalProcessRefArray[0]);//change for QCCR1E110172
                var existedIncidents = this.findExistedIncident(eventid);
		    	if (existedIncidents) {
		    		if (existedIncidents instanceof Array) {
		    			existedIncidents = existedIncidents[0];
		    		}
		    		this.setFieldValue('id', existedIncidents.id);
        			this.setFieldValue('number', existedIncidents.number);
        			obj.id = existedIncidents.id;
        			obj.number = existedIncidents.number;
        			return RC_SUCCESS;
		    	}
		    	//change for QCCR1E110172
		    	if (eventid) {
                     obj.id = eventid;
                }
		    }
		    
		    if (obj.id == null) {
                obj.id = lib.UUID.generateUUID();
            }
		    
		    return $super(obj);
		},
		
		/**
		@Override
		*/
		findAndUpdate:function( $super, objFind, objUpdate, appendFields ){
			var find=this.search(objFind);
			if (this.isUpdatable()) return;
			
			var isClosed = this.getFieldValue("problem.status") == "Closed";
			if((!isClosed) &amp;&amp; objUpdate["problem.status"] == "Closed"){
				log.debug("findAndUpdate() To close incident");
				this.doClose(objUpdate);
			}else if(objUpdate["problem.status"] == "Resolved"){
				if (system.functions.exists("current.phase", this.scFile) &amp;&amp; this.scFile["current.phase"]!=null) {
				     // with PD(Incident), do update
				    $super(objFind,objUpdate,appendFields);
				} else { // without PD(Incident), do resolve
				    log.debug("findAndUpdate() To resolve incident");
				    this.doResolve(objUpdate);
				}
			}
			else{
				$super(objFind,objUpdate,appendFields);
			}
		},
		doResolve:function(objUpdate, action, appendFields ){
			var isResolved = this.getFieldValue("problem.status") == "Resolved";
			for(var f in objUpdate){
				if(log.isDebug("doResolve"))
					log.debug("store field:"+f+" "+this.scFile[f]+" value = "+toJSON(objUpdate[f])+" type="+typeof(objUpdate[f]));
				if( this.scFile[f]!=null &amp;&amp; this.scFile[f].getType &amp;&amp; this.scFile[f].getType()=="ARRAY"){
					if( !objUpdate[f] instanceof Array){
						this.scFile[f].appendFieldValue([objUpdate[f]]);
					}
					else if(appendFields!=null &amp;&amp; f in appendFields){
						this.appendFieldValue(f,objUpdate[f]);
					}else{
						this.setFieldValue(f,objUpdate[f]);
					}
				}else{
					this.setFieldValue(f,objUpdate[f]);
				}
			}
			
			if(!isResolved){
				var rc = this.scFile.doAction("resolvesave");
				if(rc == RC_SUCCESS){
					
				}else{
					if(rc == RC_VALIDATION_FAILED ){
					throw new ValidationFailedException(this.tableName,"failed to resolve incident "+this.scFile[this.getKeyField()]);
					}
					else if(rc == RC_NOT_AUTHORIZED){
					throw new AuthorizationException(this.tableName,"close");
					}else if(rc == RC_MODIFIED ){
						var msg = RCtoString(rc);
						log.info(msg);
						throw new RecordModifiedException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
					}else if(rc == RC_CANT_HAVE ){
						var msg = RCtoString(rc);
						log.info(msg);
						throw new ResourceInUseException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
					}
					else
						throw new Error("DAO error code="+RCtoString(rc));
				}
			}else{
				log.info("The incident "+ this.getFieldValue("number") + " is already resolved, but it possibly failed to set status field last time, so try again");
			}
			var isStatusCorrect = this.getFieldValue("status") == "updated";
			// fixed: a Resolved incident is still shown with "Closed" status in UI
			if(isStatusCorrect){
				log.debug("status of resovled incident is correct " + this.getFieldValue(this.getKeyField()));
			}else{
				this.setFieldValue("status", "updated");
				var G_bg_activity_text_bak = vars.$G_bg_activity_text;
				var G_bg_activity_type_bak = vars.$G_bg_activity_type;
				vars.$G_bg_activity_text = null;
				vars.$G_bg_activity_type = null;
				vars.$pmc_actions = ["Resolved by BDM"];
				rc = this.scFile.doAction("save");
				vars.$G_bg_activity_text = G_bg_activity_text_bak;
				vars.$G_bg_activity_type = G_bg_activity_type_bak;
				if(rc == RC_SUCCESS){
					return true;
				}else{
					if(rc == RC_VALIDATION_FAILED ){
					throw new ValidationFailedException(this.tableName,"failed to resolve incident "+this.scFile[this.getKeyField()]);
					}
					else if(rc == RC_NOT_AUTHORIZED){
					throw new AuthorizationException(this.tableName,"close");
					}else if(rc == RC_MODIFIED ){
						var msg = RCtoString(rc);
						log.info(msg);
						throw new RecordModifiedException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
					}else if(rc == RC_CANT_HAVE ){
						var msg = RCtoString(rc);
						log.info(msg);
						throw new ResourceInUseException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
					}
					throw new Error("DAO error code="+RCtoString(rc));
				}
			}
		},
		doClose:function( objUpdate, action, appendFields ){
			
			for(var f in objUpdate){
				if(log.isDebug("doClose"))
					log.debug("store field:"+f+" "+this.scFile[f]+" value = "+toJSON(objUpdate[f])+" type="+typeof(objUpdate[f]));
				if( this.scFile[f]!=null &amp;&amp; this.scFile[f].getType &amp;&amp; this.scFile[f].getType()=="ARRAY"){
					if( !objUpdate[f] instanceof Array){
						this.scFile[f].appendFieldValue([objUpdate[f]]);
					}
					else if(appendFields!=null &amp;&amp; f in appendFields){
						this.appendFieldValue(f,objUpdate[f]);
					}else{
						this.setFieldValue(f,objUpdate[f]);
					}
				}else{
					this.setFieldValue(f,objUpdate[f]);
				}
			}
			if(objUpdate.resolution == null){
				this.appendFieldValue("resolution",["BDM client request"]);
				
			}
			if(objUpdate["resolution.code"] == null){
				this.setFieldValue("resolution.code",'Out of Scope');
			}
			vars.$G_bg_activity_text = "Updated by BDM";
			vars.$G_bg_activity_type = "external";
			vars.$pmc_actions = ["Closed by BDM"];
			var rc = null;
			if (system.functions.exists("current.phase", this.scFile) &amp;&amp; this.scFile["current.phase"]!=null) {
			    // with PD(Incident), do back end WF transition close
				vars.$bypass_failed_validation = true;
				
				rc = this.scFile.doAction("_wfE:event.close");
			} else { // without PD(Incident), do close
				rc = this.scFile.doAction("close");
			}
			if(rc == RC_SUCCESS){
				return true;
			}else{
			    if(rc == RC_VALIDATION_FAILED ){
				throw new ValidationFailedException(this.tableName,"failed to close incident "+this.scFile[this.getKeyField()]);
			    }
			    else if(rc == RC_NOT_AUTHORIZED){
				throw new AuthorizationException(this.tableName,"close");
			    }else if(rc == RC_MODIFIED ){
			    	var msg = RCtoString(rc);
			    	log.info(msg);
			    	throw new RecordModifiedException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
			    }else if(rc == RC_CANT_HAVE ){
			    	var msg = RCtoString(rc);
			    	log.info(msg);
			    	throw new ResourceInUseException(this.tableName, this.getFieldValue(this.getKeyField()), msg);
			    }
			    throw new Error("DAO error code="+RCtoString(rc));
			}
		}
}
);

function getClass(){
	return dao.IncidentDAO;
}</script>
    <package type="string">BDM</package>
    <sysmodtime type="dateTime">01/06/20 02:50:52</sysmodtime>
    <sysmoduser type="string">zhuwenying</sysmoduser>
    <sysmodcount type="decimal">45</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
