<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="ScriptLibrary">
  <record id="name=&quot;IDOLKMQueryMyCollection&quot;" recordid="IDOLKMQueryMyCollection">
    <name type="string">IDOLKMQueryMyCollection</name>
    <script type="string">var _ = lib.Underscore.require(),
    IDOLCommon = lib.IDOLCommon.require(),
    IDOLKMFieldMapping = lib.IDOLKMFieldMapping.require(),
    IDOLQueryEvaluator = lib.IDOLQueryEvaluator.require(),
    IDOLKMQueryQuickSearch = lib.IDOLKMQueryQuickSearch.require();

var IDOLKMQueryMyCollection = (function() {
  function KMQueryMyCollection(fKMQuery) {
    IDOLKMQueryQuickSearch.apply(this, arguments);
  }

  function F() {}
  F.prototype = IDOLKMQueryQuickSearch.prototype;

  KMQueryMyCollection.prototype = new F();

  KMQueryMyCollection.prototype.constructor = KMQueryMyCollection;

  // Only pick 'Knowledge Library' as my collection
  KMQueryMyCollection.prototype.getSelectedLibraries = function() {
    var libraries = this.getAvailableLibraries();
    var selectedLibs = _.filter(libraries, function(kmlib) {
      return kmlib.kbtype === 'sclib' &amp;&amp; kmlib.sclibtablename === 'kmdocument';
    });
    this.getSelectedLibraries = function() { return selectedLibs; };
    return selectedLibs;
  };

  KMQueryMyCollection.prototype._generateKMQuerySQL = function() {
    var name = funcs.operator();
    var inboxCriteria = lib.inboxFilter.getFilterQuery(name);
    var sql = '(inbox.type="kmdocument" and inbox.class="classRecord") ' + inboxCriteria;

    var inbox = new SCFile('inbox', SCFILE_READONLY);
    inbox.setFields(['normalized.query']);

    var rc = inbox.doSelect(sql), filters = [];
    while (rc === RC_SUCCESS) {
      filters.push(inbox['normalized.query']);
      rc = inbox.getNext();
    }
    return IDOLCommon.compositeCriteria(filters, ' OR ');
  };

  // TODO: may cache the generated query string
  // since my collection doesn't change freqently
  KMQueryMyCollection.prototype.perLibAdHocCriteria = function(kmlib) {
    if (kmlib.kbtype === 'sclib' &amp;&amp; kmlib.sclibtablename === 'kmdocument') {
      var fieldMappingStrategy = function(fieldname) {
        return IDOLKMFieldMapping.mappingIDOLField(fieldname, kmlib.kbname);
      };
      var sql = this._generateKMQuerySQL() || false;
      var ast = parseQuery(sql);
      return IDOLQueryEvaluator.convertToIDOLQuery(ast, null, fieldMappingStrategy);
    }
  };

  return KMQueryMyCollection;
}());

function require() {
  return IDOLKMQueryMyCollection;
}</script>
    <package type="string">IDOL</package>
    <sysmodtime type="dateTime">07/02/15 07:43:24</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">25</sysmodcount>
    <prgnsystem NullValue="1" type="boolean"/>
    <sysrestricted NullValue="1" type="boolean"/>
  </record>
</recordset>
