<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="wizard">
  <record id="name=&quot;RuleSet.validateRange_json&quot;" recordid="RuleSet.validateRange_json">
    <name type="string">RuleSet.validateRange_json</name>
    <file.selection type="string">passed</file.selection>
    <create.record.filename NullValue="1" type="string"/>
    <select.record.filename NullValue="1" type="string"/>
    <select.query NullValue="1" type="string"/>
    <resolve.variables NullValue="1" type="boolean"/>
    <wizard.type type="string">input</wizard.type>
    <wizard.variables sctype="array">
      <wizard.variables sctype="string">$L.tablename</wizard.variables>
    </wizard.variables>
    <initial.process NullValue="1" type="string"/>
    <init.expressions sctype="array">
      <init.expressions sctype="operator">cleanup($fieldName);cleanup($operator);cleanup($compareField1);cleanup($compareField2);cleanup($rangeType);cleanup($not)</init.expressions>
      <init.expressions sctype="operator">cleanup($value1);cleanup($value2)</init.expressions>
      <init.expressions sctype="operator">cleanup($fieldsNameList);cleanup($fieldsCaptionList)</init.expressions>
      <init.expressions sctype="operator">cleanup($xmlString);cleanup($messageType)</init.expressions>
      <init.expressions sctype="operator">$L.ruleName=ruleDesc in $L.file</init.expressions>
      <init.expressions sctype="operator">if null(ruleDesc in $L.file) then (ruleDesc in $L.file="Validate &lt;field&gt; against a range of text or numbers")</init.expressions>
      <init.expressions sctype="operator">if (type(tablename in $L.file)=8) then ($L.tablename=1 in tablename in $L.file) else ($L.tablename=tablename in $L.file)</init.expressions>
      <init.expressions sctype="operator">if (not  (null(conditionXML in $L.file))) then ($xmlString=nullsub($xmlString, conditionXML in $L.file)) else cleanup($xmlString)</init.expressions>
    </init.expressions>
    <run.expressions NullValue="1" type="boolean"/>
    <expressions sctype="array">
      <expressions sctype="operator">$L.fieldName=$fieldName;$L.rangeType=$rangeType;$L.operator=$operator;$L.not=$not</expressions>
      <expressions sctype="operator">$L.compareField1=$compareField1;$L.compareField2=$compareField2</expressions>
      <expressions sctype="operator">$L.value1=$value1;$L.value2=$value2</expressions>
      <expressions sctype="operator">$messageType=nullsub($messageType, "pop-up");$L.messageType=$messageType</expressions>
      <expressions sctype="string"/>
      <expressions sctype="operator">$tempRD="Validate \""+$fieldName+"\" against a range of text or numbers"</expressions>
      <expressions sctype="operator">if (not  (null($fieldName)) and null($L.ruleName) or null(ruleDesc in $L.file)) then (ruleDesc in $L.file=$tempRD)</expressions>
    </expressions>
    <run.process NullValue="1" type="boolean"/>
    <process.name NullValue="1" type="string"/>
    <run.format.control NullValue="1" type="boolean"/>
    <format.control type="string">RuleSet.validateRange</format.control>
    <format.control.type type="string">update</format.control.type>
    <bad.validation.action type="string">return</bad.validation.action>
    <display.when.complete NullValue="1" type="boolean"/>
    <display.mode NullValue="1" type="string"/>
    <allow.finish NullValue="1" type="boolean"/>
    <restart.condition NullValue="1" type="boolean"/>
    <next.wizard NullValue="1" sctype="array">
      <next.wizard NullValue="1" type="string"/>
    </next.wizard>
    <next.wizard.cond NullValue="1" sctype="array">
      <next.wizard.cond NullValue="1" type="boolean"/>
    </next.wizard.cond>
    <link.record NullValue="1" type="string"/>
    <prompt type="string">scmsg(59,"ruleset")</prompt>
    <message NullValue="1" sctype="array">
      <message NullValue="1" type="string"/>
    </message>
    <message.cond NullValue="1" sctype="array">
      <message.cond NullValue="1" type="boolean"/>
    </message.cond>
    <message.type NullValue="1" sctype="array">
      <message.type NullValue="1" type="string"/>
    </message.type>
    <sub.format type="string">RuleSet.validateRange</sub.format>
    <use.file.as.selection NullValue="1" type="boolean"/>
    <query.for.records NullValue="1" type="boolean"/>
    <query.for.records.filename NullValue="1" type="string"/>
    <query.for.records.query NullValue="1" type="string"/>
    <title type="string">scmsg(58,"ruleset")</title>
    <select.no.records NullValue="1" type="string"/>
    <bitmap NullValue="1" type="string"/>
    <perform.action.on type="string">file</perform.action.on>
    <reset.to.selections NullValue="1" type="boolean"/>
    <window.title type="string">scmsg(58,"ruleset")</window.title>
    <display.screen type="string">RuleSetWizard.condition</display.screen>
    <mult.field.name NullValue="1" type="string"/>
    <message.level NullValue="1" sctype="array">
      <message.level NullValue="1" type="decimal"/>
    </message.level>
    <start NullValue="1" type="boolean"/>
    <usage NullValue="1" sctype="array">
      <usage NullValue="1" type="string"/>
    </usage>
    <query.for.records.sort NullValue="1" sctype="array">
      <query.for.records.sort NullValue="1" type="string"/>
    </query.for.records.sort>
    <allow.skip NullValue="1" type="boolean"/>
    <query.select.one.record NullValue="1" type="string"/>
    <comments NullValue="1" sctype="array">
      <comments NullValue="1" type="string"/>
    </comments>
    <query.select.no.records NullValue="1" type="string"/>
    <query.no.records.msg NullValue="1" type="string"/>
    <brief.description type="string">validate field by range</brief.description>
    <cancel.expressions NullValue="1" sctype="array">
      <cancel.expressions NullValue="1" type="expression"/>
    </cancel.expressions>
    <global.lists NullValue="1" sctype="array">
      <global.lists NullValue="1" type="string"/>
    </global.lists>
    <javascript.actions type="string">lib.RuleWizardHelpers.populateValidateRangeRuleJSON();</javascript.actions>
    <javascript.init type="string">vars.$messageType = "pop-up";
        vars.$rangeType = "Field";
        var jsonString = vars.$L_file.ruleJSON;
        if (null == jsonString || "" == jsonString) { // keep backward compatibility to use rule XMLvar xmlString;
            var xmlString;
            xmlString = vars.$L_file.ruleXML;

            if (xmlString == null || xmlString == "") {
                xmlString = "&lt;validateRange&gt;&lt;/messageType&gt;&lt;/fieldName&gt;&lt;/comparison&gt;&lt;/rangeType&gt;&lt;/compareField&gt;&lt;/value&gt;&lt;/validateRange&gt;";
            }


            var xml = new XML();
            xml.setContent(xmlString);

            var messageType = lib.xmlHelpers.getElement(xml, "messageType", null);
            var fieldName = lib.xmlHelpers.getElement(xml, "fieldName", null);
            var comparison = lib.xmlHelpers.getElement(xml, "comparison", null);
            var rangeType = lib.xmlHelpers.getElement(xml, "rangeType", null);
            var compareField = lib.xmlHelpers.getElement(xml, "compareField", null);
            var value = lib.xmlHelpers.getElement(xml, "value", null);


            if (fieldName != null) {
                vars.$messageType = messageType.getValue();
                vars.$fieldName = fieldName.getValue();
                vars.$rangeType = rangeType.getValue();

                var not = comparison.getFirstChildElement();
                vars.$not = not.getValue();
                var operator = not.getNextSiblingElement();
                vars.$operator = operator.getValue();

                var compareField1 = compareField.getFirstChildElement();
                vars.$compareField1 = compareField1.getValue();

                var compareField2 = compareField1.getNextSiblingElement();
                vars.$compareField2 = compareField2.getValue();

                var value1 = value.getFirstChildElement();
                vars.$value1 = value1.getValue();
                var value2 = value1.getNextSiblingElement();
                vars.$value2 = value2.getValue();
            }
        } else {
            lib.RuleWizardHelpers.loadValidateRangeRuleFromJson(vars.$L_file.ruleJSON);
        }

        lib.RuleWizardHelpers.populateTextNumFieldsList();</javascript.init>
    <javascript.cancel NullValue="1" type="string"/>
    <disable.next.previous NullValue="1" type="boolean"/>
    <sysmodtime type="dateTime">01/07/15 17:46:01</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">4</sysmodcount>
    <disable.next NullValue="1" type="boolean"/>
    <reset.current.file NullValue="1" type="boolean"/>
    <disable.previous NullValue="1" type="boolean"/>
    <formName type="string">wizard.okonly</formName>
    <noPromptOnCancel type="boolean">false</noPromptOnCancel>
    <prev.wizard NullValue="1" sctype="array">
      <prev.wizard NullValue="1" type="string"/>
    </prev.wizard>
    <prev.wizard.cond NullValue="1" sctype="array">
      <prev.wizard.cond NullValue="1" type="boolean"/>
    </prev.wizard.cond>
    <previous.cond NullValue="1" type="boolean"/>
  </record>
</recordset>
