<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="wizard">
  <record id="name=&quot;RuleSet.validateDate_json&quot;" recordid="RuleSet.validateDate_json">
    <name type="string">RuleSet.validateDate_json</name>
    <file.selection type="string">passed</file.selection>
    <create.record.filename NullValue="1" type="string"/>
    <select.record.filename NullValue="1" type="string"/>
    <select.query NullValue="1" type="string"/>
    <resolve.variables NullValue="1" type="boolean"/>
    <wizard.type type="string">input</wizard.type>
    <wizard.variables sctype="array">
      <wizard.variables sctype="string">$L.tablename</wizard.variables>
    </wizard.variables>
    <initial.process NullValue="1" type="string"/>
    <init.expressions sctype="array">
      <init.expressions sctype="operator">cleanup($fieldName);cleanup($operator);cleanup($compareField1);cleanup($compareField2);cleanup($rangeType);cleanup($not)</init.expressions>
      <init.expressions sctype="string">cleanup($offset1);cleanup($offset2);</init.expressions>
      <init.expressions sctype="operator">cleanup($daysValue1);cleanup($hoursValue1);cleanup($minutesValue1)</init.expressions>
      <init.expressions sctype="operator">cleanup($daysValue2);cleanup($hoursValue2);cleanup($minutesValue2)</init.expressions>
      <init.expressions sctype="operator">cleanup($dateValue1);cleanup($dateValue2)</init.expressions>
      <init.expressions sctype="operator">cleanup($fieldsNameList);cleanup($fieldsCaptionList);cleanup($fieldsNameList2);cleanup($fieldsCaptionList2)</init.expressions>
      <init.expressions sctype="operator">cleanup($xmlString);cleanup($messageType)</init.expressions>
      <init.expressions sctype="operator">$L.ruleName=ruleDesc in $L.file</init.expressions>
      <init.expressions sctype="operator">if null(ruleDesc in $L.file) then (ruleDesc in $L.file="Validate date: &lt;field&gt;")</init.expressions>
      <init.expressions sctype="operator">if (type(tablename in $L.file)=8) then ($L.tablename=1 in tablename in $L.file) else ($L.tablename=tablename in $L.file)</init.expressions>
      <init.expressions sctype="operator">if (not  (null(conditionXML in $L.file))) then ($xmlString=nullsub($xmlString, conditionXML in $L.file)) else cleanup($xmlString)</init.expressions>
    </init.expressions>
    <run.expressions NullValue="1" type="boolean"/>
    <expressions sctype="array">
      <expressions sctype="operator">$L.fieldName=$fieldName;$L.rangeType=$rangeType;$L.operator=$operator;$L.not=$not</expressions>
      <expressions sctype="operator">$L.compareField1=$compareField1;$L.compareField2=$compareField2;$L.offset1=$offset1;$L.offset2=$offset2;$L.daysValue1=$daysValue1;$L.hoursValue1=$hoursValue1;$L.minutesValue1=$minutesValue1</expressions>
      <expressions sctype="operator">$L.daysValue2=$daysValue2;$L.hoursValue2=$hoursValue2;$L.minutesValue2=$minutesValue2</expressions>
      <expressions sctype="operator">$L.dateValue1=$dateValue1;$L.dateValue2=$dateValue2</expressions>
      <expressions sctype="operator">$messageType=nullsub($messageType, "pop-up");$L.messageType=$messageType</expressions>
      <expressions sctype="string"/>
      <expressions sctype="operator">$tempRD="Validate date: "+$fieldName</expressions>
      <expressions sctype="operator">if (not  (null($fieldName)) and null($L.ruleName) or null(ruleDesc in $L.file)) then (ruleDesc in $L.file=$tempRD)</expressions>
    </expressions>
    <run.process NullValue="1" type="boolean"/>
    <process.name NullValue="1" type="string"/>
    <run.format.control NullValue="1" type="boolean"/>
    <format.control type="string">RuleSet.validateDate</format.control>
    <format.control.type type="string">add</format.control.type>
    <bad.validation.action type="string">return</bad.validation.action>
    <display.when.complete NullValue="1" type="boolean"/>
    <display.mode NullValue="1" type="string"/>
    <allow.finish NullValue="1" type="boolean"/>
    <restart.condition NullValue="1" type="boolean"/>
    <next.wizard NullValue="1" sctype="array">
      <next.wizard NullValue="1" type="string"/>
    </next.wizard>
    <next.wizard.cond NullValue="1" sctype="array">
      <next.wizard.cond NullValue="1" type="boolean"/>
    </next.wizard.cond>
    <link.record NullValue="1" type="string"/>
    <prompt type="string">scmsg(45,"ruleset")</prompt>
    <message NullValue="1" sctype="array">
      <message NullValue="1" type="string"/>
    </message>
    <message.cond NullValue="1" sctype="array">
      <message.cond NullValue="1" type="boolean"/>
    </message.cond>
    <message.type NullValue="1" sctype="array">
      <message.type NullValue="1" type="string"/>
    </message.type>
    <sub.format type="string">RuleSet.validateDate</sub.format>
    <use.file.as.selection NullValue="1" type="boolean"/>
    <query.for.records NullValue="1" type="boolean"/>
    <query.for.records.filename NullValue="1" type="string"/>
    <query.for.records.query NullValue="1" type="string"/>
    <title type="string">scmsg(44,"ruleset")</title>
    <select.no.records NullValue="1" type="string"/>
    <bitmap NullValue="1" type="string"/>
    <perform.action.on type="string">file</perform.action.on>
    <reset.to.selections NullValue="1" type="boolean"/>
    <window.title type="string">scmsg(44,"ruleset")</window.title>
    <display.screen type="string">RuleSetWizard.condition</display.screen>
    <mult.field.name NullValue="1" type="string"/>
    <message.level NullValue="1" sctype="array">
      <message.level NullValue="1" type="decimal"/>
    </message.level>
    <start NullValue="1" type="boolean"/>
    <usage NullValue="1" sctype="array">
      <usage NullValue="1" type="string"/>
    </usage>
    <query.for.records.sort NullValue="1" sctype="array">
      <query.for.records.sort NullValue="1" type="string"/>
    </query.for.records.sort>
    <allow.skip NullValue="1" type="boolean"/>
    <query.select.one.record NullValue="1" type="string"/>
    <comments NullValue="1" sctype="array">
      <comments NullValue="1" type="string"/>
    </comments>
    <query.select.no.records NullValue="1" type="string"/>
    <query.no.records.msg NullValue="1" type="string"/>
    <brief.description type="string">Validate a date field against a date range</brief.description>
    <cancel.expressions NullValue="1" sctype="array">
      <cancel.expressions NullValue="1" type="expression"/>
    </cancel.expressions>
    <global.lists NullValue="1" sctype="array">
      <global.lists NullValue="1" type="string"/>
    </global.lists>
    <javascript.actions type="string">var jsonObj = {};

jsonObj.type = "validateDate";

jsonObj.messageType = vars.$L_messageType ;

jsonObj.fieldName = vars.$L_fieldName ;

jsonObj.rangeType = vars.$L_rangeType ;

jsonObj.comparison = comparison = {};
comparison.not = vars.$L_not;
comparison.operator = vars.$L_operator;

jsonObj.compareField = compareField = {};

if(vars.$L_rangeType=="Field")
{
 if(vars.$L_compareField1!=null) compareField.cField1 = vars.$L_compareField1; 
 vars.$L_offset1=system.functions.nullsub(vars.$L_offset1,"+");

 if(vars.$L_offset1!=null) compareField.offset1 = vars.$L_offset1;
  
 vars.$L_daysValue1=system.functions.nullsub(vars.$L_daysValue1,0);
 vars.$L_hoursValue1=system.functions.nullsub(vars.$L_hoursValue1,0);
 vars.$L_minutesValue1=system.functions.nullsub(vars.$L_minutesValue1,0); 
 if(vars.$L_daysValue1!=null) compareField.days1 = vars.$L_daysValue1; 
 if(vars.$L_hoursValue1!=null) compareField.hours1 = vars.$L_hoursValue1;
 if(vars.$L_minutesValue1!=null) compareField.mins1 = vars.$L_minutesValue1;


   
 if(vars.$L_compareField2!=null &amp;&amp; vars.$L_operator=="Between")
 {
  compareField.cField2 = vars.$L_compareField2; 
  vars.$L_offset2=system.functions.nullsub(vars.$L_offset2,"+");
  if(vars.$L_offset2!=null) compareField.offset2 = vars.$L_offset2; 
  vars.$L_daysValue2=system.functions.nullsub(vars.$L_daysValue2,0);
  vars.$L_hoursValue2=system.functions.nullsub(vars.$L_hoursValue2,0);
  vars.$L_minutesValue2=system.functions.nullsub(vars.$L_minutesValue2,0); 
  if(vars.$L_daysValue2!=null) compareField.days2 = vars.$L_daysValue2; 
  if(vars.$L_hoursValue2!=null) compareField.hours2 = vars.$L_hoursValue2;
  if(vars.$L_minutesValue2!=null) compareField.mins2 = vars.$L_minutesValue2;
    
  }
  else
  {
    compareField.offset2 = "+"; 
    compareField.days2 = 0; 
    compareField.hours2 = 0;
    compareField.mins2 = 0;
  }
} 

jsonObj.dateValue = dateValue = {};
if(vars.$L_rangeType=="Date/Time")
{
  if(vars.$L_dateValue1!=null) dateValue.dateValue1 = vars.$L_dateValue1;
  if(vars.$L_dateValue2!=null &amp;&amp; vars.$L_operator=="Between") dateValue.dateValue2 = vars.$L_dateValue2;
  compareField.offset1="+"; 
  compareField.days1 = 0; 
  compareField.hours1 = 0;
  compareField.mins1 = 0; 
  compareField.offset2 = "+"; 
  compareField.days2 = 0; 
  compareField.hours2 = 0;
  compareField.mins2 = 0;
}


vars.$L_file.type = "validateDate";

vars.$L_file.ruleJSON = rteJSONStringify(jsonObj);
vars.$L_file.ruleXML = null;</javascript.actions>
    <javascript.init type="string">var jsonString = vars.$L_file.ruleJSON;
if(null==jsonString || ""==jsonString) {// keep backward compatibility to use rule XML

	var xmlString;
	xmlString = vars.$L_file.ruleXML;
	
	if ( xmlString == null || xmlString =="" )
		{
			xmlString="&lt;validateDate&gt;&lt;/messageType&gt;&lt;/fieldName&gt;&lt;/comparison&gt;&lt;/rangeType&gt;&lt;/compareField&gt;&lt;/dateValue&gt;&lt;/validateDate&gt;";
		}
	
	
	var xml = new XML();
	xml.setContent( xmlString );
	
	var messageType = lib.xmlHelpers.getElement( xml, "messageType", null );	
	var fieldName = lib.xmlHelpers.getElement( xml, "fieldName", null );
	var comparison = lib.xmlHelpers.getElement( xml, "comparison", null );
	var rangeType = lib.xmlHelpers.getElement( xml, "rangeType", null );
	var compareField = lib.xmlHelpers.getElement( xml, "compareField", null );
	var dateValue = lib.xmlHelpers.getElement( xml, "dateValue", null );
	 
	
	if (fieldName != null) 
	{
	 vars.$messageType = messageType.getValue();
	 vars.$fieldName = fieldName.getValue();
	 vars.$rangeType = rangeType.getValue(); 
	 
	 var not = comparison.getFirstChildElement();
	 vars.$not=not.getValue();
	 var operator=not.getNextSiblingElement();
	 vars.$operator= operator.getValue();
	
	 
	 
	 var compareField1 = compareField.getFirstChildElement();
	 vars.$compareField1=compareField1.getValue();
	 var offset1=compareField1.getNextSiblingElement();
	 vars.$offset1=offset1.getValue();
	 var daysValue1 = offset1.getNextSiblingElement();
	 vars.$daysValue1 = daysValue1.getValue();
	 var hoursValue1 = daysValue1.getNextSiblingElement();
	 vars.$hoursValue1 = hoursValue1.getValue();
	 var minutesValue1 =hoursValue1.getNextSiblingElement();
	 vars.$minutesValue1 =minutesValue1.getValue();
	 var compareField2 =minutesValue1.getNextSiblingElement();
	 vars.$compareField2=compareField2.getValue();
	 var offset2=compareField2.getNextSiblingElement();
	 vars.$offset2=offset2.getValue();
	 var daysValue2 = offset2.getNextSiblingElement();
	 vars.$daysValue2 = daysValue2.getValue();
	 var hoursValue2 = daysValue2.getNextSiblingElement();
	 vars.$hoursValue2 = hoursValue2.getValue();
	 var minutesValue2 =hoursValue2.getNextSiblingElement();
	 vars.$minutesValue2 =minutesValue2.getValue();
	 
	 var dateValue1 =dateValue.getFirstChildElement();
	 vars.$dateValue1 =dateValue1.getValue();
	 var dateValue2 =dateValue1.getNextSiblingElement();
	 vars.$dateValue2 =dateValue2.getValue(); 
	 
	}
	else
	{
		$setDefaultValues();
	}
} else {
	var JSON = system.library.JSON.json();
	var jsonObj = JSON.parse(jsonString);

	var messageType = jsonObj.messageType;	
	var fieldName = jsonObj.fieldName;
	var comparison = jsonObj.comparison;
	var rangeType = jsonObj.rangeType;
	var compareField = jsonObj.compareField;
	var dateValue = jsonObj.dateValue;

	if (fieldName != null) 
	{
	 vars.$messageType = messageType;
	 vars.$fieldName = fieldName;
	 vars.$rangeType = rangeType; 
	 
	 var not = comparison.not;
	 vars.$not=not;
	 var operator=comparison.operator;
	 vars.$operator= operator;

	 var compareField1 = compareField.cField1;
	 vars.$compareField1=compareField1;
	 var offset1=compareField.offset1;
	 vars.$offset1=offset1;
	 var daysValue1 = compareField.days1;
	 vars.$daysValue1 = daysValue1;
	 var hoursValue1 = compareField.hours1;
	 vars.$hoursValue1 = hoursValue1;
	 var minutesValue1 =compareField.mins1;
	 vars.$minutesValue1 =minutesValue1;
	 var compareField2 =compareField.cField2;
	 vars.$compareField2=compareField2;
	 var offset2=compareField.offset2;
	 vars.$offset2=offset2;
	 var daysValue2 = compareField.days2;
	 vars.$daysValue2 = daysValue2;
	 var hoursValue2 = compareField.hours2;
	 vars.$hoursValue2 = hoursValue2;
	 var minutesValue2 =compareField.mins2;
	 vars.$minutesValue2 =minutesValue2;
	 
	 var dateValue1 =dateValue.dateValue1;
	 vars.$dateValue1 =dateValue1;
	 var dateValue2 =dateValue.dateValue2;
	 vars.$dateValue2 =dateValue2; 
	 
	} else {
		$setDefaultValues();
	}
}

lib.RuleWizardHelpers.populateDateFieldsList();

function $setDefaultValues() {
	 vars.$messageType="pop-up";
	 	
	 vars.$rangeType="Field";
	
	 vars.$offset1="+";
	
	 vars.$daysValue1 = 0;
	
	 vars.$hoursValue1 =0;
	
	 vars.$minutesValue1 =0;
	
	
	 vars.$offset2="+"
	
	 vars.$daysValue2 = 0;
	
	 vars.$hoursValue2 = 0;
	
	 vars.$minutesValue2 =0;

}</javascript.init>
    <javascript.cancel NullValue="1" type="string"/>
    <disable.next.previous NullValue="1" type="boolean"/>
    <sysmodtime type="dateTime">01/11/15 00:19:33</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">8</sysmodcount>
    <disable.next NullValue="1" type="boolean"/>
    <reset.current.file NullValue="1" type="boolean"/>
    <disable.previous NullValue="1" type="boolean"/>
    <formName type="string">wizard.okonly</formName>
    <noPromptOnCancel NullValue="1" type="boolean"/>
    <prev.wizard NullValue="1" sctype="array">
      <prev.wizard NullValue="1" type="string"/>
    </prev.wizard>
    <prev.wizard.cond NullValue="1" sctype="array">
      <prev.wizard.cond NullValue="1" type="boolean"/>
    </prev.wizard.cond>
    <previous.cond NullValue="1" type="boolean"/>
  </record>
</recordset>
