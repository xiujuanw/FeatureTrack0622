<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="help">
  <record id="field.name=NULL and file.name=NULL and term=&quot;RAD operators&quot; and format.name=NULL and syslanguage=&quot;en&quot;" recordid="RAD operators -  - en">
    <topic NullValue="1" type="string"/>
    <field.name NullValue="1" type="string"/>
    <file.name NullValue="1" type="string"/>
    <format.name NullValue="1" type="string"/>
    <term type="string">RAD operators</term>
    <keywords NullValue="1" sctype="array">
      <keywords NullValue="1" type="string"/>
    </keywords>
    <brief sctype="array">
      <brief sctype="string">Service Manager uses unary and binary operators.</brief>
    </brief>
    <detail sctype="array">
      <detail sctype="string">ARITHMETIC OPERATORS</detail>
      <detail sctype="string"/>
      <detail sctype="string">An arithmetic operator indicates action Service Manager should perform on the terms in an arithmetic expression.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Service Manager runs Arithmetic operators in the following order: modulus, multiply and divide, add and subtract.</detail>
      <detail sctype="string"/>
      <detail sctype="string">When the operators have equal precedence, they run from left to right.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Modulus [mod]: Determine the remainder of a division operation.</detail>
      <detail sctype="string"/>
      <detail sctype="string">You may specifically want the remainder for a division operation or you may want to generate a circular number sequence within a given range.</detail>
      <detail sctype="string">For example, 5 mod 2 = 1.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Multiplication [*]: Multiply one number by another.</detail>
      <detail sctype="string">For example, 5 * 5 = 25.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Division [/]: Divide one number by another.</detail>
      <detail sctype="string">For example, 300 / 10 = 30.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Addition [+]: Add two numbers together.</detail>
      <detail sctype="string">For example, 49 + 51 = 100.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Subtraction [-]: Subtract one number from another.</detail>
      <detail sctype="string">For example, 40 - 20 = 20.</detail>
      <detail sctype="string"/>
      <detail sctype="string">To distinguish subtraction from unary minus, surround the subtraction operator by blanks.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Exponentiation [**]: Calculate the exponential value of a number.</detail>
      <detail sctype="string">For example, 2**2 = 4.</detail>
      <detail sctype="string"/>
      <detail sctype="string">STRING OPERATORS</detail>
      <detail sctype="string"/>
      <detail sctype="string">There is only one string operator.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Concatenation [+]: Combine two strings together to make one string.</detail>
      <detail sctype="string">For example, "a" + "b" = "ab".</detail>
      <detail sctype="string"/>
      <detail sctype="string">LOGICAL OPERATORS</detail>
      <detail sctype="string"/>
      <detail sctype="string">A logical operator evaluates one or two Boolean expressions and determines whether the expression is true or false, based on the operator.</detail>
      <detail sctype="string"/>
      <detail sctype="string">The logical operators are NOT, AND, and OR.</detail>
      <detail sctype="string"/>
      <detail sctype="string">NOT: Invert the Boolean value of the Boolean expression.</detail>
      <detail sctype="string">If ~ the expression is true, Service Manager returns FALSE.</detail>
      <detail sctype="string">If the expression is false, Service Manager returns TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Some examples include:</detail>
      <detail sctype="string">NOT TRUE = FALSE</detail>
      <detail sctype="string">~ FALSE = TRUE</detail>
      <detail sctype="string">NOT UNKNOWN = UNKNOWN</detail>
      <detail sctype="string"/>
      <detail sctype="string">AND: Evaluate two expressions and return a value of TRUE if and both expressions are true, otherwise return FALSE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Some examples include:</detail>
      <detail sctype="string">TRUE AND TRUE = TRUE</detail>
      <detail sctype="string">TRUE &amp; FALSE = FALSE</detail>
      <detail sctype="string"/>
      <detail sctype="string">OR: Evaluate two expressions and return a value of TRUE if either or both of the expressions are true, otherwise return FALSE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Some examples include:</detail>
      <detail sctype="string">TRUE or FALSE = TRUE</detail>
      <detail sctype="string">FALSE | FALSE = FALSE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">RELATIONAL OPERATORS</detail>
      <detail sctype="string"/>
      <detail sctype="string">A relational operator makes a comparison, then generates logical results based on whether the comparison is true or false.</detail>
      <detail sctype="string"/>
      <detail sctype="string">The UNKNOWN truth-value returns if one or both operands are NULL and different values for the operands could yield different results.</detail>
      <detail sctype="string">For example, IF x=NULL, x = x is TRUE but x = 1 is UNKNOWN.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Less Than [&lt;]: The value of the item on the left is less than the value of the item on the right.</detail>
      <detail sctype="string">For example, 400 &lt; 500 is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Less Than or Equal To [&lt;=]: The value of the item on the left is less than or equal to the value of the item on the right.</detail>
      <detail sctype="string">For example, 400 &lt;= 500 is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Equal To [=]: The value of the item on the left equal to the value of the item on the right.</detail>
      <detail sctype="string">For example, 1 = 1 is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Greater Than [&gt;]: The value of the item on the left is greater than the value of the item on the right.</detail>
      <detail sctype="string">For example, '08/01/83' &gt; '07/20/83' is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Greater Than or Equal To [&gt;=]: The value of the item on the left is greater than or equal to the value of the item on the right.</detail>
      <detail sctype="string">For example, 600 &gt;= 300 is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Not Equal To [~= or =~]: The value of the item on the left is not equal to the value of the item on the right.</detail>
      <detail sctype="string">For example, 1 ~= 2 is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Starts With (Truncated Equals) [#]: The value of first string starts with the value of the second string.</detail>
      <detail sctype="string">For example, "abc"#"ab" is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Does Not Start With (Truncated Not Equal To) [~#]: The value of first string does not start with the value of the second string.</detail>
      <detail sctype="string">For example, "ab"~#"abc" is TRUE.</detail>
      <detail sctype="string"/>
      <detail sctype="string">SPECIAL OPERATORS</detail>
      <detail sctype="string"/>
      <detail sctype="string">Service Manager supports the use of two special operators.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Statement Separator [;]: Separate these statements.</detail>
      <detail sctype="string">For example, $A + $B = $C;$B + $C = $D.</detail>
      <detail sctype="string"/>
      <detail sctype="string">Parentheses [()]: Group these expressions or statements together.</detail>
      <detail sctype="string">For example, 3*($x + $y); IF ($x=1) THEN ($y=$z) ELSE ($y=3).</detail>
    </detail>
    <record.number NullValue="1" type="decimal"/>
    <customer.id NullValue="1" type="string"/>
    <copy.id NullValue="1" type="string"/>
    <old.module NullValue="1" type="string"/>
    <update.time type="dateTime">06/30/06 05:34:06</update.time>
    <required NullValue="1" type="boolean"/>
    <owner NullValue="1" type="string"/>
    <module NullValue="1" sctype="array">
      <module NullValue="1" type="string"/>
    </module>
    <operator type="string">falcon</operator>
    <syslanguage type="string">en</syslanguage>
    <sysmodcount type="decimal">0</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">05/08/07 07:48:14</sysmodtime>
    <pending.review type="boolean">false</pending.review>
  </record>
</recordset>
