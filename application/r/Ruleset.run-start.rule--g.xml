<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;Ruleset.run&quot; and label=&quot;start.rule&quot;" recordid="Ruleset.run - start.rule">
    <application type="string">Ruleset.run</application>
    <label type="label">start.rule</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">check.group</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.rType=""</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.void=rtecall("rinit", $L.err.code, $L.rule, "Rule")</statements>
      <statements sctype="operator">ruleId in $L.rule=1 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">isGroup in $L.rule=2 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">parentGroup in $L.rule=3 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">ruleXML in $L.rule=4 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">ruleDesc in $L.rule=5 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">condition in $L.rule=6 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">conditionDesc in $L.rule=7 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">conditionXML in $L.rule=8 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">level in $L.rule=10 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">type in $L.rule=11 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="operator">ruleJSON in $L.rule=12 in $L.i in rule in $L.ruleset</statements>
      <statements sctype="string"/>
      <statements sctype="operator">ruleXML in $L.rule="&lt;rule&gt;"+ruleXML in $L.rule+"&lt;/rule&gt;"</statements>
      <statements sctype="operator">if (isGroup in $L.rule=true) then ($L.rType="ruleGroup") else ($L.rType=type in $L.rule;if (null($L.rType) or same($L.rType, "")) then if (not  (null(ruleJSON in $L.rule)) and not  (same(ruleJSON in $L.rule, ""))) then ($L.rType=jscall("RuleEngine.getType", ruleJSON in $L.rule, true)) else ($L.rType=jscall("RuleEngine.getType", ruleXML in $L.rule)))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.conditionXML=conditionXML in $L.rule</statements>
      <statements sctype="operator">if (not  (null($L.conditionXML)) and not  (same($L.conditionXML, "")) and (index("\"crosstablefield\"", $L.conditionXML)&gt;0 or index("\"useroption\"", $L.conditionXML)&gt;0)) then ($L.tmp=jscall("Workflow.initVarForCondition", $L.conditionXML))</statements>
      <statements sctype="operator">condition in $L.rule=nullsub(condition in $L.rule, true)</statements>
      <statements sctype="operator">$L.condition=evaluate(parse(str(condition in $L.rule), 4))</statements>
      <statements sctype="operator">$L.groupOk=true</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (parentGroup in $L.rule&gt;0) then ($L.temp=index(parentGroup in $L.rule, $L.groupId);$L.groupOk=$L.temp in $L.groupCond)</statements>
      <statements sctype="operator">$L.condition=nullsub($L.condition, true)</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">22</sysmodcount>
    <sysmoduser type="string">xiongjie</sysmoduser>
    <sysmodtime type="dateTime">01/08/15 11:45:40</sysmodtime>
  </record>
</recordset>
