<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;rca.setup.globals&quot; and label=&quot;send.profile&quot;" recordid="rca.setup.globals - send.profile">
    <application type="string">rca.setup.globals</application>
    <label type="label">send.profile</label>
    <comments type="string">if (not null(contents($L.operator))) then if (index("Root Cause", named.modules in $L.operator)&gt;0) then ($L.named=true) else ($L.named=false)</comments>
    <normal type="label">exit.normal</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="string"/>
      <statements sctype="operator">for $L.i = 1 to lng(denull(expressions in $G.rc.environment)) do ($L.void=evaluate($L.i in expressions in $G.rc.environment))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">tablename in $L.access="rootcause"</statements>
      <statements sctype="operator">name in $L.access=name in $G.rc.environment</statements>
      <statements sctype="operator">new in $L.access=new in $G.rc.environment</statements>
      <statements sctype="operator">view in $L.access=view in $G.rc.environment</statements>
      <statements sctype="operator">close in $L.access=close in $G.rc.environment</statements>
      <statements sctype="operator">update in $L.access=update in $G.rc.environment</statements>
      <statements sctype="operator">workgroups in $L.access=denull(nullsub(assignment.groups in $L.operator, assign.groups in $G.rc.environment))</statements>
      <statements sctype="operator">allowedStatus in $L.access=allowedStatus in $G.rc.environment</statements>
      <statements sctype="operator">if $G.folderEntitlement then ($L.void=jscall("tableAccess.setFolders", $L.access))</statements>
      <statements sctype="operator">if operator()#"linker" then ($L.access=jscall("tableAccess.getSchedulerAdminAccess", "rootcause"))</statements>
      <statements sctype="operator">tableAccess in $G.rc.environment=$L.access</statements>
      <statements sctype="operator">tableAccessProb in $G.rc.environment=$L.access</statements>
      <statements sctype="string"/>
      <statements sctype="operator">tablename in $L.access.task="rootcausetask"</statements>
      <statements sctype="operator">name in $L.access.task=name in $G.rc.environment</statements>
      <statements sctype="operator">new in $L.access.task=pmt.new in $G.rc.environment</statements>
      <statements sctype="operator">view in $L.access.task=pmt.view in $G.rc.environment</statements>
      <statements sctype="operator">close in $L.access.task=pmt.close in $G.rc.environment</statements>
      <statements sctype="operator">update in $L.access.task=pmt.update in $G.rc.environment</statements>
      <statements sctype="operator">workgroups in $L.access.task=denull(nullsub(assignment.groups in $L.operator, pmt.assign.groups in $G.rc.environment))</statements>
      <statements sctype="operator">allowedStatus in $L.access.task=pmt.allowedStatus in $G.rc.environment</statements>
      <statements sctype="operator">if $G.folderEntitlement then ($L.void=jscall("tableAccess.setFolders", $L.access.task))</statements>
      <statements sctype="operator">if operator()#"linker" then ($L.access.task=jscall("tableAccess.getSchedulerAdminAccess", "rootcausetask"))</statements>
      <statements sctype="operator">tableAccessTask in $G.rc.environment=$L.access.task</statements>
      <statements sctype="string"/>
      <statements sctype="operator">tablename in $L.access.ke="knownerror"</statements>
      <statements sctype="operator">name in $L.access.ke=name in $G.rc.environment</statements>
      <statements sctype="operator">new in $L.access.ke=kne.new in $G.rc.environment</statements>
      <statements sctype="operator">view in $L.access.ke=kne.view in $G.rc.environment</statements>
      <statements sctype="operator">close in $L.access.ke=kne.close in $G.rc.environment</statements>
      <statements sctype="operator">update in $L.access.ke=kne.update in $G.rc.environment</statements>
      <statements sctype="operator">workgroups in $L.access.ke=denull(nullsub(assignment.groups in $L.operator, kne.assign.groups in $G.rc.environment))</statements>
      <statements sctype="operator">allowedStatus in $L.access.ke=kne.allowedStatus in $G.rc.environment</statements>
      <statements sctype="operator">if $G.folderEntitlement then ($L.void=jscall("tableAccess.setFolders", $L.access.ke))</statements>
      <statements sctype="operator">if operator()#"linker" then ($L.access.ke=jscall("tableAccess.getSchedulerAdminAccess", "knownerror"))</statements>
      <statements sctype="operator">tableAccessKE in $G.rc.environment=$L.access.ke</statements>
      <statements sctype="string"/>
      <statements sctype="operator">tablename in $L.access.ke.task="knownerrortask"</statements>
      <statements sctype="operator">name in $L.access.ke.task=name in $G.rc.environment</statements>
      <statements sctype="operator">new in $L.access.ke.task=ket.new in $G.rc.environment</statements>
      <statements sctype="operator">view in $L.access.ke.task=ket.view in $G.rc.environment</statements>
      <statements sctype="operator">close in $L.access.ke.task=ket.close in $G.rc.environment</statements>
      <statements sctype="operator">update in $L.access.ke.task=ket.update in $G.rc.environment</statements>
      <statements sctype="operator">workgroups in $L.access.ke.task=denull(nullsub(assignment.groups in $L.operator, ket.assign.groups in $G.rc.environment))</statements>
      <statements sctype="operator">allowedStatus in $L.access.ke.task=ket.allowedStatus in $G.rc.environment</statements>
      <statements sctype="operator">if $G.folderEntitlement then ($L.void=jscall("tableAccess.setFolders", $L.access.ke.task))</statements>
      <statements sctype="operator">if operator()#"linker" then ($L.access.ke.task=jscall("tableAccess.getSchedulerAdminAccess", "knownerrortask"))</statements>
      <statements sctype="operator">tableAccessKETask in $G.rc.environment=$L.access.ke.task</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if nullsub($G.folderEntitlement, false) then ($L.void=mandant(3, name in $G.rc.environment, {"rootcause", "rootcausetask", "knownerror", "knownerrortask"}))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">5</sysmodcount>
    <sysmoduser type="string">zhouanqing</sysmoduser>
    <sysmodtime type="dateTime">07/08/14 19:56:56</sysmodtime>
  </record>
</recordset>
