<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;cc.search&quot; and label=&quot;start&quot;" recordid="cc.search - start">
    <application type="string">cc.search</application>
    <label type="label">start</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">test.valid</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.file=$4</statements>
      <statements sctype="operator">$L.filename=filename($L.file)</statements>
      <statements sctype="operator">$L.object=$5</statements>
      <statements sctype="operator">$L.env=$6</statements>
      <statements sctype="operator">$L.exit="normal"</statements>
      <statements sctype="operator">$L.action="search"</statements>
      <statements sctype="operator">$L.valid=true;$L.invalid.msg=NULL</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.open.after) or not  (null(val($pmc.open.after, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.open.after);$L.invalid.field=nullsub($L.invalid.field, "$pmc.open.after"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.open.before) or not  (null(val($pmc.open.before, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.open.before);$L.invalid.field=nullsub($L.invalid.field, "$pmc.open.before"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.close.after) or not  (null(val($pmc.close.after, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.close.after);$L.invalid.field=nullsub($L.invalid.field, "$pmc.close.after"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.close.before) or not  (null(val($pmc.close.before, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.close.before);$L.invalid.field=nullsub($L.invalid.field, "$pmc.close.before"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.update.after) or not  (null(val($pmc.update.after, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.update.after);$L.invalid.field=nullsub($L.invalid.field, "$pmc.update.after"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($pmc.update.before) or not  (null(val($pmc.update.before, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $pmc.update.before);$L.invalid.field=nullsub($L.invalid.field, "$pmc.update.before"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($expected.res.after) or not  (null(val($expected.res.after, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $expected.res.after);$L.invalid.field=nullsub($L.invalid.field, "$expected.res.after"))</statements>
      <statements sctype="operator">$L.valid=$L.valid and (null($expected.res.before) or not  (null(val($expected.res.before, 3))))</statements>
      <statements sctype="operator">if (not  ($L.valid)) then ($L.invalid.msg=nullsub($L.invalid.msg, $expected.res.before);$L.invalid.field=nullsub($L.invalid.field, "$expected.res.before"))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.sort=$10</statements>
      <statements sctype="operator">if null($L.invalid.msg) then ($L.invalid.msg=scmsg(113, "ocm")) else ($L.invalid.msg=scmsg(114, "us", {$L.invalid.msg}))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.incoming.sql=NULL</statements>
      <statements sctype="operator">if (not  (null($8))) then ($L.incoming.sql=$8)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.advFind.view=1 in $12</statements>
      <statements sctype="operator">$L.filter=2 in $12</statements>
      <statements sctype="operator">$L.config=3 in $12</statements>
      <statements sctype="operator">$L.choices=4 in $12</statements>
      <statements sctype="operator">$L.has.choices=5 in $12</statements>
      <statements sctype="operator">$L.adv.find=nullsub(6 in $12, false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.append.query=jscall("QueryHelper.buildAppendQuery", $L.filename)</statements>
      <statements sctype="operator">$L.inbox.query=$11</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.inbox.view.file=NULL</statements>
      <statements sctype="operator">if (not  (null($13))) then ($L.inbox.view.file=$13)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// no query timeout by default</statements>
      <statements sctype="operator">$L.timeout.needed=false</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">3</sysmodcount>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodtime type="dateTime">06/18/20 19:21:37</sysmodtime>
  </record>
</recordset>
