<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;cc.search&quot; and label=&quot;patch.query&quot;" recordid="cc.search - patch.query">
    <application type="string">cc.search</application>
    <label type="label">patch.query</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">check.advFind</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.site=$pmc.search.site</statements>
      <statements sctype="operator">if (not  (null($L.incoming.sql))) then ($L.sql=jscall("QueryHelper.concatQuery", $L.sql, $L.incoming.sql))</statements>
      <statements sctype="operator">if (not  (null($pmc.open.after))) then if $G.ess then ($L.sql=$L.sql+" and open.time &gt;= '"+str($pmc.open.after)+"'") else ($L.sql=$L.sql+" and open.time &gt; '"+str($pmc.open.after)+"'")</statements>
      <statements sctype="operator">if (not  (null($pmc.open.before))) then if $G.ess then ($L.sql=$L.sql+" and open.time &lt;= '"+str($pmc.open.before)+"'") else ($L.sql=$L.sql+" and open.time &lt; '"+str($pmc.open.before)+"'")</statements>
      <statements sctype="operator">if (not  (null($pmc.close.after))) then if $G.ess then ($L.sql=$L.sql+" and close.time &gt;= '"+str($pmc.close.after)+"'") else ($L.sql=$L.sql+" and close.time &gt; '"+str($pmc.close.after)+"'")</statements>
      <statements sctype="operator">if (not  (null($pmc.close.before))) then if $G.ess then ($L.sql=$L.sql+" and close.time &lt;= '"+str($pmc.close.before)+"'") else ($L.sql=$L.sql+" and close.time &lt; '"+str($pmc.close.before)+"'")</statements>
      <statements sctype="operator">if (not  (null($pmc.update.after))) then ($L.sql=$L.sql+" and update.time &gt; '"+str($pmc.update.after)+"'")</statements>
      <statements sctype="operator">if (not  (null($pmc.update.before))) then ($L.sql=$L.sql+" and update.time &lt; '"+str($pmc.update.before)+"'")</statements>
      <statements sctype="operator">if (not  (null($expected.res.after))) then if $G.ess then ($L.sql=$L.sql+" and expectedResolution &gt;= '"+str($expected.res.after)+"'") else ($L.sql=$L.sql+" and expectedResolution &gt; '"+str($expected.res.after)+"'")</statements>
      <statements sctype="operator">if (not  (null($expected.res.before))) then if $G.ess then ($L.sql=$L.sql+" and expectedResolution &lt;= '"+str($expected.res.before)+"'") else ($L.sql=$L.sql+" and expectedResolution &lt; '"+str($expected.res.before)+"'")</statements>
      <statements sctype="string"/>
      <statements sctype="string"/>
      <statements sctype="operator">if (index($L.inbox.query, $L.sql)=0) then ($L.sql=jscall("QueryHelper.concatQuery", $L.sql, $L.inbox.query))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.adv.sql=$L.sql</statements>
      <statements sctype="operator">if ($L.adv.find=false) then ($L.is.related.query=jscall("viewFunctions.isRelatedObjectQuery", $L.adv.sql);if ($L.is.related.query="true") then ($L.adv.find=true))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">15</sysmodcount>
    <sysmoduser type="string">huangzhi</sysmoduser>
    <sysmodtime type="dateTime">12/06/17 17:44:26</sysmodtime>
  </record>
</recordset>
