<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;macro.build.field.array&quot; and label=&quot;run.evmap&quot;" recordid="macro.build.field.array - run.evmap">
    <application type="string">macro.build.field.array</application>
    <label type="label">run.evmap</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">sort</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">loop</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.data=1 in $L.dummy</statements>
      <statements sctype="operator">$L.idx=1;$L.max=lng(denull($L.data));$L.array={};$L.types={};$L.arrayidx=1</statements>
      <statements sctype="operator">$L.fsttim=true</statements>
      <statements sctype="operator">$L.fldnambfr="";$L.fldnam="";$L.fldtypbfr="";$L.fldtyp="";$L.fldlvlbfr="";$L.fldlvl="";$L.fldidxbfr="";$L.fldidx=""</statements>
      <statements sctype="operator">$L.brkinlvl=false;$L.brkinlvlidxtyp=false</statements>
      <statements sctype="operator">$L.brkinlvlchkara="";$L.brkinidxchkara="";$L.brkintypchkara=""</statements>
      <statements sctype="operator">$L.savnam={};$L.savlvl={};$L.prvtyp="";$L.arrstc=false;$L.arrstclvl=""</statements>
    </statements>
    <cond.input type="operator">$L.idx&lt;=$L.max</cond.input>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions sctype="array">
      <expressions sctype="operator">$L.rem="  Read an entry from the descriptor array, and put the entry in the corresponding input buffer areas  "</expressions>
      <expressions sctype="operator">$L.fldnambfr=1 in $L.idx in $L.data;$L.fldlvlbfr=2 in $L.idx in $L.data;$L.fldidxbfr=3 in $L.idx in $L.data;$L.fldtypbfr=4 in $L.idx in $L.data</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Determine if a break in level has occurred  "</expressions>
      <expressions sctype="operator">if ($L.fldlvlbfr=$L.brkinlvlchkara) then ($L.brkinlvl=false) else ($L.brkinlvl=true)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Determine if a break in level/index/type has occurred (this indicates aliases) "</expressions>
      <expressions sctype="operator">if ($L.fldlvlbfr=$L.brkinlvlchkara and $L.fldidxbfr=$L.brkinidxchkara and $L.fldtypbfr=$L.brkintypchkara) then ($L.brkinlvlidxtyp=false) else ($L.brkinlvlidxtyp=true)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem=" Set the level break check areas for next record "</expressions>
      <expressions sctype="operator">$L.brkinlvlchkara=$L.fldlvlbfr;$L.brkinidxchkara=$L.fldidxbfr;$L.brkintypchkara=$L.fldtypbfr</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem=" Note to myself: total time calculations would be inserted right after this comment "</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Move data from input buffer areas to the process areas  "</expressions>
      <expressions sctype="operator">$L.fldnam=$L.fldnambfr;$L.fldlvl=$L.fldlvlbfr;$L.fldidx=$L.fldidxbfr;$L.fldtyp=$L.fldtypbfr</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Begin mainline detail process  "</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Determine if we are currently processing an array of structures  "</expressions>
      <expressions sctype="operator">$L.rem="  If so, save the level of the structure  "</expressions>
      <expressions sctype="operator">if ($L.arrstc=false) then if ($L.prvtyp=8 and $L.fldtyp=9) then ($L.arrstc=true;$L.arrstclvl=$L.fldlvl)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Determine if the array of structure flag should be reset  "</expressions>
      <expressions sctype="operator">if ($L.arrstc=true) then if ($L.fldlvl&lt;$L.arrstclvl) then ($L.arrstc=false;$L.arrstclvl="")</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  If a break in level has occurred (except for level 0, the descriptor structure) do the following:  "</expressions>
      <expressions sctype="operator">$L.rem="    1) Clear the $L.savnam and $L.savlvl arrays of elements that are of a level equal to or deeper (ie, higher number)  "</expressions>
      <expressions sctype="operator">$L.rem="         than the level that is on the entry that caused the break.  "</expressions>
      <expressions sctype="operator">$L.rem="    2) Additionally, if the entry that caused the break is of type structure (Type=9), append that entry's name and level  "</expressions>
      <expressions sctype="operator">$L.rem="        to the $L.savnam and $L.savlvl arrays, respectively.  "</expressions>
      <expressions sctype="operator">if ($L.brkinlvl=true and $L.fldlvl~=0 and not  (null($L.savlvl))) then ($L.idx2=lng($L.savlvl);while ($L.idx2&gt;0) do (if ($L.idx2 in $L.savlvl&gt;=$L.fldlvl) then ($L.savlvl=delete($L.savlvl, $L.idx2);$L.savnam=delete($L.savnam, $L.idx2));$L.idx2-=1))</expressions>
      <expressions sctype="operator">if ($L.fldlvl~=0 and $L.fldtyp=9) then ($L.idx2=lng($L.savlvl);$L.idx2+=1;$L.idx2 in $L.savnam=$L.fldnam+",";$L.idx2 in $L.savlvl=$L.fldlvl)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Process the field  "</expressions>
      <expressions sctype="operator">$L.rem="  Nothing is done with the following field types:  "</expressions>
      <expressions sctype="operator">$L.rem="    5 (RAD label)  "</expressions>
      <expressions sctype="operator">$L.rem="    6 (File)  "</expressions>
      <expressions sctype="operator">$L.rem="    10 (Operator)  "</expressions>
      <expressions sctype="operator">$L.rem="    11 (Expression  "</expressions>
      <expressions sctype="operator">$L.rem="  However, the other field types are processed (ie, put into the $L.array and $L.types arrays). They are:  "</expressions>
      <expressions sctype="operator">$L.rem="    1 (Number)  "</expressions>
      <expressions sctype="operator">$L.rem="    2 (Character)  "</expressions>
      <expressions sctype="operator">$L.rem="    3 (Date/Time)  "</expressions>
      <expressions sctype="operator">$L.rem="    4 (Logical)  "</expressions>
      <expressions sctype="operator">$L.rem="    8 (Array)  "</expressions>
      <expressions sctype="operator">if (($L.fldtyp=1 or $L.fldtyp=2 or $L.fldtyp=3 or $L.fldtyp=4) and $L.brkinlvlidxtyp=true and $L.arrstc=false) then (if null($L.savnam) then ($L.arrayidx in $L.array=$L.fldnam) else ($L.wrknam="";for $L.idx2 = 1 to lng($L.savnam) do ($L.wrknam=$L.wrknam+$L.idx2 in $L.savnam);$L.arrayidx in $L.array=$L.wrknam+$L.fldnam);if ($L.prvtyp=8) then ($L.string.num="8";$L.string.num+=str($L.fldtyp);$L.arrayidx in $L.types=val($L.string.num, 1)) else ($L.arrayidx in $L.types=$L.fldtyp);$L.arrayidx+=1)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Save the type  "</expressions>
      <expressions sctype="operator">$L.prvtyp=$L.fldtyp</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Set the first-time flag  "</expressions>
      <expressions sctype="operator">if ($L.fsttim=true) then ($L.fsttim=false)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.rem="  Increment the index used to traverse the descriptor array ($L.data)  "</expressions>
      <expressions sctype="operator">$L.idx+=1</expressions>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">5</sysmodcount>
    <sysmoduser type="string">acorvino</sysmoduser>
    <sysmodtime type="dateTime">06/14/07 05:48:37</sysmodtime>
  </record>
</recordset>
