<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;setup.module.licensing&quot; and label=&quot;set.pd.rm.capabilities&quot;" recordid="setup.module.licensing - set.pd.rm.capabilities">
    <application type="string">setup.module.licensing</application>
    <label type="label">set.pd.rm.capabilities</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">check.request.nonpd.in.parallel</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.update.capability=false;$L.license.named=NULL;$L.license.floating=NULL</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (new in $G.request.environment~=false and not  (null(new in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (close in $G.request.environment~=false and not  (null(close in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (update in $G.request.environment~="never" and not  (null(update in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve in $G.request.environment~=false and not  (null(approve in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.mass in $G.request.environment~=false and not  (null(approve.mass in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.override in $G.request.environment~=false and not  (null(approve.override in $G.request.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("tableAccess", $G.request.environment) then ($L.folders=denull(folders in tableAccess in $G.request.environment))</statements>
      <statements sctype="operator">if (nullsub($G.folderEntitlement, false) and lng($L.folders)&gt;0) then for $L.i = 1 to lng($L.folders) do (if (2 in $L.i in $L.folders or 4 in $L.i in $L.folders or 5 in $L.i in $L.folders~="never") then ($L.update.capability=true))</statements>
      <statements sctype="string"/>
      <statements sctype="string"/>
      <statements sctype="string"/>
      <statements sctype="operator">if (new in $G.requestTask.environment~=false and not  (null(new in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (close in $G.requestTask.environment~=false and not  (null(close in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (update in $G.requestTask.environment~="never" and not  (null(update in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve in $G.requestTask.environment~=false and not  (null(approve in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.mass in $G.requestTask.environment~=false and not  (null(approve.mass in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.override in $G.requestTask.environment~=false and not  (null(approve.override in $G.requestTask.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("tableAccess", $G.requestTask.environment) then ($L.folders=denull(folders in tableAccess in $G.requestTask.environment))</statements>
      <statements sctype="operator">if (nullsub($G.folderEntitlement, false) and lng($L.folders)&gt;0) then for $L.i = 1 to lng($L.folders) do (if (2 in $L.i in $L.folders or 4 in $L.i in $L.folders or 5 in $L.i in $L.folders~="never") then ($L.update.capability=true))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">27</sysmodcount>
    <sysmoduser type="string">xiongjie</sysmoduser>
    <sysmodtime type="dateTime">04/02/15 14:54:13</sysmodtime>
  </record>
</recordset>
