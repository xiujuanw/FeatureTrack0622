<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;setup.module.licensing&quot; and label=&quot;set.rml.capabilities&quot;" recordid="setup.module.licensing - set.rml.capabilities">
    <application type="string">setup.module.licensing</application>
    <label type="label">set.rml.capabilities</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">set.rmo.capabilities</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">if (jscall("ProcessDesignerEnablement.isRequestEnabled")~=true) then ($L.update.capability=false;$L.license.named=NULL;$L.license.floating=NULL)</statements>
      <statements sctype="operator">if (all in $G.ocml.environment~=false and not  (null(all in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (calcrsk in $G.ocml.environment~=false and not  (null(calcrsk in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (close in $G.ocml.environment~=false and not  (null(close in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (new.category in $G.ocml.environment~=false and not  (null(new.category in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (new.phase in $G.ocml.environment~=false and not  (null(new.phase in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.close in $G.ocml.environment~=false and not  (null(cfrm.close in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.copy in $G.ocml.environment~=false and not  (null(cfrm.copy in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.end in $G.ocml.environment~=false and not  (null(cfrm.end in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.open in $G.ocml.environment~=false and not  (null(cfrm.open in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.nextphase in $G.ocml.environment~=false and not  (null(cfrm.nextphase in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.reopen in $G.ocml.environment~=false and not  (null(cfrm.reopen in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cfrm.update in $G.ocml.environment~=false and not  (null(cfrm.update in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (cpyopn in $G.ocml.environment~=false and not  (null(cpyopn in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (generate.order in $G.ocml.environment~=false and not  (null(generate.order in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (avail.to.order in $G.ocml.environment~=false and not  (null(avail.to.order in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (open in $G.ocml.environment~=false and not  (null(open in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (post in $G.ocml.environment~=false and not  (null(post in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (reopen in $G.ocml.environment~=false and not  (null(reopen in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (update in $G.ocml.environment~="never" and not  (null(update in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (closed.update in $G.ocml.environment~=false and not  (null(closed.update in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (appr.active in $G.ocml.environment~=false and not  (null(appr.active in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve in $G.ocml.environment~=false and not  (null(approve in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (apprdis in $G.ocml.environment~=false and not  (null(apprdis in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (apprun in $G.ocml.environment~=false and not  (null(apprun in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.mass in $G.ocml.environment~=false and not  (null(approve.mass in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (apprdism in $G.ocml.environment~=false and not  (null(apprdism in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.override in $G.ocml.environment~=false and not  (null(approve.override in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.reeval in $G.ocml.environment~=false and not  (null(approve.reeval in $G.ocml.environment))) then ($L.update.capability=true)</statements>
      <statements sctype="operator">if (approve.reset in $G.ocml.environment~=false and not  (null(approve.reset in $G.ocml.environment))) then ($L.update.capability=true)</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">4</sysmodcount>
    <sysmoduser type="string">xiongjie</sysmoduser>
    <sysmodtime type="dateTime">04/01/15 17:16:02</sysmodtime>
  </record>
</recordset>
