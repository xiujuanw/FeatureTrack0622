<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;svcCat.build.work.file.sub&quot; and label=&quot;set.svc.dependencies&quot;" recordid="svcCat.build.work.file.sub - set.svc.dependencies">
    <application type="string">svcCat.build.work.file.sub</application>
    <label type="label">set.svc.dependencies</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">exit.normal</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">for $L.i = 1 to lng(denull($L.part.groups)) do (if (not  (null($L.i in $L.part.groups))) then ($L.x=$L.i in $L.orig.parts;28 in $L.x in data in $L.work=$L.i in $L.part.groups;32 in $L.x in data in $L.work=$L.i in $L.group.types))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">for $L.i = 1 to lng(denull($L.child.group)) do ($L.real.parent=NULL;$L.pos=0;$L.p=$L.i in $L.parent.group;for $L.x = 1 to lng(denull($L.part.groups)) do (if ($L.x in $L.part.groups=$L.p) then ($L.pos=$L.x;$L.x=lng($L.part.groups)+1;if ($L.pos&gt;0) then ($L.real.parent=$L.pos in $L.orig.parts)));if (not  (null($L.real.parent))) then for $L.x = 1 to lng(denull($L.part.groups)) do (if ($L.x in $L.part.groups=$L.i in $L.child.group) then ($L.temp=$L.x in $L.orig.parts;17 in $L.temp in data in $L.work=$L.real.parent;$L.x=lng($L.part.groups)+1)))</statements>
      <statements sctype="string"/>
      <statements sctype="string"/>
      <statements sctype="operator">for $L.i = 1 to lng(denull(data in $L.work)) do (if (not  (null(17 in $L.i in data in $L.work)) and null(30 in $L.i in data in $L.work)) then ($L.p=17 in $L.i in data in $L.work;if (not  (nullsub(11 in $L.p in data in $L.work, false))) then for $L.x = $L.p to ($L.i - 1) do ($L.last=true;for $L.z = $L.p to ($L.i - 1) do (if (17 in $L.z in data in $L.work=$L.x or 31 in $L.z in data in $L.work=$L.x) then ($L.last=false));if $L.last then (17 in $L.i in data in $L.work=$L.x))))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (not  (null($L.work)) and not  (null(contents($L.work)))) then for $L.i = 1 to lng(data in $L.work) do (if (not  (null(28 in $L.i in data in $L.work)) and (not  (null(30 in $L.i in data in $L.work)) or not  (nullsub(11 in $L.i in data in $L.work, false)))) then (28 in $L.i in data in $L.work=str(30 in $L.i in data in $L.work)+":"+28 in $L.i in data in $L.work))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">15</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">08/04/13 20:09:13</sysmodtime>
  </record>
</recordset>
