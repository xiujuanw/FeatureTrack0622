<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;se.lock.object&quot; and label=&quot;setup.object&quot;" recordid="se.lock.object - setup.object">
    <application type="string">se.lock.object</application>
    <label type="label">setup.object</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">pre.lock</normal>
    <error type="localVar">$3</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="expression"/>
      <statements sctype="operator">$L.unique=nullsub(unique.field in $L.object, {"number"});if (type($L.unique)=8) then ($L.unique=denull($L.unique))</statements>
      <statements sctype="operator">$L.unique.string=str(str(1 in $L.unique) in $L.file);if (lng($L.unique)&gt;1) then for $L.i = 2 to lng($L.unique) do $L.unique.string+=str(str($L.i in $L.unique) in $L.file)</statements>
      <statements sctype="operator">$L.lock.name=str($L.filename+str(nullsub($L.unique.string, str(1 in $L.unique) in $L.file)))</statements>
      <statements sctype="operator">$L.void=rtecall("tag", $L.errcode, $L.lock.name, $L.file)</statements>
      <statements sctype="operator">$5=$L.lock.name</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">$L.sql="";$L.temp=""</statements>
      <statements sctype="operator">if (type($L.unique)=2) then ($L.type=type($L.unique in $L.file);$L.sql=$L.unique+"=\""+$L.unique in $L.file+"\"";if ($L.type=1 or $L.type=4) then ($L.sql=$L.unique+"="+$L.unique in $L.file);if ($L.type=3) then ($L.sql=$L.unique+"='"+$L.unique in $L.file+"'"))</statements>
      <statements sctype="operator">if (type($L.unique)=8) then for $L.i = 1 to lng(denull($L.unique)) do ($L.temp=$L.sql;$L.type=type(str($L.i in $L.unique) in $L.file);$L.sql=$L.i in $L.unique+"=\""+str($L.i in $L.unique) in $L.file+"\"";if ($L.type=1 or $L.type=4) then ($L.sql=$L.i in $L.unique+"="+str($L.i in $L.unique) in $L.file);if ($L.type=3) then ($L.sql=$L.i in $L.unique+"='"+str($L.i in $L.unique) in $L.file+"'");if ($L.i&gt;1) then ($L.sql=$L.temp+" and "+$L.sql))</statements>
      <statements sctype="operator">$L.parent.id={};$L.parent.file={};$L.par.lng=lng(denull(parent.id in $L.object));$L.x=1;$L.parent.locks={}</statements>
      <statements sctype="operator">if ($L.par.lng&gt;0) then for $L.i = 1 to $L.par.lng do (if (not  (null(evaluate(($L.i in parent.id in $L.object) in $L.file)))) then ($L.x in $L.parent.id=evaluate(($L.i in parent.id in $L.object) in $L.file);$L.x in $L.parent.file=$L.i in parent.object in $L.object;$L.x+=1))</statements>
      <statements sctype="operator">$L.lock.parent=nullsub(lock.parent in $L.object, false)</statements>
      <statements sctype="operator">$L.object.name=file.name in $L.object</statements>
      <statements sctype="operator">if ($L.object.name="probsummary") then ($L.object.name="problem")</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">11</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">01/04/06 15:38:10</sysmodtime>
  </record>
</recordset>
