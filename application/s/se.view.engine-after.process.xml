<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;se.view.engine&quot; and label=&quot;after.process&quot;" recordid="se.view.engine - after.process">
    <application type="string">se.view.engine</application>
    <label type="label">after.process</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">after.process.check</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.void=setvariables($L.value.names, $L.values)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">//modify $L.exit from 'normal' to 'added' when add action succeeds, so that later logic goes right such as changing state from open state to view state.</statements>
      <statements sctype="operator">if ($L.mode="add" and ($L.action="save" or $L.action="add") and $L.exit="normal") then ($L.exit="added")</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// rollback the $L.wfPhase and $L.phase if fail</statements>
      <statements sctype="operator">if (($L.exit="bad.val" or $L.exit="badval") and $L.wfMode={"open", "close"}) then if (not  (same(current.phase in $L.file, current.phase in $L.file.save)) or not  (same(current.phase in $L.file, phaseName in $L.wfPhase))) then (current.phase in $L.file=current.phase in $L.file.save;contents($L.wfPhase)=contents($L.wfPhase.save);$L.phase=jscall("Workflow.getNextPhase", $L.file, current.phase in $L.file, $L.object);$L.cat.vars={};$L.cat.var.names={}) else (if (not  (null($L.cat.var.names))) then ($L.xi=index("$L.wfPhase", $L.cat.var.names);if ($L.xi&gt;0) then ($L.wfPhase=$L.xi in $L.cat.vars);$L.xi=index("$L.phase", $L.cat.var.names);if ($L.xi&gt;0) then ($L.phase=$L.xi in $L.cat.vars)))</statements>
      <statements sctype="operator">if (($L.exit="bad.val" or $L.exit="badval") and nullsub($L.wfMode, "")~={"open", "close"} and not  (null($L.cat.var.names))) then ($L.xi=index("$L.wfPhase", $L.cat.var.names);if ($L.xi&gt;0) then ($L.wfPhase=$L.xi in $L.cat.vars);$L.xi=index("$L.phase", $L.cat.var.names);if ($L.xi&gt;0) then ($L.phase=$L.xi in $L.cat.vars))</statements>
      <statements sctype="operator">$L.same=same($L.file, $L.file.save)</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(watch.variables in $L.object)) do (if ($L.i in watch.variables in $L.object)#"$" then if (not  (null(evaluate(parse($L.i in watch.variables in $L.object, 2))))) then ($L.same=false))</statements>
      <statements sctype="operator">$L.process=NULL</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.success=rtecall("getunique", $L.errorcode, $L.record.id, $L.file)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// here is the workaround if the $L.object is called rinit in the Process, then the $L.object is empty value, RTE issue?</statements>
      <statements sctype="operator">if (null($L.object) or null(1 in $L.object)) then ($L.void=rtecall("rinit", $L.return.code, $L.object, "Object");$L.object.query="file.name=\""+(filename($L.file)+"\"");$L.object.flag=rtecall("select", $L.return.code, $L.object, $L.object.query, {}, false))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if null($L.exit.firstsave) then ($L.exit.firstsave=$L.exit)</statements>
      <statements sctype="operator">if null($L.exit.when.done.firstsave) then ($L.exit.when.done.firstsave=$L.exit.when.done)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// refresh $L.wfPhase.save if it is not up-to-date</statements>
      <statements sctype="operator">if ($L.same and not  (null($L.wfPhase)) and not  (null($L.wfPhase.save)) and not  (same(phaseName in $L.wfPhase, phaseName in $L.wfPhase.save))) then ($L.void=rtecall("copycurrent", $L.errcode, $L.wfPhase.save, $L.wfPhase))</statements>
      <statements sctype="operator">if (not  (null($L.wfPhase)) and not  (null($L.phase)) and not  (same(phaseName in $L.wfPhase, name in $L.phase))) then ($L.phase=jscall("Workflow.getNextPhase", $L.file, current.phase in $L.file, $L.object))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">0</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">06/15/21 00:44:38</sysmodtime>
  </record>
</recordset>
