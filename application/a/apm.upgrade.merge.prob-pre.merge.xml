<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;apm.upgrade.merge.prob&quot; and label=&quot;pre.merge&quot;" recordid="apm.upgrade.merge.prob - pre.merge">
    <application type="string">apm.upgrade.merge.prob</application>
    <label type="label">pre.merge</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">merge</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="expression"/>
      <statements sctype="expression"/>
      <statements sctype="expression"/>
      <statements sctype="operator">for $L.i = 1 to lng($L.new) do (if ($L.i in $L.new.structure="header" or $L.i in $L.new.structure="Action" or $L.i in $L.new.structure="middle") then ($L.i in $L.new.structure="descriptor";($L.i in $L.new.level)-=1))</statements>
      <statements sctype="operator">for $L.i = 1 to lng($L.new) do (if (($L.i in $L.new.structure)#"header," or ($L.i in $L.new.structure)#"Action," or ($L.i in $L.new.structure)#"middle,") then ($L.void=strclpl($L.i in $L.new.structure, 7);($L.i in $L.new.level)-=1))</statements>
      <statements sctype="operator">$L.add.fields={};$L.dont.add={}</statements>
      <statements sctype="operator">$L.except.log={}</statements>
      <statements sctype="operator">for $L.i = 2 to lng($L.new) do ($L.add.field=false;$L.x=index($L.i in $L.new.field, $L.old.field);if ($L.x=0) then ($L.add.field=true) else (if ($L.x&gt;0) then ($L.same.structure=false;$L.continue=true;while (not  ($L.same.structure) and $L.continue) do (if same($L.i in $L.new.structure, $L.x in $L.old.structure) then ($L.same.structure=true) else ($L.y=$L.x+1;$L.x=index($L.i in $L.new.field, $L.old.field, $L.y);if ($L.x=0) then ($L.continue=false;$L.add.field=true))));if (not  ($L.add.field)) then ($L.right.level=false;$L.continue=true;while (not  ($L.right.level) and $L.continue) do (if same($L.i in $L.new.level, $L.x in $L.old.level) then ($L.right.level=true) else ($L.y=$L.x+1;$L.x=index($L.i in $L.new.field, $L.old.field, $L.y);if ($L.x=0) then ($L.continue=false;$L.add.field=true)))));if (not  ($L.add.field)) then (if (not  (same($L.i in $L.new.type, $L.x in $L.old.type))) then ($L.except.log=$L.except.log+nullsub({"Dbidct:"+name in $4+", structure:"+$L.i in $L.new.structure+", field:"+$L.i in $L.new.field+" is type "+$L.x in $L.old.type+" -- expected to be type "+$L.i in $L.new.type}, {"bad"});$L.dont.add=$L.dont.add+{$L.i in $L.new.field})) else ($L.temp.alias="";if (not  (null($L.i in $L.new.alias))) then ($L.temp.alias=1 in $L.i in $L.new.alias;if (2 in $L.i in $L.new.alias~={"descriptor", "header", "middle", "Action"}) then ($L.temp.alias=2 in $L.i in $L.new.alias+","+$L.temp.alias));if (index($L.i in $L.new.field, $L.dont.add)=0) then ($L.add.fields=$L.add.fields+{{$L.i in $L.new.field, $L.i in $L.new.structure, $L.i in $L.new.level, $L.i in $L.new.type, $L.temp.alias}})))</statements>
      <statements sctype="operator">$L.possible.fields=$L.add.fields;$L.add.fields={}</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">for $L.i = 1 to lng($L.possible.fields) do (if (index(1 in $L.i in $L.possible.fields, $L.except)=0) then ($L.lng=lng($L.add.fields);$L.pos=$L.lng+1;$L.pos in $L.add.fields=$L.i in $L.possible.fields))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">10</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">08/09/05 10:17:08</sysmodtime>
  </record>
</recordset>
