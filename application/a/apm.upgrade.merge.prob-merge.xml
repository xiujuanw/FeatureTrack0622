<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;apm.upgrade.merge.prob&quot; and label=&quot;merge&quot;" recordid="apm.upgrade.merge.prob - merge">
    <application type="string">apm.upgrade.merge.prob</application>
    <label type="label">merge</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">init.prob.dbdict</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="expression"/>
      <statements sctype="operator">for $L.i = 1 to lng(denull($L.add.fields)) do (if (null(5 in $L.i in $L.add.fields) or same(5 in $L.i in $L.add.fields, "")) then ($L.temp=2 in $L.i in $L.add.fields;$L.z=1;$L.struct.array={};if ($L.temp~="descriptor") then (while (index(",", $L.temp)&gt;0) do ($L.y=index(",", $L.temp);$L.a=$L.y - 1;$L.y+=1;$L.struct.array=$L.struct.array+{substr($L.temp, 1, $L.a)};$L.temp=substr($L.temp, $L.y, lng($L.temp)));$L.struct.array=$L.struct.array+{$L.temp};for $L.lng = 1 to lng($L.struct.array) do ($L.current=$L.z+1;$L.z=max(index($L.lng in $L.struct.array, $L.old.field, $L.current), $L.z)));$L.debug2={$L.i, $L.x, $L.m};$L.z=max($L.z, 1);$L.x=index($L.temp, $L.old.field, $L.z);$L.level=val($L.x in $L.old.level)+1;$L.m=$L.x+1;$L.m.index=0;while (val($L.m in $L.old.level)&gt;=$L.level) do (if (val($L.m in $L.old.level)=$L.level) then ($L.m.index=val(3 in $L.m in $L.old));$L.m+=1);$L.n=$L.m - 1;$L.m.index+=1;$L.old=insert($L.old, $L.m, 1);1 in $L.m in $L.old=1 in $L.i in $L.add.fields;2 in $L.m in $L.old=3 in $L.i in $L.add.fields;3 in $L.m in $L.old=$L.m.index;4 in $L.m in $L.old=4 in $L.i in $L.add.fields;5 in $L.m in $L.old=$L.temp;1 in 8 in $L.m in $L.old=NULL;2 in 8 in $L.m in $L.old=NULL;3 in 8 in $L.m in $L.old=NULL;4 in 8 in $L.m in $L.old=NULL;$L.old.field=insert($L.old.field, $L.m, 1, 1 in $L.i in $L.add.fields);$L.old.structure=insert($L.old.structure, $L.m, 1, 2 in $L.i in $L.add.fields);$L.old.level=insert($L.old.level, $L.m, 1, 3 in $L.i in $L.add.fields);$L.old.type=insert($L.old.type, $L.m, 1, 4 in $L.i in $L.add.fields)))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull($L.add.fields)) do (if (not  (null(5 in $L.i in $L.add.fields)) and not  (same(5 in $L.i in $L.add.fields, ""))) then ($L.temp=5 in $L.i in $L.add.fields;$L.struct.array={};$L.y=1;$L.z=1;if (index(",", $L.temp)&gt;0) then (while (index(",", $L.temp)&gt;0) do ($L.y=index(",", $L.temp);$L.a=$L.y - 1;$L.y+=1;$L.struct.array=$L.struct.array+{substr($L.temp, 1, $L.a)};$L.temp=substr($L.temp, $L.y, lng($L.temp)));for $L.lng = 1 to lng($L.struct.array) do ($L.z=max(index($L.lng in $L.struct.array, $L.old.field, $L.z), $L.z));$L.x=index($L.temp, $L.old.field, $L.z)) else ($L.x=index($L.temp, $L.old.field));$L.y=$L.x+1;while ($L.x in $L.old.level=$L.y in $L.old.level and $L.x in $L.old.index=$L.y in $L.old.index and $L.y&lt;=lng($L.old.field)) do $L.y+=1;$L.copy=$L.x in $L.old;$L.x+=1;1 in $L.copy=1 in $L.i in $L.add.fields;$L.old=insert($L.old, $L.x, 1, $L.copy);$L.old.field=insert($L.old.field, $L.x, 1, 1 in $L.i in $L.add.fields);$L.old.structure=insert($L.old.structure, $L.x, 1, 2 in $L.i in $L.add.fields);$L.old.level=insert($L.old.level, $L.x, 1, 3 in $L.i in $L.add.fields);$L.old.type=insert($L.old.type, $L.x, 1, 4 in $L.i in $L.add.fields)))</statements>
      <statements sctype="operator">$L.field.list={}</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull($L.add.fields)) do ($L.i in $L.field.list=1 in $L.i in $L.add.fields)</statements>
      <statements sctype="operator">field in $4=$L.old</statements>
      <statements sctype="operator">$5=denull($L.add.fields)</statements>
      <statements sctype="operator">$L.prob.dbdict.sql="name=\"problem\""</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">10</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">08/09/05 10:17:08</sysmodtime>
  </record>
</recordset>
