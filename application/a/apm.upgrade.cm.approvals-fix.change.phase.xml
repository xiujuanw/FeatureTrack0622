<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;apm.upgrade.cm.approvals&quot; and label=&quot;fix.change.phase&quot;" recordid="apm.upgrade.cm.approvals - fix.change.phase">
    <application type="string">apm.upgrade.cm.approvals</application>
    <label type="label">fix.change.phase</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">fix.change.phase.1</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">upd.control in $L.phase=strrep(str(upd.control in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">upd.control in $L.phase=strrep(upd.control in $L.phase, "header,", "")</statements>
      <statements sctype="operator">upd.control in $L.phase=strrep(upd.control in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">upd.control in $L.phase=strrep(upd.control in $L.phase, "$cm3r.sec.upd", "update in $G.cm3r.environment")</statements>
      <statements sctype="operator">upd.control in $L.phase=strrep(upd.control in $L.phase, "$cm3r.sec.clu", "closed.update in $G.cm3r.environment")</statements>
      <statements sctype="operator">upd.control in $L.phase=parse(strrep(upd.control in $L.phase, "$cm3r.sec.apo", "approve.override in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">app.control in $L.phase=strrep(str(app.control in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">app.control in $L.phase=strrep(app.control in $L.phase, "header,", "")</statements>
      <statements sctype="operator">app.control in $L.phase=strrep(app.control in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">app.control in $L.phase=strrep(app.control in $L.phase, "$cm3r.sec.app", "approvals in $G.cm3r.environment")</statements>
      <statements sctype="operator">app.control in $L.phase=strrep(app.control in $L.phase, "$cm3r.sec.apo", "approve.override in $G.cm3r.environment")</statements>
      <statements sctype="operator">app.control in $L.phase=parse(strrep(app.control in $L.phase, "$cm3r.sec.apm", "approve.mass in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">cls.control in $L.phase=strrep(str(cls.control in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">cls.control in $L.phase=strrep(cls.control in $L.phase, "header,", "")</statements>
      <statements sctype="operator">cls.control in $L.phase=strrep(cls.control in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">cls.control in $L.phase=strrep(cls.control in $L.phase, "$cm3r.sec.cls", "close in $G.cm3r.environment")</statements>
      <statements sctype="operator">cls.control in $L.phase=parse(strrep(cls.control in $L.phase, "$cm3r.sec.apo", "approve.override in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">calc.risk in $L.phase=strrep(str(calc.risk in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">calc.risk in $L.phase=strrep(calc.risk in $L.phase, "header,", "")</statements>
      <statements sctype="operator">calc.risk in $L.phase=strrep(calc.risk in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">calc.risk in $L.phase=parse(strrep(calc.risk in $L.phase, "$cm3r.sec.rsk", "calc.risk in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">paging in $L.phase=strrep(str(paging in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">paging in $L.phase=strrep(paging in $L.phase, "header,", "")</statements>
      <statements sctype="operator">paging in $L.phase=parse(strrep(paging in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">create.audit.recs in $L.phase=strrep(str(create.audit.recs in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">create.audit.recs in $L.phase=strrep(create.audit.recs in $L.phase, "header,", "")</statements>
      <statements sctype="operator">create.audit.recs in $L.phase=parse(strrep(create.audit.recs in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">reset.alerts in $L.phase=strrep(str(reset.alerts in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">reset.alerts in $L.phase=strrep(reset.alerts in $L.phase, "header,", "")</statements>
      <statements sctype="operator">reset.alerts in $L.phase=strrep(reset.alerts in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">reset.alerts in $L.phase=parse(strrep(reset.alerts in $L.phase, "$cm3r.sec.alr", "alert in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">recalc.alerts in $L.phase=strrep(str(recalc.alerts in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">recalc.alerts in $L.phase=strrep(recalc.alerts in $L.phase, "header,", "")</statements>
      <statements sctype="operator">recalc.alerts in $L.phase=strrep(recalc.alerts in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">recalc.alerts in $L.phase=parse(strrep(recalc.alerts in $L.phase, "$cm3r.sec.alr", "alert in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">reset.approvals in $L.phase=strrep(str(reset.approvals in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">reset.approvals in $L.phase=strrep(reset.approvals in $L.phase, "header,", "")</statements>
      <statements sctype="operator">reset.approvals in $L.phase=strrep(reset.approvals in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">reset.approvals in $L.phase=strrep(reset.approvals in $L.phase, "$cm3r.sec.app", "approvals in $G.cm3r.environment")</statements>
      <statements sctype="operator">reset.approvals in $L.phase=strrep(reset.approvals in $L.phase, "$cm3r.sec.apo", "approve.override in $G.cm3r.environment")</statements>
      <statements sctype="operator">reset.approvals in $L.phase=parse(strrep(reset.approvals in $L.phase, "$cm3r.sec.apm", "approve.mass in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">recalc.approvals in $L.phase=strrep(str(recalc.approvals in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">recalc.approvals in $L.phase=strrep(recalc.approvals in $L.phase, "header,", "")</statements>
      <statements sctype="operator">recalc.approvals in $L.phase=strrep(recalc.approvals in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)")</statements>
      <statements sctype="operator">recalc.approvals in $L.phase=strrep(recalc.approvals in $L.phase, "$cm3r.sec.app", "approvals in $G.cm3r.environment")</statements>
      <statements sctype="operator">recalc.approvals in $L.phase=strrep(recalc.approvals in $L.phase, "$cm3r.sec.apo", "approve.override in $G.cm3r.environment")</statements>
      <statements sctype="operator">recalc.approvals in $L.phase=parse(strrep(recalc.approvals in $L.phase, "$cm3r.sec.apm", "approve.mass in $G.cm3r.environment"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">message.flag in $L.phase=strrep(str(message.flag in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">message.flag in $L.phase=strrep(message.flag in $L.phase, "header,", "")</statements>
      <statements sctype="operator">message.flag in $L.phase=parse(strrep(message.flag in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">opn.script.cond in $L.phase=strrep(str(opn.script.cond in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">opn.script.cond in $L.phase=strrep(opn.script.cond in $L.phase, "header,", "")</statements>
      <statements sctype="operator">opn.script.cond in $L.phase=parse(strrep(opn.script.cond in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="operator">upd.script.cond in $L.phase=strrep(str(upd.script.cond in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">upd.script.cond in $L.phase=strrep(upd.script.cond in $L.phase, "header,", "")</statements>
      <statements sctype="operator">upd.script.cond in $L.phase=parse(strrep(upd.script.cond in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="operator">cls.script.cond in $L.phase=strrep(str(cls.script.cond in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">cls.script.cond in $L.phase=strrep(cls.script.cond in $L.phase, "header,", "")</statements>
      <statements sctype="operator">cls.script.cond in $L.phase=parse(strrep(cls.script.cond in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
      <statements sctype="operator">rpn.script.cond in $L.phase=strrep(str(rpn.script.cond in $L.phase), "$filer", "$L.file")</statements>
      <statements sctype="operator">rpn.script.cond in $L.phase=strrep(rpn.script.cond in $L.phase, "header,", "")</statements>
      <statements sctype="operator">rpn.script.cond in $L.phase=parse(strrep(rpn.script.cond in $L.phase, "$cm3.sec.adm", "(index(\"CM3Admin\", $lo.ucapex)&gt;0 or index(\"SysAdmin\", $lo.ucapex)&gt;0)"), 4)</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">5</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">08/09/05 10:18:31</sysmodtime>
  </record>
</recordset>
