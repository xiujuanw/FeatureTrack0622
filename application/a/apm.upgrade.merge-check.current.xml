<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;apm.upgrade.merge&quot; and label=&quot;check.current&quot;" recordid="apm.upgrade.merge - check.current">
    <application type="string">apm.upgrade.merge</application>
    <label type="label">check.current</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">decide.current</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">loop</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.valid=false;$L.wally={""};$L.levels={};$L.crap={2};$L.junk={""};$L.names={}</statements>
      <statements sctype="operator">$L.x=2;$L.current.parent=lng(denull($L.stack)) in $L.stack;$L.old.stack={"root"};$L.current.level=1</statements>
    </statements>
    <cond.input type="operator">$L.x&lt;=lng(denull($L.old)) and $L.valid=false and $L.abort=false</cond.input>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions sctype="array">
      <expressions sctype="operator">$L.good.parent=false</expressions>
      <expressions sctype="operator">if (2 in $L.x in $L.old&lt;$L.current.level) then ($L.current.level=2 in $L.x in $L.old;$L.old.stack=delete($L.old.stack, 1+$L.current.level, lng($L.old.stack) - $L.current.level))</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.potential=false</expressions>
      <expressions sctype="operator">$L.current.level=val(2 in $L.x in $L.old)</expressions>
      <expressions sctype="operator">1 in $L.crap=$L.old.stack;$L.levels=$L.levels+$L.crap</expressions>
      <expressions sctype="operator">$L.old.parent=lng(denull($L.old.stack)) in $L.old.stack</expressions>
      <expressions sctype="operator">if ($L.old.parent=$L.current.parent and 2 in $L.x in $L.old=2 in $L.i in $L.new and 1 in $L.x in $L.old=1 in $L.i in $L.new) then ($L.potential=true)</expressions>
      <expressions sctype="operator">if (4 in $L.x in $L.old=8 or 4 in $L.x in $L.old=9) then (1 in $L.wally=1 in $L.x in $L.old;$L.old.stack=$L.old.stack+$L.wally)</expressions>
      <expressions sctype="operator">if ($L.potential=true) then if (4 in $L.x in $L.old=4 in $L.i in $L.new) then ($L.valid=true) else ($L.abort=true;$L.abort.type=4 in $L.i in $L.old)</expressions>
      <expressions sctype="expression"/>
      <expressions sctype="operator">$L.x+=1</expressions>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">10</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">08/09/05 10:17:13</sysmodtime>
  </record>
</recordset>
