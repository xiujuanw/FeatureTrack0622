<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;apm.upgrade.merge.new&quot; and label=&quot;start&quot;" recordid="apm.upgrade.merge.new - start">
    <application type="string">apm.upgrade.merge.new</application>
    <label type="label">start</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">check.exceptions</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">if $G.DbgAppTrc then ($L.stsMsg="*** Upgrade Status: apm.upgrade.merge.new started. ***";$L.scsFlg=rtecall("log", $L.rtnCod, $L.stsMsg))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.retval=NULL</statements>
      <statements sctype="operator">$L.new=denull(field in $5)</statements>
      <statements sctype="operator">$L.old=denull(field in $4)</statements>
      <statements sctype="operator">$L.old.sqltables=denull(sql.tables in $4)</statements>
      <statements sctype="operator">$L.new.sqltables=denull(sql.tables in $5)</statements>
      <statements sctype="operator">$L.log=$6</statements>
      <statements sctype="operator">$L.field.types={"number", "character", "date/time", "logical", "label", "record", "offset", "array", "structure", "operator", "expression", "pseudofield", "global var", "local var", "field"}</statements>
      <statements sctype="operator">$L.temp.struct={"descriptor"};$L.temp.level={0}</statements>
      <statements sctype="operator">for $L.i = 1 to lng($L.old) do ($L.i in $L.old.field=1 in $L.i in $L.old;$L.i in $L.old.type=4 in $L.i in $L.old;$L.i in $L.old.level=2 in $L.i in $L.old;$L.i in $L.old.index=3 in $L.i in $L.old;if (2 in $L.i in $L.old=1 in $L.temp.level) then (1 in $L.temp.struct=1 in $L.i in $L.old) else if (2 in $L.i in $L.old&gt;1 in $L.temp.level) then ($L.temp.struct=insert($L.temp.struct, 1, 1, 1 in $L.i in $L.old);$L.temp.level=insert($L.temp.level, 1, 1, 2 in $L.i in $L.old)) else (if (2 in $L.i in $L.old&lt;$L.temp.level) then ($L.offset=1 in $L.temp.level - 2 in $L.i in $L.old;$L.temp.struct=delete($L.temp.struct, 1, $L.offset);$L.temp.level=delete($L.temp.level, 1, $L.offset);1 in $L.temp.struct=1 in $L.i in $L.old;1 in $L.temp.level=2 in $L.i in $L.old));$L.i in $L.old.structure=2 in $L.temp.struct;for $L.z = 3 to (lng(denull($L.temp.struct)) - 1) do ($L.i in $L.old.structure=$L.z in $L.temp.struct+","+$L.i in $L.old.structure))</statements>
      <statements sctype="operator">$L.temp.struct={"descriptor"};$L.temp.level={0}</statements>
      <statements sctype="operator">for $L.i = 1 to lng($L.new) do ($L.i in $L.new.field=1 in $L.i in $L.new;$L.i in $L.new.type=4 in $L.i in $L.new;$L.i in $L.new.level=2 in $L.i in $L.new;$L.i in $L.new.index=3 in $L.i in $L.new;$L.i in $L.new.sql.table=1 in 8 in $L.i in $L.new;$L.i in $L.new.sql.column=2 in 8 in $L.i in $L.new;$L.i in $L.new.sql.type=3 in 8 in $L.i in $L.new;$L.i in $L.new.sql.rcformat=4 in 8 in $L.i in $L.new;if (2 in $L.i in $L.new=1 in $L.temp.level) then (1 in $L.temp.struct=1 in $L.i in $L.new) else if (2 in $L.i in $L.new&gt;1 in $L.temp.level) then ($L.temp.struct=insert($L.temp.struct, 1, 1, 1 in $L.i in $L.new);$L.temp.level=insert($L.temp.level, 1, 1, 2 in $L.i in $L.new)) else (if (2 in $L.i in $L.new&lt;$L.temp.level) then ($L.offset=1 in $L.temp.level - 2 in $L.i in $L.new;$L.temp.struct=delete($L.temp.struct, 1, $L.offset);$L.temp.level=delete($L.temp.level, 1, $L.offset);1 in $L.temp.struct=1 in $L.i in $L.new;1 in $L.temp.level=2 in $L.i in $L.new));$L.i in $L.new.structure=2 in $L.temp.struct;for $L.z = 3 to (lng($L.temp.struct) - 1) do ($L.i in $L.new.structure=$L.z in $L.temp.struct+","+$L.i in $L.new.structure);if (same($L.i in $L.new.level, $L.alias.level) and same($L.i in $L.new.index, $L.alias.index) and same($L.i in $L.new.structure, $L.alias.structure)) then ($L.i in $L.new.alias={$L.alias.name, $L.alias.structure, $L.alias.level}) else ($L.alias.name=$L.i in $L.new.field;$L.alias.level=$L.i in $L.new.level;$L.alias.index=$L.i in $L.new.index;$L.alias.structure=$L.i in $L.new.structure;$L.i in $L.new.alias=NULL))</statements>
      <statements sctype="operator">$L.except.log={}</statements>
      <statements sctype="operator">$L.add.fields={};$L.dont.add={}</statements>
      <statements sctype="operator">$L.report.only=nullsub($8, false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.rem=" Initialize the following fields in preparation for the merge: "</statements>
      <statements sctype="operator">$L.rem="   The level where an attempt to ad an invalid structure begins ($L.savBadAddLvl) "</statements>
      <statements sctype="operator">$L.rem="   The flag that indicates whether an attempt to add an invalid structure has occurred ($L.badStcAdd) "</statements>
      <statements sctype="operator">$L.rem="   The name of the invalid structure that we attempted to add ($L.badStcNam) "</statements>
      <statements sctype="operator">$L.savBadAddLvl=0</statements>
      <statements sctype="operator">$L.badStcAdd=false</statements>
      <statements sctype="operator">cleanup($L.badStcNam)</statements>
      <statements sctype="operator">for $L.i = 2 to lng($L.new) do ($L.add.field=false;if ($L.badStcAdd=true and $L.i in $L.new.level&lt;=$L.savBadAddLvl) then ($L.badStcAdd=false;$L.savBadAddLvl=0;cleanup($L.badStcNam));$L.x=index($L.i in $L.new.field, $L.old.field);if ($L.x=0) then ($L.add.field=true) else (if ($L.x&gt;0) then ($L.same.structure=false;$L.continue=true;while (not  ($L.same.structure) and $L.continue) do (if same($L.i in $L.new.structure, $L.x in $L.old.structure) then ($L.same.structure=true) else ($L.y=$L.x+1;$L.x=index($L.i in $L.new.field, $L.old.field, $L.y);if ($L.x=0) then ($L.continue=false;$L.add.field=true))));if (not  ($L.add.field)) then ($L.right.level=false;$L.continue=true;while (not  ($L.right.level) and $L.continue) do (if same($L.i in $L.new.level, $L.x in $L.old.level) then ($L.right.level=true) else ($L.y=$L.x+1;$L.x=index($L.i in $L.new.field, $L.old.field, $L.y);if ($L.x=0) then ($L.continue=false;$L.add.field=true)))));if (not  ($L.add.field)) then (if (not  (same($L.i in $L.new.type, $L.x in $L.old.type))) then if ($L.i in $L.new.type=9) then ($L.savBadAddLvl=$L.i in $L.new.level;$L.badStcAdd=true;$L.badStcNam=$L.i in $L.new.field;$L.except.log=$L.except.log+nullsub({"dbdict:"+name in $4+", structure:"+$L.i in $L.new.structure+", field:"+$L.i in $L.new.field+" is type "+$L.x in $L.old.type+" -- new "+$L.i in $L.new.field+" is type "+$L.i in $L.new.type+" -- field left as type "+$L.x in $L.old.type}, {"bad"});$L.dont.add=$L.dont.add+{$L.i in $L.new.field}) else (if (name in $4~="licenseinfo" and not  (jscall("upgradeDatabaseFieldTypeUpdate.isFieldTypeComparable", $L.x in $L.old.type, $L.i in $L.new.type))) then ($L.except.msg=scmsg(1155, "upg", {name in $4, $L.i in $L.new.field, val($L.x in $L.old.type) in $L.field.types, val($L.i in $L.new.type) in $L.field.types});$L.except.log=$L.except.log+nullsub({$L.except.msg}, {"bad"}));$L.dont.add=$L.dont.add+{$L.i in $L.new.field})) else ($L.temp.alias="";if (not  (null($L.i in $L.new.alias))) then ($L.temp.alias=1 in $L.i in $L.new.alias;if (2 in $L.i in $L.new.alias~="descriptor") then ($L.temp.alias=2 in $L.i in $L.new.alias+","+$L.temp.alias));if (index($L.i in $L.new.field, $L.dont.add)=0) then ($L.rem=" If the parent structure of the field we are attempting to add is a bad add (ie, $L.badStcAdd is true), mark the sixth element of array of array $L.add.fields as BADadd. ";$L.rem=" Otherwise, mark it as GOODadd. ";if ($L.badStcAdd=false) then ($L.add.fields=$L.add.fields+{{$L.i in $L.new.field, $L.i in $L.new.structure, $L.i in $L.new.level, $L.i in $L.new.type, $L.temp.alias, "GOODAdd", $L.i in $L.new.sql.table, $L.i in $L.new.sql.column, $L.i in $L.new.sql.type, $L.i in $L.new.sql.rcformat}};if (not  (same($L.retval, "SAVE NEEDED"))) then ($L.retval="SAVE NEEDED")) else ($L.except.log=$L.except.log+nullsub({"dbdict:"+name in $4+", structure:"+$L.i in $L.new.structure+", field:"+$L.i in $L.new.field+", type: "+$L.i in $L.new.type+" was not added because its parent structure ("+$L.badStcNam+") was not added"}, {"bad"});$L.add.fields=$L.add.fields+{{$L.i in $L.new.field, $L.i in $L.new.structure, $L.i in $L.new.level, $L.i in $L.new.type, $L.temp.alias, "BADAdd", $L.i in $L.new.sql.table, $L.i in $L.new.sql.column, $L.i in $L.new.sql.type, $L.i in $L.new.sql.rcformat}}))))</statements>
      <statements sctype="operator">$L.sql="file.name=\""+nullsub(name in $4, "XXX")+"\""</statements>
      <statements sctype="string"/>
      <statements sctype="operator">//Get available alias table name for added alias fields</statements>
      <statements sctype="operator">$L.alias.names={}</statements>
      <statements sctype="string"/>
      <statements sctype="operator">for $L.i = 1 to lng($L.old.sqltables) do (if (not  (null(3 in $L.i in $L.old.sqltables))) then ($L.alias.names=insert($L.alias.names, 0, 1, 3 in $L.i in $L.old.sqltables)))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">for $L.i = 1 to lng($L.add.fields) do (if (index("a", 7 in $L.i in $L.add.fields)=1 or index("A", 7 in $L.i in $L.add.fields)=1) then ($L.alias=jscall("upgradeTableAliasChanges.refreshAlias2", $L.alias.names, 7 in $L.i in $L.add.fields);$L.alias.names=insert($L.alias.names, 0, 1, $L.alias);$L.old.alias=7 in $L.i in $L.add.fields;for $L.j = $L.i to lng($L.add.fields) do (if (7 in $L.j in $L.add.fields=$L.old.alias) then (7 in $L.j in $L.add.fields=$L.alias;$L.i=$L.j))))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">43</sysmodcount>
    <sysmoduser type="string">zhouanqing</sysmoduser>
    <sysmodtime type="dateTime">08/18/16 22:13:10</sysmodtime>
  </record>
</recordset>
