<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;trigger.slacontrol.edit&quot; and label=&quot;start&quot;" recordid="trigger.slacontrol.edit - start">
    <application type="string">trigger.slacontrol.edit</application>
    <label type="label">start</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">decide.exit</normal>
    <error type="localVar">$0</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">// Bring in new record</statements>
      <statements sctype="operator">$L.old=$4;$L.new=$5</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Scrub status.progression array of embedded nulls</statements>
      <statements sctype="operator">if (not  (null(status.progression in $L.new))) then ($L.wrkarr={};$L.y=1;for $L.x = 1 to lng(denull(status.progression in $L.new)) do (if (not  (null($L.x in status.progression in $L.new))) then ($L.wrkarr=insert($L.wrkarr, $L.y, 1, $L.x in status.progression in $L.new);$L.y+=1));status.progression in $L.new=denull($L.wrkarr);$5=$L.new)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Validate status.progression</statements>
      <statements sctype="operator">$L.errflg=false</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Ensure that the first state is Open</statements>
      <statements sctype="operator">if (1 in status.progression in $L.new~="Open") then ($L.errflg=true;$L.errmsg=scmsg(61, "sla", {"first", "Open"}))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Ensure that the last state is Closed</statements>
      <statements sctype="operator">if ($L.errflg=false) then ($L.las=lng(status.progression in $L.new);if ($L.las in status.progression in $L.new~="Closed") then ($L.errflg=true;$L.errmsg=scmsg(61, "sla", {"last", "Closed"})))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Ensure that a state defined by Service Manager as a lateral state is not in the status progression table</statements>
      <statements sctype="operator">if ($L.errflg=false) then ($L.wrkarr={"Pending customer", "Pending other", "Pending vendor", "Referred", "Reject", "Replaced Problem", "Suspended"};$L.stpflg=false;$L.x=1;while ($L.stpflg=false and $L.x&lt;=lng(status.progression in $L.new)) do ($L.fnd=index($L.x in status.progression in $L.new, $L.wrkarr);if ($L.fnd&gt;0) then ($L.stpflg=true;$L.errflg=true;$L.errmsg=scmsg(62, "sla", {str($L.x in status.progression in $L.new)})) else $L.x+=1))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">// Ensure there are no duplicate entries</statements>
      <statements sctype="operator">if ($L.errflg=false) then ($L.stpflg=false;$L.x=1;while ($L.stpflg=false and $L.x&lt;lng(status.progression in $L.new)) do ($L.dup=index($L.x in status.progression in $L.new, status.progression in $L.new, $L.x+1);if ($L.dup~=0) then ($L.stpflg=true;$L.errflg=true;$L.errmsg=scmsg(63, "sla", {str($L.x in status.progression in $L.new)})) else $L.x+=1))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">4</sysmodcount>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodtime type="dateTime">10/30/17 15:13:12</sysmodtime>
  </record>
</recordset>
