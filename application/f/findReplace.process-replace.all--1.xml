<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;findReplace.process&quot; and label=&quot;replace.all&quot;" recordid="findReplace.process - replace.all">
    <application type="string">findReplace.process</application>
    <label type="label">replace.all</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">check.array.ind</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.find.string=nullsub($L.array.ind in $L.find.string.array, "xxx")</statements>
      <statements sctype="operator">$L.replace.string=nullsub($L.array.ind in $L.replace.string.array, "xxx")</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">if ($L.mode="all") then ($L.fields={};for $L.i = 1 to lng(field in $L.dbdict) do (if (index(1 in $L.i in field in $L.dbdict, $L.fields)=0) then ($L.fields=$L.fields+{1 in $L.i in field in $L.dbdict})))</statements>
      <statements sctype="operator">$L.dbdict.fields={};for $L.i = 1 to lng(field in $L.dbdict) do ($L.i in $L.dbdict.fields=1 in $L.i in field in $L.dbdict)</statements>
      <statements sctype="operator">$L.array.fields={}</statements>
      <statements sctype="operator">for $L.i = 1 to lng($L.fields) do (if (type(str($L.i in $L.fields) in $L.file)=2) then (str($L.i in $L.fields) in $L.file=strrep(str($L.i in $L.fields) in $L.file, $L.find.string, $L.replace.string)) else (if (type(str($L.i in $L.fields) in $L.file)=8) then ($L.array.fields=$L.array.fields+{str($L.i in $L.fields)})))</statements>
      <statements sctype="expression"/>
      <statements sctype="expression"/>
      <statements sctype="operator">for $L.x = 1 to lng($L.array.fields) do (if (type(str($L.x in $L.array.fields) in $L.file)=8) then ($L.pos=index($L.x in $L.array.fields, $L.dbdict.fields);$L.level=2 in $L.pos in field in $L.dbdict;$L.index=3 in $L.pos in field in $L.dbdict;$L.structure=NULL;$L.pos-=1;while (null($L.structure) and $L.pos&gt;0) do (if (4 in $L.pos in field in $L.dbdict=9 and 2 in $L.pos in field in $L.dbdict&lt;$L.level) then ($L.structure=1 in $L.pos in field in $L.dbdict);$L.pos-=1);if (null($L.structure) or $L.structure="descriptor") then for $L.i = 1 to lng(denull(str($L.x in $L.array.fields) in $L.file)) do (if (type($L.i in str($L.x in $L.array.fields) in $L.file)=2 and not  (null($L.i in str($L.x in $L.array.fields) in $L.file))) then ($L.i in str($L.x in $L.array.fields) in $L.file=strrep($L.i in str($L.x in $L.array.fields) in $L.file, $L.find.string, $L.replace.string))) else for $L.i = 1 to lng(denull(str($L.x in $L.array.fields) in $L.file)) do (if (type($L.i in str($L.x in $L.array.fields) in $L.file)=2 and not  (null($L.i in str($L.x in $L.array.fields) in $L.file))) then ($L.temp=str($L.index)+" in "+$L.i+" in "+str($L.structure)+" in $L.file=strrep( "+str($L.index)+" in "+$L.i+" in "+str($L.structure)+" in $L.file, $L.find.string, $L.replace.string)";$L.void=evaluate(parse($L.temp, 11))))))</statements>
      <statements sctype="operator">$L.count=0</statements>
      <statements sctype="operator">$L.array.ind+=1</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">1</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">01/17/07 10:08:36</sysmodtime>
  </record>
</recordset>
