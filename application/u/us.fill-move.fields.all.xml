<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;us.fill&quot; and label=&quot;move.fields.all&quot;" recordid="us.fill - move.fields.all">
    <application type="string">us.fill</application>
    <label type="label">move.fields.all</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">next.all</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">if (not  (null($fill.structure))) then ($L.struct=2 in $fill.structure);$L.fill.counter=nullsub($L.fill.counter, 0)</statements>
      <statements sctype="operator">if ($L.fill.counter&gt;0) then ($L.cursorline+=1;if null($fill.structure) then for $L.fa = 1 to lng(denull($L.i in project.target.fields in $L.link)) do (if substr($L.fa in $L.i in project.target.fields in $L.link, 1, 1)~#"$" then if (type(evaluate(($L.fa in $L.i in project.target.fields in $L.link) in $L.source))=8) then (($L.fa in $L.i in project.target.fields in $L.link) in $L.source=insert(($L.fa in $L.i in project.target.fields in $L.link) in $L.source, $L.cursorline, 1));if substr($L.fa in $L.i in project.target.fields in $L.link, 1, 1)#"$" then if (type(evaluate($L.fa in $L.i in project.target.fields in $L.link))=8) then ($L.value=evaluate($L.fa in $L.i in project.target.fields in $L.link);$L.junk=evaluate(parse(str($L.fa in $L.i in project.target.fields in $L.link)+"=insert($L.value, $L.cursorline,1)", 11))));if (not  (null($fill.structure))) then if (lng($L.struct in $L.source)&gt;=$L.cursorline) then ($L.struct in $L.source=insert($L.struct in $L.source, $L.cursorline, 1)))</statements>
      <statements sctype="operator">$L.fill.all.target.save=$L.i in project.target.fields in $L.link</statements>
      <statements sctype="operator">if null($fill.structure) then for $L.x = 1 to lng($L.i in project.source.fields in $L.link) do (if ($L.cursorline&gt;0 and substr($L.x in $L.i in project.source.fields in $L.link, 1, 1)~="$") then if (($L.x in $L.i in project.target.fields in $L.link=$L.field or type(evaluate($L.x in $L.i in project.target.fields in $L.link) in $L.source)=8) and type(evaluate(($L.x in $L.i in project.source.fields in $L.link) in $L.target))~=8 or null(($L.x in $L.i in project.target.fields in $L.link) in $L.target)) then ($L.x in $L.i in project.target.fields in $L.link=str($L.cursorline)+" in "+str($L.x in $L.i in project.target.fields in $L.link));if ($L.cursorline&gt;0 and substr($L.x in $L.i in project.source.fields in $L.link, 1, 1)="$") then if ($L.x in $L.i in project.target.fields in $L.link=$L.field and type(evaluate($L.x in $L.i in project.source.fields in $L.link) in $L.target)~=8) then ($L.x in $L.i in project.target.fields in $L.link=str($L.cursorline)+" in "+$L.x in $L.i in project.target.fields in $L.link);if (substr($L.x in $L.i in project.source.fields in $L.link, 1, 1)="$") then ($L.temp.source=evaluate($L.x in $L.i in project.source.fields in $L.link)) else ($L.temp.source=evaluate($L.x in $L.i in project.source.fields in $L.link) in $L.target);if (not  (null($L.x in $L.fill.all.target.save))) then if (substr($L.x in $L.fill.all.target.save, 1, 1)="$") then ($L.junk=evaluate(parse(str($L.x in $L.i in project.target.fields in $L.link)+"=evaluate($L.temp.source)", 11))) else ($L.junk=evaluate(parse(str($L.x in $L.i in project.target.fields in $L.link)+" in $L.source=evaluate($L.temp.source)", 11))))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (not  (null($fill.structure))) then for $L.x = 1 to lng($L.i in project.source.fields in $L.link) do (if (not  (null($L.x in $L.i in project.target.fields in $L.link))) then ($L.tempeval=$L.struct+","+val($L.cursorline)+","+$L.x in $L.i in project.target.fields in $L.link;evaluate($L.tempeval) in $L.source=evaluate($L.x in $L.i in project.source.fields in $L.link) in $L.target))</statements>
      <statements sctype="operator">$L.fill.counter+=1</statements>
      <statements sctype="operator">$L.debug=$L.i in project.target.fields in $L.link</statements>
      <statements sctype="operator">$L.i in project.target.fields in $L.link=$L.fill.all.target.save</statements>
      <statements sctype="string"/>
      <statements sctype="operator">for $L.y = 1 to lng(denull($L.i in post.expressions in $L.link)) do ($L.eval=evaluate($L.y in $L.i in post.expressions in $L.link))</statements>
      <statements sctype="operator">if (not  (null($L.i in javascript.post in $L.link))) then js($L.i in javascript.post in $L.link)</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">5</sysmodcount>
    <sysmoduser type="string">rolfel</sysmoduser>
    <sysmodtime type="dateTime">01/04/10 08:24:57</sysmodtime>
  </record>
</recordset>
