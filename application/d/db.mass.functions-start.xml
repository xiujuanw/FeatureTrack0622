<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;db.mass.functions&quot; and label=&quot;start&quot;" recordid="db.mass.functions - start">
    <application type="string">db.mass.functions</application>
    <label type="label">start</label>
    <comments type="string">if ($L.action="massunload") then ($L.void=rtecall("rgoto", $L.rc, $L.file, $L.record.number))</comments>
    <normal type="label">decide.action</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.action=$4</statements>
      <statements sctype="operator">$L.file=$5</statements>
      <statements sctype="operator">$L.format=$6</statements>
      <statements sctype="operator">$L.fc=$7</statements>
      <statements sctype="operator">$L.object=$12</statements>
      <statements sctype="operator">$L.action.save=$L.action</statements>
      <statements sctype="operator">$L.format.save=$L.format</statements>
      <statements sctype="operator">if (not  (null($L.fc))) then ($L.void=fduplicate($L.fc.save, $L.fc))</statements>
      <statements sctype="operator">$L.env=$11</statements>
      <statements sctype="operator">$L.admin=nullsub($10, false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (filename($L.env)="tableAccess") then if (update in $L.env="never") then ($L.sec.update=false) else ($L.sec.update=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("db.mass.update", $L.env) then ($L.allow.simple=nullsub(evaluate(db.mass.update in $L.env), false)) else ($L.allow.simple=false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("db.complex", $L.env) then ($L.allow.complex=nullsub(evaluate(db.complex in $L.env), false)) else ($L.allow.complex=false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (filename($L.env)="tableAccess") then ($L.allow.complex=nullsub(evaluate(admin in $L.env or expert in $L.env), false))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("db.template", $L.env) then ($L.allow.template=nullsub(evaluate(db.template in $L.env), false)) else ($L.allow.template=false)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if (filename($L.env)="tableAccess") then ($L.allow.template=nullsub(evaluate(admin in $L.env or expert in $L.env), false))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("pm.template", $G.rc.environment) then if (filename($L.file)="rootcause") then ($L.allow.template=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("pm.complex", $G.rc.environment) then if (filename($L.file)="rootcause") then ($L.allow.complex=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("pmt.template", $G.rc.environment) then if (filename($L.file)="rootcausetask") then ($L.allow.template=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("pmt.complex", $G.rc.environment) then if (filename($L.file)="rootcausetask") then ($L.allow.complex=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("kne.template", $G.rc.environment) then if (filename($L.file)="knownerror") then ($L.allow.template=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("kne.complex", $G.rc.environment) then if (filename($L.file)="knownerror") then ($L.allow.complex=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("ket.template", $G.rc.environment) then if (filename($L.file)="knownerrortask") then ($L.allow.template=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if exists("ket.complex", $G.rc.environment) then if (filename($L.file)="knownerrortask") then ($L.allow.complex=true)</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$allow.simple=$L.allow.simple</statements>
      <statements sctype="operator">$allow.complex=$L.allow.complex</statements>
      <statements sctype="operator">$allow.template=$L.allow.template</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.multiselect=false</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.bg=$G.bg</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$mass.action=true</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">12</sysmodcount>
    <sysmoduser type="string">zhouanqing</sysmoduser>
    <sysmodtime type="dateTime">09/02/18 19:27:23</sysmodtime>
  </record>
</recordset>
