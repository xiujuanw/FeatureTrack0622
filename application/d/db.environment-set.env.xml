<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;db.environment&quot; and label=&quot;set.env&quot;" recordid="db.environment - set.env">
    <application type="string">db.environment</application>
    <label type="label">set.env</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">set.env.2</normal>
    <error type="label">exit.error.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">object in $L.env=file.name in $L.object;$L.lng=lng(denull(queries in $L.fc))</statements>
      <statements sctype="operator">name in $L.env=file.name in $L.object</statements>
      <statements sctype="operator">search in $L.env=strrep(str(nullsub(database.access in $L.fc, true)), "$file", "$L.file");search in $L.env=parse(strrep(search in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (search in $L.env=parse(strrep(str(nullsub(search in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">search.format in $L.env=query.format in $L.fc</statements>
      <statements sctype="operator">add in $L.env=strrep(str(nullsub(db.add in $L.fc, true)), "$file", "$L.file");add in $L.env=parse(strrep(add in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (add in $L.env=parse(strrep(str(nullsub(add in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">update in $L.env=strrep(str(nullsub(db.update in $L.fc, true)), "$file", "$L.file");update in $L.env=parse(strrep(update in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (update in $L.env=parse(strrep(str(nullsub(update in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">delete in $L.env=strrep(str(nullsub(db.delete in $L.fc, true)), "$file", "$L.file");delete in $L.env=parse(strrep(str(nullsub(delete in $L.env, true)), "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (delete in $L.env=parse(strrep(str(nullsub(delete in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">find in $L.env=strrep(str(nullsub(db.find in $L.fc, true)), "$file", "$L.file");find in $L.env=parse(strrep(find in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (find in $L.env=parse(strrep(str(nullsub(find in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">fill in $L.env=strrep(str(nullsub(db.fill in $L.fc, true)), "$file", "$L.file");fill in $L.env=parse(strrep(fill in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (fill in $L.env=parse(strrep(str(nullsub(fill in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">print in $L.env=strrep(str(nullsub(db.print in $L.fc, true)), "$file", "$L.file");print in $L.env=parse(strrep(print in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (print in $L.env=parse(strrep(str(nullsub(print in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">advanced.search in $L.env=strrep(str(nullsub(db.query in $L.fc, true)), "$file", "$L.file");advanced.search in $L.env=parse(strrep(advanced.search in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (advanced.search in $L.env=parse(strrep(str(nullsub(advanced.search in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">count.records in $L.env=strrep(str(nullsub(db.count in $L.fc, true)), "$file", "$L.file");count.records in $L.env=parse(strrep(count.records in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (count.records in $L.env=parse(strrep(str(nullsub(count.records in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">validity.lookup in $L.env=strrep(str(nullsub(db.validity in $L.fc, true)), "$file", "$L.file");validity.lookup in $L.env=parse(strrep(validity.lookup in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (validity.lookup in $L.env=parse(strrep(str(nullsub(validity.lookup in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">views in $L.env=strrep(str(nullsub(db.views in $L.fc, true)), "$file", "$L.file");views in $L.env=parse(strrep(views in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (views in $L.env=parse(strrep(str(nullsub(views in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
      <statements sctype="operator">edit.array in $L.env=strrep(str(nullsub(db.expand in $L.fc, true)), "$file", "$L.file");edit.array in $L.env=parse(strrep(edit.array in $L.env, "$file0", "$L.file.save"), 4);for $L.i = 1 to $L.lng do (edit.array in $L.env=parse(strrep(str(nullsub(edit.array in $L.env, true)), "$L.file"+str($L.i), "$file"+str($L.i)), 4))</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">12</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">02/15/07 03:55:18</sysmodtime>
  </record>
</recordset>
