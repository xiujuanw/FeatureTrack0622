<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;output.money&quot; and label=&quot;set.up.output&quot;" recordid="output.money - set.up.output">
    <application type="string">output.money</application>
    <label type="label">set.up.output</label>
    <comments NullValue="1" type="string"/>
    <normal type="label">dummy</normal>
    <error type="localVar">$5</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.digits=index("0", $L.mask);$L.comma=index("C", $L.mask);$L.right=index("R", $L.mask);if ($L.data&lt;0) then ($L.negative=1) else ($L.negative=0)</statements>
      <statements sctype="operator">$L.parentheses=index("P", $L.mask);$L.dollar=index("D", $L.mask);$L.save.paren=0;$L.two=index("2", $L.mask);$L.left=index("L", $L.mask)</statements>
      <statements sctype="operator">if ($L.digits~=0 and $L.two=0) then ($L.data=str(round($L.data, 0))) else ($L.data=str(round($L.data, 2)));if ($L.negative=1) then ($L.data=substr($L.data, 2, lng($L.data) - 1))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.temp=index($L.decimal.symbol, $L.data)</statements>
      <statements sctype="operator">if ($L.temp&gt;0 and $L.decimal.symbol~=".") then ($L.data=substr($L.data, 1, $L.temp - 1)+"."+substr($L.data, $L.temp+1, lng($L.data) - $L.temp+1))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">$L.offset=index(".", $L.data);if ($L.offset=0) then ($L.data=$L.data+".");if ($L.offset=0 and $L.digits=0) then ($L.data=$L.data+"00");$L.trail.zero=lng($L.data);if ($L.trail.zero - 1=index(".", $L.data) and $L.digits=0) then ($L.data=$L.data+"0");$L.offset=index(".", $L.data);if ($L.parentheses~=0 and $L.negative=1) then ($L.negative=0;$L.save.paren=1)</statements>
      <statements sctype="operator">$L.pete=$L.data</statements>
      <statements sctype="operator">if ($L.comma&gt;0) then ($L.offset=index(".", $L.data);if ($L.offset=0) then ($L.offset=lng($L.data)+1);$L.start=($L.offset - 1)%3;if ($L.start=0 and $L.offset - 1&gt;3) then ($L.start=3);if (($L.offset - 1)%3&gt;0) then ($L.max=trunc(($L.offset - 1)/3)) else ($L.max=trunc(($L.offset - 2)/3));if ($L.offset&gt;4) then for $L.i = 1 to $L.max do ($L.length=lng($L.data);$L.data=substr($L.data, 1, $L.start)+","+substr($L.data, $L.start+1, $L.length);$L.start+=4))</statements>
      <statements sctype="string"/>
      <statements sctype="operator">if ($L.right~=0 and $L.left~=0) then ($L.right=0)</statements>
      <statements sctype="operator">if ($L.right~=0) then (if ($L.dollar~=0 and $L.negative=1) then ($L.data=$L.data+"-$");if ($L.dollar~=0 and $L.negative~=1) then ($L.data=$L.data+"$"))</statements>
      <statements sctype="operator">if ($L.right=0) then (if ($L.dollar~=0 and $L.negative=1) then ($L.data="-$"+$L.data);if ($L.dollar~=0 and $L.negative~=1) then ($L.data="$"+$L.data))</statements>
      <statements sctype="operator">if ($L.save.paren=1) then ($L.data="("+$L.data+")")</statements>
      <statements sctype="operator">$2=$L.data</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">9</sysmodcount>
    <sysmoduser type="string">zhouanqing</sysmoduser>
    <sysmodtime type="dateTime">04/24/12 21:39:14</sysmodtime>
  </record>
</recordset>
