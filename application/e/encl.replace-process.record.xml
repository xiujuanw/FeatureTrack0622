<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="application">
  <record id="application=&quot;encl.replace&quot; and label=&quot;process.record&quot;" recordid="encl.replace - process.record">
    <application type="string">encl.replace</application>
    <label type="label">process.record</label>
    <comments type="string">**more below**</comments>
    <normal type="label">file.update.check</normal>
    <error type="label">setup.no.update.msg</error>
    <format type="string">process</format>
    <file NullValue="1" type="file"/>
    <all.null NullValue="1" type="label"/>
    <key.null NullValue="1" type="label"/>
    <key.dupl NullValue="1" type="label"/>
    <second.file NullValue="1" type="file"/>
    <target.file NullValue="1" type="file"/>
    <record NullValue="1" type="file"/>
    <query NullValue="1" type="string"/>
    <name NullValue="1" type="string"/>
    <names NullValue="1" sctype="array">
      <names NullValue="1" type="string"/>
    </names>
    <values NullValue="1" sctype="array">
      <values NullValue="1" type="string"/>
    </values>
    <prompt NullValue="1" type="string"/>
    <condition NullValue="1" sctype="array">
      <condition NullValue="1" type="boolean"/>
    </condition>
    <option NullValue="1" sctype="array">
      <option NullValue="1" type="decimal"/>
    </option>
    <description NullValue="1" sctype="array">
      <description NullValue="1" type="string"/>
    </description>
    <exit NullValue="1" sctype="array">
      <exit NullValue="1" type="label"/>
    </exit>
    <index NullValue="1" type="decimal"/>
    <empty NullValue="1" type="label"/>
    <one.rec NullValue="1" type="label"/>
    <text NullValue="1" type="string"/>
    <statements sctype="array">
      <statements sctype="operator">$L.void=fduplicate($L.file.save, $L.file)</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(condition in $L.file)) do ($L.working=str($L.i in condition in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in condition in $L.file))) then if (not  (null(parse($L.working, 4)))) then ($L.i in condition in $L.file=parse($L.working, 4)) else ($L.error.messages=insert($L.error.messages, 1, 1, "conditions # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(statements in $L.file)) do ($L.working=str($L.i in statements in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in statements in $L.file))) then if (not  (null(parse($L.working, 11)))) then ($L.i in statements in $L.file=parse($L.working, 11)) else ($L.error.messages=insert($L.error.messages, 1, 1, "statements # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(expressions in $L.file)) do ($L.working=str($L.i in expressions in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in expressions in $L.file))) then if (not  (null(parse($L.working, 11)))) then ($L.i in expressions in $L.file=parse($L.working, 11)) else ($L.error.messages=insert($L.error.messages, 1, 1, "expressions # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(names in $L.file)) do ($L.working=str($L.i in names in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in names in $L.file))) then if (not  (null(parse($L.working, 2)))) then ($L.i in names in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "names # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(values in $L.file)) do ($L.working=str($L.i in values in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in values in $L.file))) then if (not  (null(parse($L.working, 2)))) then ($L.i in values in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "values # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(description in $L.file)) do ($L.working=str($L.i in description in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in description in $L.file))) then if (not  (null(parse($L.working, 2)))) then ($L.i in description in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "description # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(sort in $L.file)) do ($L.working=str($L.i in sort in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in sort in $L.file))) then if (not  (null(parse($L.working, 2)))) then ($L.i in sort in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "sort # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(types in $L.file)) do ($L.working=str($L.i in types in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in types in $L.file))) then if (not  (null(parse($L.working, 2)))) then ($L.i in types in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "types # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(times in $L.file)) do ($L.working=str($L.i in times in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in times in $L.file))) then if (not  (null(parse($L.working, 3)))) then ($L.i in times in $L.file=parse($L.working, 3)) else ($L.error.messages=insert($L.error.messages, 1, 1, "times # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(booleans in $L.file)) do ($L.working=str($L.i in booleans in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in booleans in $L.file))) then if (not  (null(parse($L.working, 4)))) then ($L.i in booleans in $L.file=parse($L.working, 4)) else ($L.error.messages=insert($L.error.messages, 1, 1, "booleans # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(file.variables in $L.file)) do ($L.working=str($L.i in file.variables in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in file.variables in $L.file))) then if (not  (null(parse($L.working, 6)))) then ($L.i in file.variables in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "file.variables # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(option in $L.file)) do ($L.working=str($L.i in option in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in option in $L.file))) then if (not  (null(parse($L.working, 1)))) then ($L.i in option in $L.file=parse($L.working, 1)) else ($L.error.messages=insert($L.error.messages, 1, 1, "option # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(levels in $L.file)) do ($L.working=str($L.i in levels in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in levels in $L.file))) then if (not  (null(parse($L.working, 1)))) then ($L.i in levels in $L.file=parse($L.working, 1)) else ($L.error.messages=insert($L.error.messages, 1, 1, "levels # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">for $L.i = 1 to lng(denull(numbers in $L.file)) do ($L.working=str($L.i in numbers in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null($L.i in numbers in $L.file))) then if (not  (null(parse($L.working, 1)))) then ($L.i in numbers in $L.file=parse($L.working, 1)) else ($L.error.messages=insert($L.error.messages, 1, 1, "numbers # "+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+").")))</statements>
      <statements sctype="operator">$L.working=str(file in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(file in $L.file))) then if (not  (null(parse($L.working, 6)))) then (file in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "file"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(second.file in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(second.file in $L.file))) then if (not  (null(parse($L.working, 6)))) then (second.file in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "second.file"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(target.file in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(target.file in $L.file))) then if (not  (null(parse($L.working, 6)))) then (target.file in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "target.file"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(record in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(record in $L.file))) then if (not  (null(parse($L.working, 6)))) then (record in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "record"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(second.record in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(second.record in $L.file))) then if (not  (null(parse($L.working, 6)))) then (second.record in $L.file=parse($L.working, 6)) else ($L.error.messages=insert($L.error.messages, 1, 1, "second.record"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(query in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(query in $L.file))) then if (not  (null(parse($L.working, 2)))) then (query in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "query"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(name in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(name in $L.file))) then if (not  (null(parse($L.working, 2)))) then (name in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "name"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(prompt in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(prompt in $L.file))) then if (not  (null(parse($L.working, 2)))) then (prompt in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "prompt"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(text in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(text in $L.file))) then if (not  (null(parse($L.working, 2)))) then (text in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "text"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(string1 in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(string1 in $L.file))) then if (not  (null(parse($L.working, 2)))) then (string1 in $L.file=parse($L.working, 2)) else ($L.error.messages=insert($L.error.messages, 1, 1, "string1"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(index in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(index in $L.file))) then if (not  (null(parse($L.working, 1)))) then (index in $L.file=parse($L.working, 1)) else ($L.error.messages=insert($L.error.messages, 1, 1, "index"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(number1 in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(number1 in $L.file))) then if (not  (null(parse($L.working, 1)))) then (number1 in $L.file=parse($L.working, 1)) else ($L.error.messages=insert($L.error.messages, 1, 1, "number1"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(cond.input in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(cond.input in $L.file))) then if (not  (null(parse($L.working, 4)))) then (cond.input in $L.file=parse($L.working, 4)) else ($L.error.messages=insert($L.error.messages, 1, 1, "cond.input"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(boolean1 in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(boolean1 in $L.file))) then if (not  (null(parse($L.working, 4)))) then (boolean1 in $L.file=parse($L.working, 4)) else ($L.error.messages=insert($L.error.messages, 1, 1, "boolean1"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.working=str(time1 in $L.file)+" ";for $L.x = 1 to lng(denull($L.seek)) do ($L.working=strrep($L.working, $L.x in $L.seek, $L.x in $L.rep));if (not  (null(time1 in $L.file))) then if (not  (null(parse($L.working, 3)))) then (time1 in $L.file=parse($L.working, 3)) else ($L.error.messages=insert($L.error.messages, 1, 1, "time1"+$L.i+" in ("+application in $L.file+","+str(label in $L.file)+")."))</statements>
      <statements sctype="operator">$L.panel=$L.file</statements>
      <statements sctype="operator">$7=$L.panel</statements>
      <statements sctype="expression"/>
      <statements sctype="operator">if same($L.file, $L.file.save) then ($L.changed=false) else ($L.changed=true;$L.changes=$L.changes+{"("+application in $L.file+","+str(label in $L.file)+")."})</statements>
    </statements>
    <cond.input NullValue="1" type="boolean"/>
    <sort NullValue="1" sctype="array">
      <sort NullValue="1" type="string"/>
    </sort>
    <types NullValue="1" sctype="array">
      <types NullValue="1" type="string"/>
    </types>
    <levels NullValue="1" sctype="array">
      <levels NullValue="1" type="decimal"/>
    </levels>
    <numbers NullValue="1" sctype="array">
      <numbers NullValue="1" type="decimal"/>
    </numbers>
    <number1 NullValue="1" type="decimal"/>
    <string1 NullValue="1" type="string"/>
    <time1 NullValue="1" type="dateTime"/>
    <boolean1 NullValue="1" type="boolean"/>
    <times NullValue="1" sctype="array">
      <times NullValue="1" type="dateTime"/>
    </times>
    <expressions NullValue="1" sctype="array">
      <expressions NullValue="1" type="expression"/>
    </expressions>
    <comments.more NullValue="1" sctype="array">
      <comments.more NullValue="1" type="string"/>
    </comments.more>
    <file.variables NullValue="1" sctype="array">
      <file.variables NullValue="1" type="file"/>
    </file.variables>
    <second.record NullValue="1" type="file"/>
    <booleans NullValue="1" sctype="array">
      <booleans NullValue="1" type="boolean"/>
    </booleans>
    <table NullValue="1" type="unknown"/>
    <tables NullValue="1" sctype="array">
      <tables NullValue="1" type="unknown"/>
    </tables>
    <sysmodcount type="decimal">2</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">09/29/04 11:25:28</sysmodtime>
  </record>
</recordset>
