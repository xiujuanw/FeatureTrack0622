<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="idolwebresources">
  <record id="name=&quot;IDOL_TOPICMAP_D3_COMPACT&quot;" recordid="IDOL_TOPICMAP_D3_COMPACT">
    <name type="string">IDOL_TOPICMAP_D3_COMPACT</name>
    <raw type="string">/**
 * Use smash(https://github.com/mbostock/smash) to choose only part of the d3 library
 * 
 * smash src/start.js  src/arrays/keys.js src/arrays/extent.js src/layout/treemap.js src/scale/ordinal.js \
 *    src/scale/sqrt.js  src/transition/index.js src/end.js  &gt; ~/d3.treemap.js
 */
!function(){
  var d3 = {version: "3.4.6"}; // semver
d3.keys = function(map) {
  var keys = [];
  for (var key in map) keys.push(key);
  return keys;
};
d3.extent = function(array, f) {
  var i = -1,
      n = array.length,
      a,
      b,
      c;
  if (arguments.length === 1) {
    while (++i &lt; n &amp;&amp; !((a = c = array[i]) != null &amp;&amp; a &lt;= a)) a = c = undefined;
    while (++i &lt; n) if ((b = array[i]) != null) {
      if (a &gt; b) a = b;
      if (c &lt; b) c = b;
    }
  } else {
    while (++i &lt; n &amp;&amp; !((a = c = f.call(array, array[i], i)) != null &amp;&amp; a &lt;= a)) a = undefined;
    while (++i &lt; n) if ((b = f.call(array, array[i], i)) != null) {
      if (a &gt; b) a = b;
      if (c &lt; b) c = b;
    }
  }
  return [a, c];
};
d3.layout = {};
d3.merge = function(arrays) {
  var n = arrays.length,
      m,
      i = -1,
      j = 0,
      merged,
      array;

  while (++i &lt; n) j += arrays[i].length;
  merged = new Array(j);

  while (--n &gt;= 0) {
    array = arrays[n];
    m = array.length;
    while (--m &gt;= 0) {
      merged[--j] = array[m];
    }
  }

  return merged;
};
// Copies a variable number of methods from source to target.
d3.rebind = function(target, source) {
  var i = 1, n = arguments.length, method;
  while (++i &lt; n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
  return target;
};

// Method is assumed to be a standard D3 getter-setter:
// If passed with no arguments, gets the value.
// If passed with arguments, sets the value and returns the target.
function d3_rebind(target, source, method) {
  return function() {
    var value = method.apply(source, arguments);
    return value === source ? target : value;
  };
}

d3.layout.hierarchy = function() {
  var sort = d3_layout_hierarchySort,
      children = d3_layout_hierarchyChildren,
      value = d3_layout_hierarchyValue;

  // Recursively compute the node depth and value.
  // Also converts to a standard hierarchy structure.
  function recurse(node, depth, nodes) {
    var childs = children.call(hierarchy, node, depth);
    node.depth = depth;
    nodes.push(node);
    if (childs &amp;&amp; (n = childs.length)) {
      var i = -1,
          n,
          c = node.children = new Array(n),
          v = 0,
          j = depth + 1,
          d;
      while (++i &lt; n) {
        d = c[i] = recurse(childs[i], j, nodes);
        d.parent = node;
        v += d.value;
      }
      if (sort) c.sort(sort);
      if (value) node.value = v;
    } else {
      delete node.children;
      if (value) {
        node.value = +value.call(hierarchy, node, depth) || 0;
      }
    }
    return node;
  }

  // Recursively re-evaluates the node value.
  function revalue(node, depth) {
    var children = node.children,
        v = 0;
    if (children &amp;&amp; (n = children.length)) {
      var i = -1,
          n,
          j = depth + 1;
      while (++i &lt; n) v += revalue(children[i], j);
    } else if (value) {
      v = +value.call(hierarchy, node, depth) || 0;
    }
    if (value) node.value = v;
    return v;
  }

  function hierarchy(d) {
    var nodes = [];
    recurse(d, 0, nodes);
    return nodes;
  }

  hierarchy.sort = function(x) {
    if (!arguments.length) return sort;
    sort = x;
    return hierarchy;
  };

  hierarchy.children = function(x) {
    if (!arguments.length) return children;
    children = x;
    return hierarchy;
  };

  hierarchy.value = function(x) {
    if (!arguments.length) return value;
    value = x;
    return hierarchy;
  };

  // Re-evaluates the `value` property for the specified hierarchy.
  hierarchy.revalue = function(root) {
    revalue(root, 0);
    return root;
  };

  return hierarchy;
};

// A method assignment helper for hierarchy subclasses.
function d3_layout_hierarchyRebind(object, hierarchy) {
  d3.rebind(object, hierarchy, "sort", "children", "value");

  // Add an alias for nodes and links, for convenience.
  object.nodes = object;
  object.links = d3_layout_hierarchyLinks;

  return object;
}

function d3_layout_hierarchyChildren(d) {
  return d.children;
}

function d3_layout_hierarchyValue(d) {
  return d.value;
}

function d3_layout_hierarchySort(a, b) {
  return b.value - a.value;
}

// Returns an array source+target objects for the specified nodes.
function d3_layout_hierarchyLinks(nodes) {
  return d3.merge(nodes.map(function(parent) {
    return (parent.children || []).map(function(child) {
      return {source: parent, target: child};
    });
  }));
}

// Squarified Treemaps by Mark Bruls, Kees Huizing, and Jarke J. van Wijk
// Modified to support a target aspect ratio by Jeff Heer
d3.layout.treemap = function() {
  var hierarchy = d3.layout.hierarchy(),
      round = Math.round,
      size = [1, 1], // width, height
      padding = null,
      pad = d3_layout_treemapPadNull,
      sticky = false,
      stickies,
      mode = "squarify",
      ratio = 0.5 * (1 + Math.sqrt(5)); // golden ratio

  // Compute the area for each child based on value &amp; scale.
  function scale(children, k) {
    var i = -1,
        n = children.length,
        child,
        area;
    while (++i &lt; n) {
      area = (child = children[i]).value * (k &lt; 0 ? 0 : k);
      child.area = isNaN(area) || area &lt;= 0 ? 0 : area;
    }
  }

  // Recursively arranges the specified node's children into squarified rows.
  function squarify(node) {
    var children = node.children;
    if (children &amp;&amp; children.length) {
      var rect = pad(node),
          row = [],
          remaining = children.slice(), // copy-on-write
          child,
          best = Infinity, // the best row score so far
          score, // the current row score
          u = mode === "slice" ? rect.dx
            : mode === "dice" ? rect.dy
            : mode === "slice-dice" ? node.depth &amp; 1 ? rect.dy : rect.dx
            : Math.min(rect.dx, rect.dy), // initial orientation
          n;
      scale(remaining, rect.dx * rect.dy / node.value);
      row.area = 0;
      while ((n = remaining.length) &gt; 0) {
        row.push(child = remaining[n - 1]);
        row.area += child.area;
        if (mode !== "squarify" || (score = worst(row, u)) &lt;= best) { // continue with this orientation
          remaining.pop();
          best = score;
        } else { // abort, and try a different orientation
          row.area -= row.pop().area;
          position(row, u, rect, false);
          u = Math.min(rect.dx, rect.dy);
          row.length = row.area = 0;
          best = Infinity;
        }
      }
      if (row.length) {
        position(row, u, rect, true);
        row.length = row.area = 0;
      }
      children.forEach(squarify);
    }
  }

  // Recursively resizes the specified node's children into existing rows.
  // Preserves the existing layout!
  function stickify(node) {
    var children = node.children;
    if (children &amp;&amp; children.length) {
      var rect = pad(node),
          remaining = children.slice(), // copy-on-write
          child,
          row = [];
      scale(remaining, rect.dx * rect.dy / node.value);
      row.area = 0;
      while (child = remaining.pop()) {
        row.push(child);
        row.area += child.area;
        if (child.z != null) {
          position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
          row.length = row.area = 0;
        }
      }
      children.forEach(stickify);
    }
  }

  // Computes the score for the specified row, as the worst aspect ratio.
  function worst(row, u) {
    var s = row.area,
        r,
        rmax = 0,
        rmin = Infinity,
        i = -1,
        n = row.length;
    while (++i &lt; n) {
      if (!(r = row[i].area)) continue;
      if (r &lt; rmin) rmin = r;
      if (r &gt; rmax) rmax = r;
    }
    s *= s;
    u *= u;
    return s
        ? Math.max((u * rmax * ratio) / s, s / (u * rmin * ratio))
        : Infinity;
  }

  // Positions the specified row of nodes. Modifies `rect`.
  function position(row, u, rect, flush) {
    var i = -1,
        n = row.length,
        x = rect.x,
        y = rect.y,
        v = u ? round(row.area / u) : 0,
        o;
    if (u == rect.dx) { // horizontal subdivision
      if (flush || v &gt; rect.dy) v = rect.dy; // over+underflow
      while (++i &lt; n) {
        o = row[i];
        o.x = x;
        o.y = y;
        o.dy = v;
        x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
      }
      o.z = true;
      o.dx += rect.x + rect.dx - x; // rounding error
      rect.y += v;
      rect.dy -= v;
    } else { // vertical subdivision
      if (flush || v &gt; rect.dx) v = rect.dx; // over+underflow
      while (++i &lt; n) {
        o = row[i];
        o.x = x;
        o.y = y;
        o.dx = v;
        y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
      }
      o.z = false;
      o.dy += rect.y + rect.dy - y; // rounding error
      rect.x += v;
      rect.dx -= v;
    }
  }

  function treemap(d) {
    var nodes = stickies || hierarchy(d),
        root = nodes[0];
    root.x = 0;
    root.y = 0;
    root.dx = size[0];
    root.dy = size[1];
    if (stickies) hierarchy.revalue(root);
    scale([root], root.dx * root.dy / root.value);
    (stickies ? stickify : squarify)(root);
    if (sticky) stickies = nodes;
    return nodes;
  }

  treemap.size = function(x) {
    if (!arguments.length) return size;
    size = x;
    return treemap;
  };

  treemap.padding = function(x) {
    if (!arguments.length) return padding;

    function padFunction(node) {
      var p = x.call(treemap, node, node.depth);
      return p == null
          ? d3_layout_treemapPadNull(node)
          : d3_layout_treemapPad(node, typeof p === "number" ? [p, p, p, p] : p);
    }

    function padConstant(node) {
      return d3_layout_treemapPad(node, x);
    }

    var type;
    pad = (padding = x) == null ? d3_layout_treemapPadNull
        : (type = typeof x) === "function" ? padFunction
        : type === "number" ? (x = [x, x, x, x], padConstant)
        : padConstant;
    return treemap;
  };

  treemap.round = function(x) {
    if (!arguments.length) return round != Number;
    round = x ? Math.round : Number;
    return treemap;
  };

  treemap.sticky = function(x) {
    if (!arguments.length) return sticky;
    sticky = x;
    stickies = null;
    return treemap;
  };

  treemap.ratio = function(x) {
    if (!arguments.length) return ratio;
    ratio = x;
    return treemap;
  };

  treemap.mode = function(x) {
    if (!arguments.length) return mode;
    mode = x + "";
    return treemap;
  };

  return d3_layout_hierarchyRebind(treemap, hierarchy);
};

function d3_layout_treemapPadNull(node) {
  return {x: node.x, y: node.y, dx: node.dx, dy: node.dy};
}

function d3_layout_treemapPad(node, padding) {
  var x = node.x + padding[3],
      y = node.y + padding[0],
      dx = node.dx - padding[1] - padding[3],
      dy = node.dy - padding[0] - padding[2];
  if (dx &lt; 0) { x += dx / 2; dx = 0; }
  if (dy &lt; 0) { y += dy / 2; dy = 0; }
  return {x: x, y: y, dx: dx, dy: dy};
}
function d3_class(ctor, properties) {
  try {
    for (var key in properties) {
      Object.defineProperty(ctor.prototype, key, {
        value: properties[key],
        enumerable: false
      });
    }
  } catch (e) {
    ctor.prototype = properties;
  }
}

d3.map = function(object) {
  var map = new d3_Map;
  if (object instanceof d3_Map) object.forEach(function(key, value) { map.set(key, value); });
  else for (var key in object) map.set(key, object[key]);
  return map;
};

function d3_Map() {}

d3_class(d3_Map, {
  has: d3_map_has,
  get: function(key) {
    return this[d3_map_prefix + key];
  },
  set: function(key, value) {
    return this[d3_map_prefix + key] = value;
  },
  remove: d3_map_remove,
  keys: d3_map_keys,
  values: function() {
    var values = [];
    this.forEach(function(key, value) { values.push(value); });
    return values;
  },
  entries: function() {
    var entries = [];
    this.forEach(function(key, value) { entries.push({key: key, value: value}); });
    return entries;
  },
  size: d3_map_size,
  empty: d3_map_empty,
  forEach: function(f) {
    for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) f.call(this, key.substring(1), this[key]);
  }
});

var d3_map_prefix = "\0", // prevent collision with built-ins
    d3_map_prefixCode = d3_map_prefix.charCodeAt(0);

function d3_map_has(key) {
  return d3_map_prefix + key in this;
}

function d3_map_remove(key) {
  key = d3_map_prefix + key;
  return key in this &amp;&amp; delete this[key];
}

function d3_map_keys() {
  var keys = [];
  this.forEach(function(key) { keys.push(key); });
  return keys;
}

function d3_map_size() {
  var size = 0;
  for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) ++size;
  return size;
}

function d3_map_empty() {
  for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) return false;
  return true;
}
var abs = Math.abs;

d3.range = function(start, stop, step) {
  if (arguments.length &lt; 3) {
    step = 1;
    if (arguments.length &lt; 2) {
      stop = start;
      start = 0;
    }
  }
  if ((stop - start) / step === Infinity) throw new Error("infinite range");
  var range = [],
       k = d3_range_integerScale(abs(step)),
       i = -1,
       j;
  start *= k, stop *= k, step *= k;
  if (step &lt; 0) while ((j = start + step * ++i) &gt; stop) range.push(j / k);
  else while ((j = start + step * ++i) &lt; stop) range.push(j / k);
  return range;
};

function d3_range_integerScale(x) {
  var k = 1;
  while (x * k % 1) k *= 10;
  return k;
}
d3.scale = {};

function d3_scaleExtent(domain) {
  var start = domain[0], stop = domain[domain.length - 1];
  return start &lt; stop ? [start, stop] : [stop, start];
}

function d3_scaleRange(scale) {
  return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
}

d3.scale.ordinal = function() {
  return d3_scale_ordinal([], {t: "range", a: [[]]});
};

function d3_scale_ordinal(domain, ranger) {
  var index,
      range,
      rangeBand;

  function scale(x) {
    return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
  }

  function steps(start, step) {
    return d3.range(domain.length).map(function(i) { return start + step * i; });
  }

  scale.domain = function(x) {
    if (!arguments.length) return domain;
    domain = [];
    index = new d3_Map;
    var i = -1, n = x.length, xi;
    while (++i &lt; n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
    return scale[ranger.t].apply(scale, ranger.a);
  };

  scale.range = function(x) {
    if (!arguments.length) return range;
    range = x;
    rangeBand = 0;
    ranger = {t: "range", a: arguments};
    return scale;
  };

  scale.rangePoints = function(x, padding) {
    if (arguments.length &lt; 2) padding = 0;
    var start = x[0],
        stop = x[1],
        step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
    range = steps(domain.length &lt; 2 ? (start + stop) / 2 : start + step * padding / 2, step);
    rangeBand = 0;
    ranger = {t: "rangePoints", a: arguments};
    return scale;
  };

  scale.rangeBands = function(x, padding, outerPadding) {
    if (arguments.length &lt; 2) padding = 0;
    if (arguments.length &lt; 3) outerPadding = padding;
    var reverse = x[1] &lt; x[0],
        start = x[reverse - 0],
        stop = x[1 - reverse],
        step = (stop - start) / (domain.length - padding + 2 * outerPadding);
    range = steps(start + step * outerPadding, step);
    if (reverse) range.reverse();
    rangeBand = step * (1 - padding);
    ranger = {t: "rangeBands", a: arguments};
    return scale;
  };

  scale.rangeRoundBands = function(x, padding, outerPadding) {
    if (arguments.length &lt; 2) padding = 0;
    if (arguments.length &lt; 3) outerPadding = padding;
    var reverse = x[1] &lt; x[0],
        start = x[reverse - 0],
        stop = x[1 - reverse],
        step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)),
        error = stop - start - (domain.length - padding) * step;
    range = steps(start + Math.round(error / 2), step);
    if (reverse) range.reverse();
    rangeBand = Math.round(step * (1 - padding));
    ranger = {t: "rangeRoundBands", a: arguments};
    return scale;
  };

  scale.rangeBand = function() {
    return rangeBand;
  };

  scale.rangeExtent = function() {
    return d3_scaleExtent(ranger.a[0]);
  };

  scale.copy = function() {
    return d3_scale_ordinal(domain, ranger);
  };

  return scale.domain(domain);
}
function d3_Color() {}

d3_Color.prototype.toString = function() {
  return this.rgb() + "";
};

d3.hsl = function(h, s, l) {
  return arguments.length === 1
      ? (h instanceof d3_Hsl ? d3_hsl(h.h, h.s, h.l)
      : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl))
      : d3_hsl(+h, +s, +l);
};

function d3_hsl(h, s, l) {
  return new d3_Hsl(h, s, l);
}

function d3_Hsl(h, s, l) {
  this.h = h;
  this.s = s;
  this.l = l;
}

var d3_hslPrototype = d3_Hsl.prototype = new d3_Color;

d3_hslPrototype.brighter = function(k) {
  k = Math.pow(0.7, arguments.length ? k : 1);
  return d3_hsl(this.h, this.s, this.l / k);
};

d3_hslPrototype.darker = function(k) {
  k = Math.pow(0.7, arguments.length ? k : 1);
  return d3_hsl(this.h, this.s, k * this.l);
};

d3_hslPrototype.rgb = function() {
  return d3_hsl_rgb(this.h, this.s, this.l);
};

function d3_hsl_rgb(h, s, l) {
  var m1,
      m2;

  /* Some simple corrections for h, s and l. */
  h = isNaN(h) ? 0 : (h %= 360) &lt; 0 ? h + 360 : h;
  s = isNaN(s) ? 0 : s &lt; 0 ? 0 : s &gt; 1 ? 1 : s;
  l = l &lt; 0 ? 0 : l &gt; 1 ? 1 : l;

  /* From FvD 13.37, CSS Color Module Level 3 */
  m2 = l &lt;= .5 ? l * (1 + s) : l + s - l * s;
  m1 = 2 * l - m2;

  function v(h) {
    if (h &gt; 360) h -= 360;
    else if (h &lt; 0) h += 360;
    if (h &lt; 60) return m1 + (m2 - m1) * h / 60;
    if (h &lt; 180) return m2;
    if (h &lt; 240) return m1 + (m2 - m1) * (240 - h) / 60;
    return m1;
  }

  function vv(h) {
    return Math.round(v(h) * 255);
  }

  return d3_rgb(vv(h + 120), vv(h), vv(h - 120));
}
var pi = Math.PI,
    tau = 2 * pi,
    halfpi = pi / 2,
    epsilon = 1e-6,
    epsilon2 = epsilon * epsilon,
    d3_radians = pi / 180,
    d3_degrees = 180 / pi;

function d3_sgn(x) {
  return x &gt; 0 ? 1 : x &lt; 0 ? -1 : 0;
}

// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
// right, +y is up). Returns a positive value if ABC is counter-clockwise,
// negative if clockwise, and zero if the points are collinear.
function d3_cross2d(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
}

function d3_acos(x) {
  return x &gt; 1 ? 0 : x &lt; -1 ? pi : Math.acos(x);
}

function d3_asin(x) {
  return x &gt; 1 ? halfpi : x &lt; -1 ? -halfpi : Math.asin(x);
}

function d3_sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function d3_cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function d3_tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

function d3_haversin(x) {
  return (x = Math.sin(x / 2)) * x;
}

d3.hcl = function(h, c, l) {
  return arguments.length === 1
      ? (h instanceof d3_Hcl ? d3_hcl(h.h, h.c, h.l)
      : (h instanceof d3_Lab ? d3_lab_hcl(h.l, h.a, h.b)
      : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b)))
      : d3_hcl(+h, +c, +l);
};

function d3_hcl(h, c, l) {
  return new d3_Hcl(h, c, l);
}

function d3_Hcl(h, c, l) {
  this.h = h;
  this.c = c;
  this.l = l;
}

var d3_hclPrototype = d3_Hcl.prototype = new d3_Color;

d3_hclPrototype.brighter = function(k) {
  return d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
};

d3_hclPrototype.darker = function(k) {
  return d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
};

d3_hclPrototype.rgb = function() {
  return d3_hcl_lab(this.h, this.c, this.l).rgb();
};

function d3_hcl_lab(h, c, l) {
  if (isNaN(h)) h = 0;
  if (isNaN(c)) c = 0;
  return d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
}

d3.lab = function(l, a, b) {
  return arguments.length === 1
      ? (l instanceof d3_Lab ? d3_lab(l.l, l.a, l.b)
      : (l instanceof d3_Hcl ? d3_hcl_lab(l.l, l.c, l.h)
      : d3_rgb_lab((l = d3.rgb(l)).r, l.g, l.b)))
      : d3_lab(+l, +a, +b);
};

function d3_lab(l, a, b) {
  return new d3_Lab(l, a, b);
}

function d3_Lab(l, a, b) {
  this.l = l;
  this.a = a;
  this.b = b;
}

// Corresponds roughly to RGB brighter/darker
var d3_lab_K = 18;

// D65 standard referent
var d3_lab_X = 0.950470,
    d3_lab_Y = 1,
    d3_lab_Z = 1.088830;

var d3_labPrototype = d3_Lab.prototype = new d3_Color;

d3_labPrototype.brighter = function(k) {
  return d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
};

d3_labPrototype.darker = function(k) {
  return d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
};

d3_labPrototype.rgb = function() {
  return d3_lab_rgb(this.l, this.a, this.b);
};

function d3_lab_rgb(l, a, b) {
  var y = (l + 16) / 116,
      x = y + a / 500,
      z = y - b / 200;
  x = d3_lab_xyz(x) * d3_lab_X;
  y = d3_lab_xyz(y) * d3_lab_Y;
  z = d3_lab_xyz(z) * d3_lab_Z;
  return d3_rgb(
    d3_xyz_rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z),
    d3_xyz_rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
    d3_xyz_rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z)
  );
}

function d3_lab_hcl(l, a, b) {
  return l &gt; 0
      ? d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l)
      : d3_hcl(NaN, NaN, l);
}

function d3_lab_xyz(x) {
  return x &gt; 0.206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
}
function d3_xyz_lab(x) {
  return x &gt; 0.008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
}

function d3_xyz_rgb(r) {
  return Math.round(255 * (r &lt;= 0.00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - 0.055));
}

d3.rgb = function(r, g, b) {
  return arguments.length === 1
      ? (r instanceof d3_Rgb ? d3_rgb(r.r, r.g, r.b)
      : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb))
      : d3_rgb(~~r, ~~g, ~~b);
};

function d3_rgbNumber(value) {
  return d3_rgb(value &gt;&gt; 16, value &gt;&gt; 8 &amp; 0xff, value &amp; 0xff);
}

function d3_rgbString(value) {
  return d3_rgbNumber(value) + "";
}

function d3_rgb(r, g, b) {
  return new d3_Rgb(r, g, b);
}

function d3_Rgb(r, g, b) {
  this.r = r;
  this.g = g;
  this.b = b;
}

var d3_rgbPrototype = d3_Rgb.prototype = new d3_Color;

d3_rgbPrototype.brighter = function(k) {
  k = Math.pow(0.7, arguments.length ? k : 1);
  var r = this.r,
      g = this.g,
      b = this.b,
      i = 30;
  if (!r &amp;&amp; !g &amp;&amp; !b) return d3_rgb(i, i, i);
  if (r &amp;&amp; r &lt; i) r = i;
  if (g &amp;&amp; g &lt; i) g = i;
  if (b &amp;&amp; b &lt; i) b = i;
  return d3_rgb(Math.min(255, ~~(r / k)), Math.min(255, ~~(g / k)), Math.min(255, ~~(b / k)));
};

d3_rgbPrototype.darker = function(k) {
  k = Math.pow(0.7, arguments.length ? k : 1);
  return d3_rgb(~~(k * this.r), ~~(k * this.g), ~~(k * this.b));
};

d3_rgbPrototype.hsl = function() {
  return d3_rgb_hsl(this.r, this.g, this.b);
};

d3_rgbPrototype.toString = function() {
  return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
};

function d3_rgb_hex(v) {
  return v &lt; 0x10
      ? "0" + Math.max(0, v).toString(16)
      : Math.min(255, v).toString(16);
}

function d3_rgb_parse(format, rgb, hsl) {
  var r = 0, // red channel; int in [0, 255]
      g = 0, // green channel; int in [0, 255]
      b = 0, // blue channel; int in [0, 255]
      m1, // CSS color specification match
      m2, // CSS color specification type (e.g., rgb)
      color;

  /* Handle hsl, rgb. */
  m1 = /([a-z]+)\((.*)\)/i.exec(format);
  if (m1) {
    m2 = m1[2].split(",");
    switch (m1[1]) {
      case "hsl": {
        return hsl(
          parseFloat(m2[0]), // degrees
          parseFloat(m2[1]) / 100, // percentage
          parseFloat(m2[2]) / 100 // percentage
        );
      }
      case "rgb": {
        return rgb(
          d3_rgb_parseNumber(m2[0]),
          d3_rgb_parseNumber(m2[1]),
          d3_rgb_parseNumber(m2[2])
        );
      }
    }
  }

  /* Named colors. */
  if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);

  /* Hexadecimal colors: #rgb and #rrggbb. */
  if (format != null &amp;&amp; format.charAt(0) === "#" &amp;&amp; !isNaN(color = parseInt(format.substring(1), 16))) {
    if (format.length === 4) {
      r = (color &amp; 0xf00) &gt;&gt; 4; r = (r &gt;&gt; 4) | r;
      g = (color &amp; 0xf0); g = (g &gt;&gt; 4) | g;
      b = (color &amp; 0xf); b = (b &lt;&lt; 4) | b;
    } else if (format.length === 7) {
      r = (color &amp; 0xff0000) &gt;&gt; 16;
      g = (color &amp; 0xff00) &gt;&gt; 8;
      b = (color &amp; 0xff);
    }
  }

  return rgb(r, g, b);
}

function d3_rgb_hsl(r, g, b) {
  var min = Math.min(r /= 255, g /= 255, b /= 255),
      max = Math.max(r, g, b),
      d = max - min,
      h,
      s,
      l = (max + min) / 2;
  if (d) {
    s = l &lt; .5 ? d / (max + min) : d / (2 - max - min);
    if (r == max) h = (g - b) / d + (g &lt; b ? 6 : 0);
    else if (g == max) h = (b - r) / d + 2;
    else h = (r - g) / d + 4;
    h *= 60;
  } else {
    h = NaN;
    s = l &gt; 0 &amp;&amp; l &lt; 1 ? 0 : h;
  }
  return d3_hsl(h, s, l);
}

function d3_rgb_lab(r, g, b) {
  r = d3_rgb_xyz(r);
  g = d3_rgb_xyz(g);
  b = d3_rgb_xyz(b);
  var x = d3_xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / d3_lab_X),
      y = d3_xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / d3_lab_Y),
      z = d3_xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / d3_lab_Z);
  return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
}

function d3_rgb_xyz(r) {
  return (r /= 255) &lt;= 0.04045 ? r / 12.92 : Math.pow((r + 0.055) / 1.055, 2.4);
}

function d3_rgb_parseNumber(c) { // either integer or percentage
  var f = parseFloat(c);
  return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
}

var d3_rgb_names = d3.map({
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
});

d3_rgb_names.forEach(function(key, value) {
  d3_rgb_names.set(key, d3_rgbNumber(value));
});

d3.interpolateRgb = d3_interpolateRgb;

function d3_interpolateRgb(a, b) {
  a = d3.rgb(a);
  b = d3.rgb(b);
  var ar = a.r,
      ag = a.g,
      ab = a.b,
      br = b.r - ar,
      bg = b.g - ag,
      bb = b.b - ab;
  return function(t) {
    return "#"
        + d3_rgb_hex(Math.round(ar + br * t))
        + d3_rgb_hex(Math.round(ag + bg * t))
        + d3_rgb_hex(Math.round(ab + bb * t));
  };
}

d3.interpolateObject = d3_interpolateObject;

function d3_interpolateObject(a, b) {
  var i = {},
      c = {},
      k;
  for (k in a) {
    if (k in b) {
      i[k] = d3_interpolate(a[k], b[k]);
    } else {
      c[k] = a[k];
    }
  }
  for (k in b) {
    if (!(k in a)) {
      c[k] = b[k];
    }
  }
  return function(t) {
    for (k in i) c[k] = i[k](t);
    return c;
  };
}

d3.interpolateArray = d3_interpolateArray;

function d3_interpolateArray(a, b) {
  var x = [],
      c = [],
      na = a.length,
      nb = b.length,
      n0 = Math.min(a.length, b.length),
      i;
  for (i = 0; i &lt; n0; ++i) x.push(d3_interpolate(a[i], b[i]));
  for (; i &lt; na; ++i) c[i] = a[i];
  for (; i &lt; nb; ++i) c[i] = b[i];
  return function(t) {
    for (i = 0; i &lt; n0; ++i) c[i] = x[i](t);
    return c;
  };
}
d3.interpolateNumber = d3_interpolateNumber;

function d3_interpolateNumber(a, b) {
  b -= a = +a;
  return function(t) { return a + b * t; };
}

d3.interpolateString = d3_interpolateString;

function d3_interpolateString(a, b) {
  var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      s = [], // string constants and placeholders
      q = []; // number interpolators

  // Coerce inputs to strings.
  a = a + "", b = b + "";

  // Interpolate pairs of numbers in a &amp; b.
  while ((am = d3_interpolate_numberA.exec(a))
      &amp;&amp; (bm = d3_interpolate_numberB.exec(b))) {
    if ((bs = bm.index) &gt; bi) { // a string precedes the next number in b
      bs = b.substring(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) { // numbers in a &amp; b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else { // interpolate non-matching numbers
      s[++i] = null;
      q.push({i: i, x: d3_interpolateNumber(am, bm)});
    }
    bi = d3_interpolate_numberB.lastIndex;
  }

  // Add remains of b.
  if (bi &lt; b.length) {
    bs = b.substring(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  }

  // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.
  return s.length &lt; 2
      ? (q[0] ? (b = q[0].x, function(t) { return b(t) + ""; })
      : function() { return b; })
      : (b = q.length, function(t) {
          for (var i = 0, o; i &lt; b; ++i) s[(o = q[i]).i] = o.x(t);
          return s.join("");
        });
}

var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");

d3.interpolate = d3_interpolate;

function d3_interpolate(a, b) {
  var i = d3.interpolators.length, f;
  while (--i &gt;= 0 &amp;&amp; !(f = d3.interpolators[i](a, b)));
  return f;
}

d3.interpolators = [
  function(a, b) {
    var t = typeof b;
    return (t === "string" ? (d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString)
        : b instanceof d3_Color ? d3_interpolateRgb
        : Array.isArray(b) ? d3_interpolateArray
        : t === "object" &amp;&amp; isNaN(b) ? d3_interpolateObject
        : d3_interpolateNumber)(a, b);
  }
];
d3.interpolateRound = d3_interpolateRound;

function d3_interpolateRound(a, b) {
  b -= a;
  return function(t) { return Math.round(a + b * t); };
}
function d3_uninterpolateNumber(a, b) {
  b = b - (a = +a) ? 1 / (b - a) : 0;
  return function(x) { return (x - a) * b; };
}

function d3_uninterpolateClamp(a, b) {
  b = b - (a = +a) ? 1 / (b - a) : 0;
  return function(x) { return Math.max(0, Math.min(1, (x - a) * b)); };
}
function d3_identity(d) {
  return d;
}
function d3_format_precision(x, p) {
  return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
}
d3.round = function(x, n) {
  return n
      ? Math.round(x * (n = Math.pow(10, n))) / n
      : Math.round(x);
};

var d3_formatPrefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(d3_formatPrefix);

d3.formatPrefix = function(value, precision) {
  var i = 0;
  if (value) {
    if (value &lt; 0) value *= -1;
    if (precision) value = d3.round(value, d3_format_precision(value, precision));
    i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
    i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
  }
  return d3_formatPrefixes[8 + i / 3];
};

function d3_formatPrefix(d, i) {
  var k = Math.pow(10, abs(8 - i) * 3);
  return {
    scale: i &gt; 8 ? function(d) { return d / k; } : function(d) { return d * k; },
    symbol: d
  };
}

function d3_locale_numberFormat(locale) {
  var locale_decimal = locale.decimal,
      locale_thousands = locale.thousands,
      locale_grouping = locale.grouping,
      locale_currency = locale.currency,
      formatGroup = locale_grouping ? function(value) {
        var i = value.length,
            t = [],
            j = 0,
            g = locale_grouping[0];
        while (i &gt; 0 &amp;&amp; g &gt; 0) {
          t.push(value.substring(i -= g, i + g));
          g = locale_grouping[j = (j + 1) % locale_grouping.length];
        }
        return t.reverse().join(locale_thousands);
      } : d3_identity;

  return function(specifier) {
    var match = d3_format_re.exec(specifier),
        fill = match[1] || " ",
        align = match[2] || "&gt;",
        sign = match[3] || "",
        symbol = match[4] || "",
        zfill = match[5],
        width = +match[6],
        comma = match[7],
        precision = match[8],
        type = match[9],
        scale = 1,
        prefix = "",
        suffix = "",
        integer = false;

    if (precision) precision = +precision.substring(1);

    if (zfill || fill === "0" &amp;&amp; align === "=") {
      zfill = fill = "0";
      align = "=";
      if (comma) width -= Math.floor((width - 1) / 4);
    }

    switch (type) {
      case "n": comma = true; type = "g"; break;
      case "%": scale = 100; suffix = "%"; type = "f"; break;
      case "p": scale = 100; suffix = "%"; type = "r"; break;
      case "b":
      case "o":
      case "x":
      case "X": if (symbol === "#") prefix = "0" + type.toLowerCase();
      case "c":
      case "d": integer = true; precision = 0; break;
      case "s": scale = -1; type = "r"; break;
    }

    if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];

    // If no precision is specified for r, fallback to general notation.
    if (type == "r" &amp;&amp; !precision) type = "g";

    // Ensure that the requested precision is in the supported range.
    if (precision != null) {
      if (type == "g") precision = Math.max(1, Math.min(21, precision));
      else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
    }

    type = d3_format_types.get(type) || d3_format_typeDefault;

    var zcomma = zfill &amp;&amp; comma;

    return function(value) {
      var fullSuffix = suffix;

      // Return the empty string for floats formatted as ints.
      if (integer &amp;&amp; (value % 1)) return "";

      // Convert negative to positive, and record the sign prefix.
      var negative = value &lt; 0 || value === 0 &amp;&amp; 1 / value &lt; 0 ? (value = -value, "-") : sign;

      // Apply the scale, computing it from the value's exponent for si format.
      // Preserve the existing suffix, if any, such as the currency symbol.
      if (scale &lt; 0) {
        var unit = d3.formatPrefix(value, precision);
        value = unit.scale(value);
        fullSuffix = unit.symbol + suffix;
      } else {
        value *= scale;
      }

      // Convert to the desired precision.
      value = type(value, precision);

      // Break the value into the integer part (before) and decimal part (after).
      var i = value.lastIndexOf("."),
          before = i &lt; 0 ? value : value.substring(0, i),
          after = i &lt; 0 ? "" : locale_decimal + value.substring(i + 1);

       // If the fill character is not "0", grouping is applied before padding.
      if (!zfill &amp;&amp; comma) before = formatGroup(before);

      var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length),
          padding = length &lt; width ? new Array(length = width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (zcomma) before = formatGroup(padding + before);

      // Apply prefix.
      negative += prefix;

      // Rejoin integer and decimal parts.
      value = before + after;

      return (align === "&lt;" ? negative + value + padding
            : align === "&gt;" ? padding + negative + value
            : align === "^" ? padding.substring(0, length &gt;&gt;= 1) + negative + value + padding.substring(length)
            : negative + (zcomma ? value : padding + value)) + fullSuffix;
    };
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][type]
var d3_format_re = /(?:([^{])?([&lt;&gt;=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;

var d3_format_types = d3.map({
  b: function(x) { return x.toString(2); },
  c: function(x) { return String.fromCharCode(x); },
  o: function(x) { return x.toString(8); },
  x: function(x) { return x.toString(16); },
  X: function(x) { return x.toString(16).toUpperCase(); },
  g: function(x, p) { return x.toPrecision(p); },
  e: function(x, p) { return x.toExponential(p); },
  f: function(x, p) { return x.toFixed(p); },
  r: function(x, p) { return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p)))); }
});

function d3_format_typeDefault(x) {
  return x + "";
}
d3.requote = function(s) {
  return s.replace(d3_requote_re, "\\$&amp;");
};

var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
var d3_time = d3.time = {},
    d3_date = Date;

function d3_date_utc() {
  this._ = new Date(arguments.length &gt; 1
      ? Date.UTC.apply(this, arguments)
      : arguments[0]);
}

d3_date_utc.prototype = {
  getDate: function() { return this._.getUTCDate(); },
  getDay: function() { return this._.getUTCDay(); },
  getFullYear: function() { return this._.getUTCFullYear(); },
  getHours: function() { return this._.getUTCHours(); },
  getMilliseconds: function() { return this._.getUTCMilliseconds(); },
  getMinutes: function() { return this._.getUTCMinutes(); },
  getMonth: function() { return this._.getUTCMonth(); },
  getSeconds: function() { return this._.getUTCSeconds(); },
  getTime: function() { return this._.getTime(); },
  getTimezoneOffset: function() { return 0; },
  valueOf: function() { return this._.valueOf(); },
  setDate: function() { d3_time_prototype.setUTCDate.apply(this._, arguments); },
  setDay: function() { d3_time_prototype.setUTCDay.apply(this._, arguments); },
  setFullYear: function() { d3_time_prototype.setUTCFullYear.apply(this._, arguments); },
  setHours: function() { d3_time_prototype.setUTCHours.apply(this._, arguments); },
  setMilliseconds: function() { d3_time_prototype.setUTCMilliseconds.apply(this._, arguments); },
  setMinutes: function() { d3_time_prototype.setUTCMinutes.apply(this._, arguments); },
  setMonth: function() { d3_time_prototype.setUTCMonth.apply(this._, arguments); },
  setSeconds: function() { d3_time_prototype.setUTCSeconds.apply(this._, arguments); },
  setTime: function() { d3_time_prototype.setTime.apply(this._, arguments); }
};

var d3_time_prototype = Date.prototype;

function d3_time_interval(local, step, number) {

  function round(date) {
    var d0 = local(date), d1 = offset(d0, 1);
    return date - d0 &lt; d1 - date ? d0 : d1;
  }

  function ceil(date) {
    step(date = local(new d3_date(date - 1)), 1);
    return date;
  }

  function offset(date, k) {
    step(date = new d3_date(+date), k);
    return date;
  }

  function range(t0, t1, dt) {
    var time = ceil(t0), times = [];
    if (dt &gt; 1) {
      while (time &lt; t1) {
        if (!(number(time) % dt)) times.push(new Date(+time));
        step(time, 1);
      }
    } else {
      while (time &lt; t1) times.push(new Date(+time)), step(time, 1);
    }
    return times;
  }

  function range_utc(t0, t1, dt) {
    try {
      d3_date = d3_date_utc;
      var utc = new d3_date_utc();
      utc._ = t0;
      return range(utc, t1, dt);
    } finally {
      d3_date = Date;
    }
  }

  local.floor = local;
  local.round = round;
  local.ceil = ceil;
  local.offset = offset;
  local.range = range;

  var utc = local.utc = d3_time_interval_utc(local);
  utc.floor = utc;
  utc.round = d3_time_interval_utc(round);
  utc.ceil = d3_time_interval_utc(ceil);
  utc.offset = d3_time_interval_utc(offset);
  utc.range = range_utc;

  return local;
}

function d3_time_interval_utc(method) {
  return function(date, k) {
    try {
      d3_date = d3_date_utc;
      var utc = new d3_date_utc();
      utc._ = date;
      return method(utc, k)._;
    } finally {
      d3_date = Date;
    }
  };
}

d3_time.year = d3_time_interval(function(date) {
  date = d3_time.day(date);
  date.setMonth(0, 1);
  return date;
}, function(date, offset) {
  date.setFullYear(date.getFullYear() + offset);
}, function(date) {
  return date.getFullYear();
});

d3_time.years = d3_time.year.range;
d3_time.years.utc = d3_time.year.utc.range;

d3_time.day = d3_time_interval(function(date) {
  var day = new d3_date(2000, 0);
  day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
  return day;
}, function(date, offset) {
  date.setDate(date.getDate() + offset);
}, function(date) {
  return date.getDate() - 1;
});

d3_time.days = d3_time.day.range;
d3_time.days.utc = d3_time.day.utc.range;

d3_time.dayOfYear = function(date) {
  var year = d3_time.year(date);
  return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
};

["sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday"].forEach(function(day, i) {
  i = 7 - i;

  var interval = d3_time[day] = d3_time_interval(function(date) {
    (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
    return date;
  }, function(date, offset) {
    date.setDate(date.getDate() + Math.floor(offset) * 7);
  }, function(date) {
    var day = d3_time.year(date).getDay();
    return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
  });

  d3_time[day + "s"] = interval.range;
  d3_time[day + "s"].utc = interval.utc.range;

  d3_time[day + "OfYear"] = function(date) {
    var day = d3_time.year(date).getDay();
    return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
  };
});

d3_time.week = d3_time.sunday;
d3_time.weeks = d3_time.sunday.range;
d3_time.weeks.utc = d3_time.sunday.utc.range;
d3_time.weekOfYear = d3_time.sundayOfYear;

function d3_locale_timeFormat(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_days = locale.days,
      locale_shortDays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;

  function d3_time_format(template) {
    var n = template.length;

    function format(date) {
      var string = [],
          i = -1,
          j = 0,
          c,
          p,
          f;
      while (++i &lt; n) {
        if (template.charCodeAt(i) === 37) {
          string.push(template.substring(j, i));
          if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
          if (f = d3_time_formats[c]) c = f(date, p == null ? (c === "e" ? " " : "0") : p);
          string.push(c);
          j = i + 1;
        }
      }
      string.push(template.substring(j, i));
      return string.join("");
    }

    format.parse = function(string) {
      var d = {y: 1900, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0, Z: null},
          i = d3_time_parse(d, template, string, 0);
      if (i != string.length) return null;

      // The am-pm flag is 0 for AM, and 1 for PM.
      if ("p" in d) d.H = d.H % 12 + d.p * 12;

      // If a time zone is specified, it is always relative to UTC;
      // we need to use d3_date_utc if we aren’t already.
      var localZ = d.Z != null &amp;&amp; d3_date !== d3_date_utc,
          date = new (localZ ? d3_date_utc : d3_date);

      // Set year, month, date.
      if ("j" in d) date.setFullYear(d.y, 0, d.j);
      else if ("w" in d &amp;&amp; ("W" in d || "U" in d)) {
        date.setFullYear(d.y, 0, 1);
        date.setFullYear(d.y, 0, "W" in d
            ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7
            :  d.w          + d.U * 7 - (date.getDay() + 6) % 7);
      } else date.setFullYear(d.y, d.m, d.d);

      // Set hours, minutes, seconds and milliseconds.
      date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);

      return localZ ? date._ : date;
    };

    format.toString = function() {
      return template;
    };

    return format;
  }

  function d3_time_parse(date, template, string, j) {
    var c,
        p,
        t,
        i = 0,
        n = template.length,
        m = string.length;
    while (i &lt; n) {
      if (j &gt;= m) return -1;
      c = template.charCodeAt(i++);
      if (c === 37) {
        t = template.charAt(i++);
        p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
        if (!p || ((j = p(date, string, j)) &lt; 0)) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }
    return j;
  }

  d3_time_format.utc = function(template) {
    var local = d3_time_format(template);

    function format(date) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date();
        utc._ = date;
        return local(utc);
      } finally {
        d3_date = Date;
      }
    }

    format.parse = function(string) {
      try {
        d3_date = d3_date_utc;
        var date = local.parse(string);
        return date &amp;&amp; date._;
      } finally {
        d3_date = Date;
      }
    };

    format.toString = local.toString;

    return format;
  };

  d3_time_format.multi =
  d3_time_format.utc.multi = d3_time_formatMulti;

  var d3_time_periodLookup = d3.map(),
      d3_time_dayRe = d3_time_formatRe(locale_days),
      d3_time_dayLookup = d3_time_formatLookup(locale_days),
      d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays),
      d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays),
      d3_time_monthRe = d3_time_formatRe(locale_months),
      d3_time_monthLookup = d3_time_formatLookup(locale_months),
      d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths),
      d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);

  locale_periods.forEach(function(p, i) {
    d3_time_periodLookup.set(p.toLowerCase(), i);
  });

  var d3_time_formats = {
    a: function(d) { return locale_shortDays[d.getDay()]; },
    A: function(d) { return locale_days[d.getDay()]; },
    b: function(d) { return locale_shortMonths[d.getMonth()]; },
    B: function(d) { return locale_months[d.getMonth()]; },
    c: d3_time_format(locale_dateTime),
    d: function(d, p) { return d3_time_formatPad(d.getDate(), p, 2); },
    e: function(d, p) { return d3_time_formatPad(d.getDate(), p, 2); },
    H: function(d, p) { return d3_time_formatPad(d.getHours(), p, 2); },
    I: function(d, p) { return d3_time_formatPad(d.getHours() % 12 || 12, p, 2); },
    j: function(d, p) { return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3); },
    L: function(d, p) { return d3_time_formatPad(d.getMilliseconds(), p, 3); },
    m: function(d, p) { return d3_time_formatPad(d.getMonth() + 1, p, 2); },
    M: function(d, p) { return d3_time_formatPad(d.getMinutes(), p, 2); },
    p: function(d) { return locale_periods[+(d.getHours() &gt;= 12)]; },
    S: function(d, p) { return d3_time_formatPad(d.getSeconds(), p, 2); },
    U: function(d, p) { return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2); },
    w: function(d) { return d.getDay(); },
    W: function(d, p) { return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2); },
    x: d3_time_format(locale_date),
    X: d3_time_format(locale_time),
    y: function(d, p) { return d3_time_formatPad(d.getFullYear() % 100, p, 2); },
    Y: function(d, p) { return d3_time_formatPad(d.getFullYear() % 10000, p, 4); },
    Z: d3_time_zone,
    "%": function() { return "%"; }
  };

  var d3_time_parsers = {
    a: d3_time_parseWeekdayAbbrev,
    A: d3_time_parseWeekday,
    b: d3_time_parseMonthAbbrev,
    B: d3_time_parseMonth,
    c: d3_time_parseLocaleFull,
    d: d3_time_parseDay,
    e: d3_time_parseDay,
    H: d3_time_parseHour24,
    I: d3_time_parseHour24,
    j: d3_time_parseDayOfYear,
    L: d3_time_parseMilliseconds,
    m: d3_time_parseMonthNumber,
    M: d3_time_parseMinutes,
    p: d3_time_parseAmPm,
    S: d3_time_parseSeconds,
    U: d3_time_parseWeekNumberSunday,
    w: d3_time_parseWeekdayNumber,
    W: d3_time_parseWeekNumberMonday,
    x: d3_time_parseLocaleDate,
    X: d3_time_parseLocaleTime,
    y: d3_time_parseYear,
    Y: d3_time_parseFullYear,
    Z: d3_time_parseZone,
    "%": d3_time_parseLiteralPercent
  };

  function d3_time_parseWeekdayAbbrev(date, string, i) {
    d3_time_dayAbbrevRe.lastIndex = 0;
    var n = d3_time_dayAbbrevRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function d3_time_parseWeekday(date, string, i) {
    d3_time_dayRe.lastIndex = 0;
    var n = d3_time_dayRe.exec(string.substring(i));
    return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function d3_time_parseMonthAbbrev(date, string, i) {
    d3_time_monthAbbrevRe.lastIndex = 0;
    var n = d3_time_monthAbbrevRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function d3_time_parseMonth(date, string, i) {
    d3_time_monthRe.lastIndex = 0;
    var n = d3_time_monthRe.exec(string.substring(i));
    return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function d3_time_parseLocaleFull(date, string, i) {
    return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
  }

  function d3_time_parseLocaleDate(date, string, i) {
    return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
  }

  function d3_time_parseLocaleTime(date, string, i) {
    return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
  }

  function d3_time_parseAmPm(date, string, i) {
    var n = d3_time_periodLookup.get(string.substring(i, i += 2).toLowerCase());
    return n == null ? -1 : (date.p = n, i);
  }

  return d3_time_format;
}

var d3_time_formatPads = {"-": "", "_": " ", "0": "0"},
    d3_time_numberRe = /^\s*\d+/, // note: ignores next directive
    d3_time_percentRe = /^%/;

function d3_time_formatPad(value, fill, width) {
  var sign = value &lt; 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length &lt; width ? new Array(width - length + 1).join(fill) + string : string);
}

function d3_time_formatRe(names) {
  return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
}

function d3_time_formatLookup(names) {
  var map = new d3_Map, i = -1, n = names.length;
  while (++i &lt; n) map.set(names[i].toLowerCase(), i);
  return map;
}

function d3_time_parseWeekdayNumber(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 1));
  return n ? (date.w = +n[0], i + n[0].length) : -1;
}

function d3_time_parseWeekNumberSunday(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i));
  return n ? (date.U = +n[0], i + n[0].length) : -1;
}

function d3_time_parseWeekNumberMonday(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i));
  return n ? (date.W = +n[0], i + n[0].length) : -1;
}

function d3_time_parseFullYear(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 4));
  return n ? (date.y = +n[0], i + n[0].length) : -1;
}

function d3_time_parseYear(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
}

function d3_time_parseZone(date, string, i) {
  return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5))
      ? (date.Z = -string, i + 5) // sign differs from getTimezoneOffset!
      : -1;
}

function d3_time_expandYear(d) {
  return d + (d &gt; 68 ? 1900 : 2000);
}

function d3_time_parseMonthNumber(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
}

function d3_time_parseDay(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.d = +n[0], i + n[0].length) : -1;
}

function d3_time_parseDayOfYear(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 3));
  return n ? (date.j = +n[0], i + n[0].length) : -1;
}

// Note: we don't validate that the hour is in the range [0,23] or [1,12].
function d3_time_parseHour24(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.H = +n[0], i + n[0].length) : -1;
}

function d3_time_parseMinutes(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.M = +n[0], i + n[0].length) : -1;
}

function d3_time_parseSeconds(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 2));
  return n ? (date.S = +n[0], i + n[0].length) : -1;
}

function d3_time_parseMilliseconds(date, string, i) {
  d3_time_numberRe.lastIndex = 0;
  var n = d3_time_numberRe.exec(string.substring(i, i + 3));
  return n ? (date.L = +n[0], i + n[0].length) : -1;
}

// TODO table of time zone offset names?
function d3_time_zone(d) {
  var z = d.getTimezoneOffset(),
      zs = z &gt; 0 ? "-" : "+",
      zh = ~~(abs(z) / 60),
      zm = abs(z) % 60;
  return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
}

function d3_time_parseLiteralPercent(date, string, i) {
  d3_time_percentRe.lastIndex = 0;
  var n = d3_time_percentRe.exec(string.substring(i, i + 1));
  return n ? i + n[0].length : -1;
}

function d3_time_formatMulti(formats) {
  var n = formats.length, i = -1;
  while (++i &lt; n) formats[i][0] = this(formats[i][0]);
  return function(date) {
    var i = 0, f = formats[i];
    while (!f[1](date)) f = formats[++i];
    return f[0](date);
  };
}

d3.locale = function(locale) {
  return {
    numberFormat: d3_locale_numberFormat(locale),
    timeFormat: d3_locale_timeFormat(locale)
  };
};

var d3_locale_enUS = d3.locale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  dateTime: "%a %b %e %X %Y",
  date: "%m/%d/%Y",
  time: "%H:%M:%S",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

d3.format = d3_locale_enUS.numberFormat;
function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
  var u = uninterpolate(domain[0], domain[1]),
      i = interpolate(range[0], range[1]);
  return function(x) {
    return i(u(x));
  };
}

function d3_scale_nice(domain, nice) {
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      dx;

  if (x1 &lt; x0) {
    dx = i0, i0 = i1, i1 = dx;
    dx = x0, x0 = x1, x1 = dx;
  }

  domain[i0] = nice.floor(x0);
  domain[i1] = nice.ceil(x1);
  return domain;
}

function d3_scale_niceStep(step) {
  return step ? {
    floor: function(x) { return Math.floor(x / step) * step; },
    ceil: function(x) { return Math.ceil(x / step) * step; }
  } : d3_scale_niceIdentity;
}

var d3_scale_niceIdentity = {
  floor: d3_identity,
  ceil: d3_identity
};
d3.ascending = d3_ascending;

function d3_ascending(a, b) {
  return a &lt; b ? -1 : a &gt; b ? 1 : a &gt;= b ? 0 : NaN;
}

function d3_bisector(compare) {
  return {
    left: function(a, x, lo, hi) {
      if (arguments.length &lt; 3) lo = 0;
      if (arguments.length &lt; 4) hi = a.length;
      while (lo &lt; hi) {
        var mid = lo + hi &gt;&gt;&gt; 1;
        if (compare(a[mid], x) &lt; 0) lo = mid + 1;
        else hi = mid;
      }
      return lo;
    },
    right: function(a, x, lo, hi) {
      if (arguments.length &lt; 3) lo = 0;
      if (arguments.length &lt; 4) hi = a.length;
      while (lo &lt; hi) {
        var mid = lo + hi &gt;&gt;&gt; 1;
        if (compare(a[mid], x) &gt; 0) hi = mid;
        else lo = mid + 1;
      }
      return lo;
    }
  };
}

var d3_bisect = d3_bisector(d3_ascending);
d3.bisectLeft = d3_bisect.left;
d3.bisect = d3.bisectRight = d3_bisect.right;

d3.bisector = function(f) {
  return d3_bisector(f.length === 1
      ? function(d, x) { return d3_ascending(f(d), x); }
      : f);
};

function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
  var u = [],
      i = [],
      j = 0,
      k = Math.min(domain.length, range.length) - 1;

  // Handle descending domains.
  if (domain[k] &lt; domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++j &lt;= k) {
    u.push(uninterpolate(domain[j - 1], domain[j]));
    i.push(interpolate(range[j - 1], range[j]));
  }

  return function(x) {
    var j = d3.bisect(domain, x, 1, k) - 1;
    return i[j](u[j](x));
  };
}

d3.scale.linear = function() {
  return d3_scale_linear([0, 1], [0, 1], d3_interpolate, false);
};

function d3_scale_linear(domain, range, interpolate, clamp) {
  var output,
      input;

  function rescale() {
    var linear = Math.min(domain.length, range.length) &gt; 2 ? d3_scale_polylinear : d3_scale_bilinear,
        uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
    output = linear(domain, range, uninterpolate, interpolate);
    input = linear(range, domain, uninterpolate, d3_interpolate);
    return scale;
  }

  function scale(x) {
    return output(x);
  }

  // Note: requires range is coercible to number!
  scale.invert = function(y) {
    return input(y);
  };

  scale.domain = function(x) {
    if (!arguments.length) return domain;
    domain = x.map(Number);
    return rescale();
  };

  scale.range = function(x) {
    if (!arguments.length) return range;
    range = x;
    return rescale();
  };

  scale.rangeRound = function(x) {
    return scale.range(x).interpolate(d3_interpolateRound);
  };

  scale.clamp = function(x) {
    if (!arguments.length) return clamp;
    clamp = x;
    return rescale();
  };

  scale.interpolate = function(x) {
    if (!arguments.length) return interpolate;
    interpolate = x;
    return rescale();
  };

  scale.ticks = function(m) {
    return d3_scale_linearTicks(domain, m);
  };

  scale.tickFormat = function(m, format) {
    return d3_scale_linearTickFormat(domain, m, format);
  };

  scale.nice = function(m) {
    d3_scale_linearNice(domain, m);
    return rescale();
  };

  scale.copy = function() {
    return d3_scale_linear(domain, range, interpolate, clamp);
  };

  return rescale();
}

function d3_scale_linearRebind(scale, linear) {
  return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
}

function d3_scale_linearNice(domain, m) {
  return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
}

function d3_scale_linearTickRange(domain, m) {
  if (m == null) m = 10;

  var extent = d3_scaleExtent(domain),
      span = extent[1] - extent[0],
      step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)),
      err = m / span * step;

  // Filter ticks to get closer to the desired count.
  if (err &lt;= .15) step *= 10;
  else if (err &lt;= .35) step *= 5;
  else if (err &lt;= .75) step *= 2;

  // Round start and stop values to step interval.
  extent[0] = Math.ceil(extent[0] / step) * step;
  extent[1] = Math.floor(extent[1] / step) * step + step * .5; // inclusive
  extent[2] = step;
  return extent;
}

function d3_scale_linearTicks(domain, m) {
  return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
}

function d3_scale_linearTickFormat(domain, m, format) {
  var range = d3_scale_linearTickRange(domain, m);
  if (format) {
    var match = d3_format_re.exec(format);
    match.shift();
    if (match[8] === "s") {
      var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
      if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
      match[8] = "f";
      format = d3.format(match.join(""));
      return function(d) {
        return format(prefix.scale(d)) + prefix.symbol;
      };
    }
    if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
    format = match.join("");
  } else {
    format = ",." + d3_scale_linearPrecision(range[2]) + "f";
  }
  return d3.format(format);
}

var d3_scale_linearFormatSignificant = {s: 1, g: 1, p: 1, r: 1, e: 1};

// Returns the number of significant digits after the decimal point.
function d3_scale_linearPrecision(value) {
  return -Math.floor(Math.log(value) / Math.LN10 + .01);
}

// For some format types, the precision specifies the number of significant
// digits; for others, it specifies the number of digits after the decimal
// point. For significant format types, the desired precision equals one plus
// the difference between the decimal precision of the range’s maximum absolute
// value and the tick step’s decimal precision. For format "e", the digit before
// the decimal point counts as one.
function d3_scale_linearFormatPrecision(type, range) {
  var p = d3_scale_linearPrecision(range[2]);
  return type in d3_scale_linearFormatSignificant
      ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e")
      : p - (type === "%") * 2;
}

d3.scale.pow = function() {
  return d3_scale_pow(d3.scale.linear(), 1, [0, 1]);
};

function d3_scale_pow(linear, exponent, domain) {
  var powp = d3_scale_powPow(exponent),
      powb = d3_scale_powPow(1 / exponent);

  function scale(x) {
    return linear(powp(x));
  }

  scale.invert = function(x) {
    return powb(linear.invert(x));
  };

  scale.domain = function(x) {
    if (!arguments.length) return domain;
    linear.domain((domain = x.map(Number)).map(powp));
    return scale;
  };

  scale.ticks = function(m) {
    return d3_scale_linearTicks(domain, m);
  };

  scale.tickFormat = function(m, format) {
    return d3_scale_linearTickFormat(domain, m, format);
  };

  scale.nice = function(m) {
    return scale.domain(d3_scale_linearNice(domain, m));
  };

  scale.exponent = function(x) {
    if (!arguments.length) return exponent;
    powp = d3_scale_powPow(exponent = x);
    powb = d3_scale_powPow(1 / exponent);
    linear.domain(domain.map(powp));
    return scale;
  };

  scale.copy = function() {
    return d3_scale_pow(linear.copy(), exponent, domain);
  };

  return d3_scale_linearRebind(scale, linear);
}

function d3_scale_powPow(e) {
  return function(x) {
    return x &lt; 0 ? -Math.pow(-x, e) : Math.pow(x, e);
  };
}

d3.scale.sqrt = function() {
  return d3.scale.pow().exponent(.5);
};
var d3_subclass = {}.__proto__?

// Until ECMAScript supports array subclassing, prototype injection works well.
function(object, prototype) {
  object.__proto__ = prototype;
}:

// And if your browser doesn't support __proto__, we'll use direct extension.
function(object, prototype) {
  for (var property in prototype) object[property] = prototype[property];
};
function d3_true() {
  return true;
}

d3.dispatch = function() {
  var dispatch = new d3_dispatch,
      i = -1,
      n = arguments.length;
  while (++i &lt; n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
  return dispatch;
};

function d3_dispatch() {}

d3_dispatch.prototype.on = function(type, listener) {
  var i = type.indexOf("."),
      name = "";

  // Extract optional namespace, e.g., "click.foo"
  if (i &gt;= 0) {
    name = type.substring(i + 1);
    type = type.substring(0, i);
  }

  if (type) return arguments.length &lt; 2
      ? this[type].on(name)
      : this[type].on(name, listener);

  if (arguments.length === 2) {
    if (listener == null) for (type in this) {
      if (this.hasOwnProperty(type)) this[type].on(name, null);
    }
    return this;
  }
};

function d3_dispatch_event(dispatch) {
  var listeners = [],
      listenerByName = new d3_Map;

  function event() {
    var z = listeners, // defensive reference
        i = -1,
        n = z.length,
        l;
    while (++i &lt; n) if (l = z[i].on) l.apply(this, arguments);
    return dispatch;
  }

  event.on = function(name, listener) {
    var l = listenerByName.get(name),
        i;

    // return the current listener, if any
    if (arguments.length &lt; 2) return l &amp;&amp; l.on;

    // remove the old listener, if any (with copy-on-write)
    if (l) {
      l.on = null;
      listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
      listenerByName.remove(name);
    }

    // add the new listener, if any
    if (listener) listeners.push(listenerByName.set(name, {on: listener}));

    return dispatch;
  };

  return event;
}
var d3_arraySlice = [].slice,
    d3_array = function(list) { return d3_arraySlice.call(list); }; // conversion for NodeLists

var d3_document = document,
    d3_documentElement = d3_document.documentElement,
    d3_window = window;

// Redefine d3_array if the browser doesn’t support slice-based conversion.
try {
  d3_array(d3_documentElement.childNodes)[0].nodeType;
} catch(e) {
  d3_array = function(list) {
    var i = list.length, array = new Array(i);
    while (i--) array[i] = list[i];
    return array;
  };
}

function d3_vendorSymbol(object, name) {
  if (name in object) return name;
  name = name.charAt(0).toUpperCase() + name.substring(1);
  for (var i = 0, n = d3_vendorPrefixes.length; i &lt; n; ++i) {
    var prefixName = d3_vendorPrefixes[i] + name;
    if (prefixName in object) return prefixName;
  }
}

var d3_vendorPrefixes = ["webkit", "ms", "moz", "Moz", "o", "O"];

var d3_timer_queueHead,
    d3_timer_queueTail,
    d3_timer_interval, // is an interval (or frame) active?
    d3_timer_timeout, // is a timeout active?
    d3_timer_active, // active timer object
    d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) { setTimeout(callback, 17); };

// The timer will continue to fire until callback returns true.
d3.timer = function(callback, delay, then) {
  var n = arguments.length;
  if (n &lt; 2) delay = 0;
  if (n &lt; 3) then = Date.now();

  // Add the callback to the tail of the queue.
  var time = then + delay, timer = {c: callback, t: time, f: false, n: null};
  if (d3_timer_queueTail) d3_timer_queueTail.n = timer;
  else d3_timer_queueHead = timer;
  d3_timer_queueTail = timer;

  // Start animatin'!
  if (!d3_timer_interval) {
    d3_timer_timeout = clearTimeout(d3_timer_timeout);
    d3_timer_interval = 1;
    d3_timer_frame(d3_timer_step);
  }
};

function d3_timer_step() {
  var now = d3_timer_mark(),
      delay = d3_timer_sweep() - now;
  if (delay &gt; 24) {
    if (isFinite(delay)) {
      clearTimeout(d3_timer_timeout);
      d3_timer_timeout = setTimeout(d3_timer_step, delay);
    }
    d3_timer_interval = 0;
  } else {
    d3_timer_interval = 1;
    d3_timer_frame(d3_timer_step);
  }
}

d3.timer.flush = function() {
  d3_timer_mark();
  d3_timer_sweep();
};

function d3_timer_mark() {
  var now = Date.now();
  d3_timer_active = d3_timer_queueHead;
  while (d3_timer_active) {
    if (now &gt;= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
    d3_timer_active = d3_timer_active.n;
  }
  return now;
}

// Flush after callbacks to avoid concurrent queue modification.
// Returns the time of the earliest active timer, post-sweep.
function d3_timer_sweep() {
  var t0,
      t1 = d3_timer_queueHead,
      time = Infinity;
  while (t1) {
    if (t1.f) {
      t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
    } else {
      if (t1.t &lt; time) time = t1.t;
      t1 = (t0 = t1).n;
    }
  }
  d3_timer_queueTail = t0;
  return time;
}

var d3_ease_default = function() { return d3_identity; };

var d3_ease = d3.map({
  linear: d3_ease_default,
  poly: d3_ease_poly,
  quad: function() { return d3_ease_quad; },
  cubic: function() { return d3_ease_cubic; },
  sin: function() { return d3_ease_sin; },
  exp: function() { return d3_ease_exp; },
  circle: function() { return d3_ease_circle; },
  elastic: d3_ease_elastic,
  back: d3_ease_back,
  bounce: function() { return d3_ease_bounce; }
});

var d3_ease_mode = d3.map({
  "in": d3_identity,
  "out": d3_ease_reverse,
  "in-out": d3_ease_reflect,
  "out-in": function(f) { return d3_ease_reflect(d3_ease_reverse(f)); }
});

d3.ease = function(name) {
  var i = name.indexOf("-"),
      t = i &gt;= 0 ? name.substring(0, i) : name,
      m = i &gt;= 0 ? name.substring(i + 1) : "in";
  t = d3_ease.get(t) || d3_ease_default;
  m = d3_ease_mode.get(m) || d3_identity;
  return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
};

function d3_ease_clamp(f) {
  return function(t) {
    return t &lt;= 0 ? 0 : t &gt;= 1 ? 1 : f(t);
  };
}

function d3_ease_reverse(f) {
  return function(t) {
    return 1 - f(1 - t);
  };
}

function d3_ease_reflect(f) {
  return function(t) {
    return .5 * (t &lt; .5 ? f(2 * t) : (2 - f(2 - 2 * t)));
  };
}

function d3_ease_quad(t) {
  return t * t;
}

function d3_ease_cubic(t) {
  return t * t * t;
}

// Optimized clamp(reflect(poly(3))).
function d3_ease_cubicInOut(t) {
  if (t &lt;= 0) return 0;
  if (t &gt;= 1) return 1;
  var t2 = t * t, t3 = t2 * t;
  return 4 * (t &lt; .5 ? t3 : 3 * (t - t2) + t3 - .75);
}

function d3_ease_poly(e) {
  return function(t) {
    return Math.pow(t, e);
  };
}

function d3_ease_sin(t) {
  return 1 - Math.cos(t * halfpi);
}

function d3_ease_exp(t) {
  return Math.pow(2, 10 * (t - 1));
}

function d3_ease_circle(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function d3_ease_elastic(a, p) {
  var s;
  if (arguments.length &lt; 2) p = 0.45;
  if (arguments.length) s = p / tau * Math.asin(1 / a);
  else a = 1, s = p / 4;
  return function(t) {
    return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * tau / p);
  };
}

function d3_ease_back(s) {
  if (!s) s = 1.70158;
  return function(t) {
    return t * t * ((s + 1) * t - s);
  };
}

function d3_ease_bounce(t) {
  return t &lt; 1 / 2.75 ? 7.5625 * t * t
      : t &lt; 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75
      : t &lt; 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375
      : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
}

function d3_selection(groups) {
  d3_subclass(groups, d3_selectionPrototype);
  return groups;
}

var d3_select = function(s, n) { return n.querySelector(s); },
    d3_selectAll = function(s, n) { return n.querySelectorAll(s); },
    d3_selectMatcher = d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")],
    d3_selectMatches = function(n, s) { return d3_selectMatcher.call(n, s); };

// Prefer Sizzle, if available.
if (typeof Sizzle === "function") {
  d3_select = function(s, n) { return Sizzle(s, n)[0] || null; };
  d3_selectAll = Sizzle;
  d3_selectMatches = Sizzle.matchesSelector;
}

d3.selection = function() {
  return d3_selectionRoot;
};

var d3_selectionPrototype = d3.selection.prototype = [];


d3_selectionPrototype.select = function(selector) {
  var subgroups = [],
      subgroup,
      subnode,
      group,
      node;

  selector = d3_selection_selector(selector);

  for (var j = -1, m = this.length; ++j &lt; m;) {
    subgroups.push(subgroup = []);
    subgroup.parentNode = (group = this[j]).parentNode;
    for (var i = -1, n = group.length; ++i &lt; n;) {
      if (node = group[i]) {
        subgroup.push(subnode = selector.call(node, node.__data__, i, j));
        if (subnode &amp;&amp; "__data__" in node) subnode.__data__ = node.__data__;
      } else {
        subgroup.push(null);
      }
    }
  }

  return d3_selection(subgroups);
};

function d3_selection_selector(selector) {
  return typeof selector === "function" ? selector : function() {
    return d3_select(selector, this);
  };
}

d3_selectionPrototype.selectAll = function(selector) {
  var subgroups = [],
      subgroup,
      node;

  selector = d3_selection_selectorAll(selector);

  for (var j = -1, m = this.length; ++j &lt; m;) {
    for (var group = this[j], i = -1, n = group.length; ++i &lt; n;) {
      if (node = group[i]) {
        subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
        subgroup.parentNode = node;
      }
    }
  }

  return d3_selection(subgroups);
};

function d3_selection_selectorAll(selector) {
  return typeof selector === "function" ? selector : function() {
    return d3_selectAll(selector, this);
  };
}
var d3_nsPrefix = {
  svg: "http://www.w3.org/2000/svg",
  xhtml: "http://www.w3.org/1999/xhtml",
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

d3.ns = {
  prefix: d3_nsPrefix,
  qualify: function(name) {
    var i = name.indexOf(":"),
        prefix = name;
    if (i &gt;= 0) {
      prefix = name.substring(0, i);
      name = name.substring(i + 1);
    }
    return d3_nsPrefix.hasOwnProperty(prefix)
        ? {space: d3_nsPrefix[prefix], local: name}
        : name;
  }
};

d3_selectionPrototype.attr = function(name, value) {
  if (arguments.length &lt; 2) {

    // For attr(string), return the attribute value for the first node.
    if (typeof name === "string") {
      var node = this.node();
      name = d3.ns.qualify(name);
      return name.local
          ? node.getAttributeNS(name.space, name.local)
          : node.getAttribute(name);
    }

    // For attr(object), the object specifies the names and values of the
    // attributes to set or remove. The values may be functions that are
    // evaluated for each element.
    for (value in name) this.each(d3_selection_attr(value, name[value]));
    return this;
  }

  return this.each(d3_selection_attr(name, value));
};

function d3_selection_attr(name, value) {
  name = d3.ns.qualify(name);

  // For attr(string, null), remove the attribute with the specified name.
  function attrNull() {
    this.removeAttribute(name);
  }
  function attrNullNS() {
    this.removeAttributeNS(name.space, name.local);
  }

  // For attr(string, string), set the attribute with the specified name.
  function attrConstant() {
    this.setAttribute(name, value);
  }
  function attrConstantNS() {
    this.setAttributeNS(name.space, name.local, value);
  }

  // For attr(string, function), evaluate the function for each element, and set
  // or remove the attribute as appropriate.
  function attrFunction() {
    var x = value.apply(this, arguments);
    if (x == null) this.removeAttribute(name);
    else this.setAttribute(name, x);
  }
  function attrFunctionNS() {
    var x = value.apply(this, arguments);
    if (x == null) this.removeAttributeNS(name.space, name.local);
    else this.setAttributeNS(name.space, name.local, x);
  }

  return value == null
      ? (name.local ? attrNullNS : attrNull) : (typeof value === "function"
      ? (name.local ? attrFunctionNS : attrFunction)
      : (name.local ? attrConstantNS : attrConstant));
}
function d3_collapse(s) {
  return s.trim().replace(/\s+/g, " ");
}

d3_selectionPrototype.classed = function(name, value) {
  if (arguments.length &lt; 2) {

    // For classed(string), return true only if the first node has the specified
    // class or classes. Note that even if the browser supports DOMTokenList, it
    // probably doesn't support it on SVG elements (which can be animated).
    if (typeof name === "string") {
      var node = this.node(),
          n = (name = d3_selection_classes(name)).length,
          i = -1;
      if (value = node.classList) {
        while (++i &lt; n) if (!value.contains(name[i])) return false;
      } else {
        value = node.getAttribute("class");
        while (++i &lt; n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
      }
      return true;
    }

    // For classed(object), the object specifies the names of classes to add or
    // remove. The values may be functions that are evaluated for each element.
    for (value in name) this.each(d3_selection_classed(value, name[value]));
    return this;
  }

  // Otherwise, both a name and a value are specified, and are handled as below.
  return this.each(d3_selection_classed(name, value));
};

function d3_selection_classedRe(name) {
  return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
}

function d3_selection_classes(name) {
  return name.trim().split(/^|\s+/);
}

// Multiple class names are allowed (e.g., "foo bar").
function d3_selection_classed(name, value) {
  name = d3_selection_classes(name).map(d3_selection_classedName);
  var n = name.length;

  function classedConstant() {
    var i = -1;
    while (++i &lt; n) name[i](this, value);
  }

  // When the value is a function, the function is still evaluated only once per
  // element even if there are multiple class names.
  function classedFunction() {
    var i = -1, x = value.apply(this, arguments);
    while (++i &lt; n) name[i](this, x);
  }

  return typeof value === "function"
      ? classedFunction
      : classedConstant;
}

function d3_selection_classedName(name) {
  var re = d3_selection_classedRe(name);
  return function(node, value) {
    if (c = node.classList) return value ? c.add(name) : c.remove(name);
    var c = node.getAttribute("class") || "";
    if (value) {
      re.lastIndex = 0;
      if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
    } else {
      node.setAttribute("class", d3_collapse(c.replace(re, " ")));
    }
  };
}

d3_selectionPrototype.style = function(name, value, priority) {
  var n = arguments.length;
  if (n &lt; 3) {

    // For style(object) or style(object, string), the object specifies the
    // names and values of the attributes to set or remove. The values may be
    // functions that are evaluated for each element. The optional string
    // specifies the priority.
    if (typeof name !== "string") {
      if (n &lt; 2) value = "";
      for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
      return this;
    }

    // For style(string), return the computed style value for the first node.
    if (n &lt; 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);

    // For style(string, string) or style(string, function), use the default
    // priority. The priority is ignored for style(string, null).
    priority = "";
  }

  // Otherwise, a name, value and priority are specified, and handled as below.
  return this.each(d3_selection_style(name, value, priority));
};

function d3_selection_style(name, value, priority) {

  // For style(name, null) or style(name, null, priority), remove the style
  // property with the specified name. The priority is ignored.
  function styleNull() {
    this.style.removeProperty(name);
  }

  // For style(name, string) or style(name, string, priority), set the style
  // property with the specified name, using the specified priority.
  function styleConstant() {
    this.style.setProperty(name, value, priority);
  }

  // For style(name, function) or style(name, function, priority), evaluate the
  // function for each element, and set or remove the style property as
  // appropriate. When setting, use the specified priority.
  function styleFunction() {
    var x = value.apply(this, arguments);
    if (x == null) this.style.removeProperty(name);
    else this.style.setProperty(name, x, priority);
  }

  return value == null
      ? styleNull : (typeof value === "function"
      ? styleFunction : styleConstant);
}

d3_selectionPrototype.property = function(name, value) {
  if (arguments.length &lt; 2) {

    // For property(string), return the property value for the first node.
    if (typeof name === "string") return this.node()[name];

    // For property(object), the object specifies the names and values of the
    // properties to set or remove. The values may be functions that are
    // evaluated for each element.
    for (value in name) this.each(d3_selection_property(value, name[value]));
    return this;
  }

  // Otherwise, both a name and a value are specified, and are handled as below.
  return this.each(d3_selection_property(name, value));
};

function d3_selection_property(name, value) {

  // For property(name, null), remove the property with the specified name.
  function propertyNull() {
    delete this[name];
  }

  // For property(name, string), set the property with the specified name.
  function propertyConstant() {
    this[name] = value;
  }

  // For property(name, function), evaluate the function for each element, and
  // set or remove the property as appropriate.
  function propertyFunction() {
    var x = value.apply(this, arguments);
    if (x == null) delete this[name];
    else this[name] = x;
  }

  return value == null
      ? propertyNull : (typeof value === "function"
      ? propertyFunction : propertyConstant);
}

d3_selectionPrototype.text = function(value) {
  return arguments.length
      ? this.each(typeof value === "function"
      ? function() { var v = value.apply(this, arguments); this.textContent = v == null ? "" : v; } : value == null
      ? function() { this.textContent = ""; }
      : function() { this.textContent = value; })
      : this.node().textContent;
};

d3_selectionPrototype.html = function(value) {
  return arguments.length
      ? this.each(typeof value === "function"
      ? function() { var v = value.apply(this, arguments); this.innerHTML = v == null ? "" : v; } : value == null
      ? function() { this.innerHTML = ""; }
      : function() { this.innerHTML = value; })
      : this.node().innerHTML;
};

d3_selectionPrototype.append = function(name) {
  name = d3_selection_creator(name);
  return this.select(function() {
    return this.appendChild(name.apply(this, arguments));
  });
};

function d3_selection_creator(name) {
  return typeof name === "function" ? name
      : (name = d3.ns.qualify(name)).local ? function() { return this.ownerDocument.createElementNS(name.space, name.local); }
      : function() { return this.ownerDocument.createElementNS(this.namespaceURI, name); };
}

d3_selectionPrototype.insert = function(name, before) {
  name = d3_selection_creator(name);
  before = d3_selection_selector(before);
  return this.select(function() {
    return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
  });
};

// TODO remove(selector)?
// TODO remove(node)?
// TODO remove(function)?
d3_selectionPrototype.remove = function() {
  return this.each(function() {
    var parent = this.parentNode;
    if (parent) parent.removeChild(this);
  });
};

d3_selectionPrototype.data = function(value, key) {
  var i = -1,
      n = this.length,
      group,
      node;

  // If no value is specified, return the first value.
  if (!arguments.length) {
    value = new Array(n = (group = this[0]).length);
    while (++i &lt; n) {
      if (node = group[i]) {
        value[i] = node.__data__;
      }
    }
    return value;
  }

  function bind(group, groupData) {
    var i,
        n = group.length,
        m = groupData.length,
        n0 = Math.min(n, m),
        updateNodes = new Array(m),
        enterNodes = new Array(m),
        exitNodes = new Array(n),
        node,
        nodeData;

    if (key) {
      var nodeByKeyValue = new d3_Map,
          dataByKeyValue = new d3_Map,
          keyValues = [],
          keyValue;

      for (i = -1; ++i &lt; n;) {
        keyValue = key.call(node = group[i], node.__data__, i);
        if (nodeByKeyValue.has(keyValue)) {
          exitNodes[i] = node; // duplicate selection key
        } else {
          nodeByKeyValue.set(keyValue, node);
        }
        keyValues.push(keyValue);
      }

      for (i = -1; ++i &lt; m;) {
        keyValue = key.call(groupData, nodeData = groupData[i], i);
        if (node = nodeByKeyValue.get(keyValue)) {
          updateNodes[i] = node;
          node.__data__ = nodeData;
        } else if (!dataByKeyValue.has(keyValue)) { // no duplicate data key
          enterNodes[i] = d3_selection_dataNode(nodeData);
        }
        dataByKeyValue.set(keyValue, nodeData);
        nodeByKeyValue.remove(keyValue);
      }

      for (i = -1; ++i &lt; n;) {
        if (nodeByKeyValue.has(keyValues[i])) {
          exitNodes[i] = group[i];
        }
      }
    } else {
      for (i = -1; ++i &lt; n0;) {
        node = group[i];
        nodeData = groupData[i];
        if (node) {
          node.__data__ = nodeData;
          updateNodes[i] = node;
        } else {
          enterNodes[i] = d3_selection_dataNode(nodeData);
        }
      }
      for (; i &lt; m; ++i) {
        enterNodes[i] = d3_selection_dataNode(groupData[i]);
      }
      for (; i &lt; n; ++i) {
        exitNodes[i] = group[i];
      }
    }

    enterNodes.update
        = updateNodes;

    enterNodes.parentNode
        = updateNodes.parentNode
        = exitNodes.parentNode
        = group.parentNode;

    enter.push(enterNodes);
    update.push(updateNodes);
    exit.push(exitNodes);
  }

  var enter = d3_selection_enter([]),
      update = d3_selection([]),
      exit = d3_selection([]);

  if (typeof value === "function") {
    while (++i &lt; n) {
      bind(group = this[i], value.call(group, group.parentNode.__data__, i));
    }
  } else {
    while (++i &lt; n) {
      bind(group = this[i], value);
    }
  }

  update.enter = function() { return enter; };
  update.exit = function() { return exit; };
  return update;
};

function d3_selection_dataNode(data) {
  return {__data__: data};
}

d3_selectionPrototype.datum = function(value) {
  return arguments.length
      ? this.property("__data__", value)
      : this.property("__data__");
};

d3_selectionPrototype.filter = function(filter) {
  var subgroups = [],
      subgroup,
      group,
      node;

  if (typeof filter !== "function") filter = d3_selection_filter(filter);

  for (var j = 0, m = this.length; j &lt; m; j++) {
    subgroups.push(subgroup = []);
    subgroup.parentNode = (group = this[j]).parentNode;
    for (var i = 0, n = group.length; i &lt; n; i++) {
      if ((node = group[i]) &amp;&amp; filter.call(node, node.__data__, i, j)) {
        subgroup.push(node);
      }
    }
  }

  return d3_selection(subgroups);
};

function d3_selection_filter(selector) {
  return function() {
    return d3_selectMatches(this, selector);
  };
}

d3_selectionPrototype.order = function() {
  for (var j = -1, m = this.length; ++j &lt; m;) {
    for (var group = this[j], i = group.length - 1, next = group[i], node; --i &gt;= 0;) {
      if (node = group[i]) {
        if (next &amp;&amp; next !== node.nextSibling) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
};

d3_selectionPrototype.sort = function(comparator) {
  comparator = d3_selection_sortComparator.apply(this, arguments);
  for (var j = -1, m = this.length; ++j &lt; m;) this[j].sort(comparator);
  return this.order();
};

function d3_selection_sortComparator(comparator) {
  if (!arguments.length) comparator = d3_ascending;
  return function(a, b) {
    return a &amp;&amp; b ? comparator(a.__data__, b.__data__) : !a - !b;
  };
}
function d3_noop() {}

d3.event = null;

function d3_eventPreventDefault() {
  d3.event.preventDefault();
}

function d3_eventSource() {
  var e = d3.event, s;
  while (s = e.sourceEvent) e = s;
  return e;
}

// Like d3.dispatch, but for custom events abstracting native UI events. These
// events have a target component (such as a brush), a target element (such as
// the svg:g element containing the brush) and the standard arguments `d` (the
// target element's data) and `i` (the selection index of the target element).
function d3_eventDispatch(target) {
  var dispatch = new d3_dispatch,
      i = 0,
      n = arguments.length;

  while (++i &lt; n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);

  // Creates a dispatch context for the specified `thiz` (typically, the target
  // DOM element that received the source event) and `argumentz` (typically, the
  // data `d` and index `i` of the target element). The returned function can be
  // used to dispatch an event to any registered listeners; the function takes a
  // single argument as input, being the event to dispatch. The event must have
  // a "type" attribute which corresponds to a type registered in the
  // constructor. This context will automatically populate the "sourceEvent" and
  // "target" attributes of the event, as well as setting the `d3.event` global
  // for the duration of the notification.
  dispatch.of = function(thiz, argumentz) {
    return function(e1) {
      try {
        var e0 =
        e1.sourceEvent = d3.event;
        e1.target = target;
        d3.event = e1;
        dispatch[e1.type].apply(thiz, argumentz);
      } finally {
        d3.event = e0;
      }
    };
  };

  return dispatch;
}

d3_selectionPrototype.on = function(type, listener, capture) {
  var n = arguments.length;
  if (n &lt; 3) {

    // For on(object) or on(object, boolean), the object specifies the event
    // types and listeners to add or remove. The optional boolean specifies
    // whether the listener captures events.
    if (typeof type !== "string") {
      if (n &lt; 2) listener = false;
      for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
      return this;
    }

    // For on(string), return the listener for the first node.
    if (n &lt; 2) return (n = this.node()["__on" + type]) &amp;&amp; n._;

    // For on(string, function), use the default capture.
    capture = false;
  }

  // Otherwise, a type, listener and capture are specified, and handled as below.
  return this.each(d3_selection_on(type, listener, capture));
};

function d3_selection_on(type, listener, capture) {
  var name = "__on" + type,
      i = type.indexOf("."),
      wrap = d3_selection_onListener;

  if (i &gt; 0) type = type.substring(0, i);
  var filter = d3_selection_onFilters.get(type);
  if (filter) type = filter, wrap = d3_selection_onFilter;

  function onRemove() {
    var l = this[name];
    if (l) {
      this.removeEventListener(type, l, l.$);
      delete this[name];
    }
  }

  function onAdd() {
    var l = wrap(listener, d3_array(arguments));
    onRemove.call(this);
    this.addEventListener(type, this[name] = l, l.$ = capture);
    l._ = listener;
  }

  function removeAll() {
    var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"),
        match;
    for (var name in this) {
      if (match = name.match(re)) {
        var l = this[name];
        this.removeEventListener(match[1], l, l.$);
        delete this[name];
      }
    }
  }

  return i
      ? listener ? onAdd : onRemove
      : listener ? d3_noop : removeAll;
}

var d3_selection_onFilters = d3.map({
  mouseenter: "mouseover",
  mouseleave: "mouseout"
});

d3_selection_onFilters.forEach(function(k) {
  if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
});

function d3_selection_onListener(listener, argumentz) {
  return function(e) {
    var o = d3.event; // Events can be reentrant (e.g., focus).
    d3.event = e;
    argumentz[0] = this.__data__;
    try {
      listener.apply(this, argumentz);
    } finally {
      d3.event = o;
    }
  };
}

function d3_selection_onFilter(listener, argumentz) {
  var l = d3_selection_onListener(listener, argumentz);
  return function(e) {
    var target = this, related = e.relatedTarget;
    if (!related || (related !== target &amp;&amp; !(related.compareDocumentPosition(target) &amp; 8))) {
      l.call(target, e);
    }
  };
}

d3_selectionPrototype.each = function(callback) {
  return d3_selection_each(this, function(node, i, j) {
    callback.call(node, node.__data__, i, j);
  });
};

function d3_selection_each(groups, callback) {
  for (var j = 0, m = groups.length; j &lt; m; j++) {
    for (var group = groups[j], i = 0, n = group.length, node; i &lt; n; i++) {
      if (node = group[i]) callback(node, i, j);
    }
  }
  return groups;
}

d3_selectionPrototype.call = function(callback) {
  var args = d3_array(arguments);
  callback.apply(args[0] = this, args);
  return this;
};

d3_selectionPrototype.empty = function() {
  return !this.node();
};

d3_selectionPrototype.node = function() {
  for (var j = 0, m = this.length; j &lt; m; j++) {
    for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {
      var node = group[i];
      if (node) return node;
    }
  }
  return null;
};

d3_selectionPrototype.size = function() {
  var n = 0;
  this.each(function() { ++n; });
  return n;
};

function d3_selection_enter(selection) {
  d3_subclass(selection, d3_selection_enterPrototype);
  return selection;
}

var d3_selection_enterPrototype = [];

d3.selection.enter = d3_selection_enter;
d3.selection.enter.prototype = d3_selection_enterPrototype;

d3_selection_enterPrototype.append = d3_selectionPrototype.append;
d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
d3_selection_enterPrototype.node = d3_selectionPrototype.node;
d3_selection_enterPrototype.call = d3_selectionPrototype.call;
d3_selection_enterPrototype.size = d3_selectionPrototype.size;


d3_selection_enterPrototype.select = function(selector) {
  var subgroups = [],
      subgroup,
      subnode,
      upgroup,
      group,
      node;

  for (var j = -1, m = this.length; ++j &lt; m;) {
    upgroup = (group = this[j]).update;
    subgroups.push(subgroup = []);
    subgroup.parentNode = group.parentNode;
    for (var i = -1, n = group.length; ++i &lt; n;) {
      if (node = group[i]) {
        subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
        subnode.__data__ = node.__data__;
      } else {
        subgroup.push(null);
      }
    }
  }

  return d3_selection(subgroups);
};

d3_selection_enterPrototype.insert = function(name, before) {
  if (arguments.length &lt; 2) before = d3_selection_enterInsertBefore(this);
  return d3_selectionPrototype.insert.call(this, name, before);
};

function d3_selection_enterInsertBefore(enter) {
  var i0, j0;
  return function(d, i, j) {
    var group = enter[j].update,
        n = group.length,
        node;
    if (j != j0) j0 = j, i0 = 0;
    if (i &gt;= i0) i0 = i + 1;
    while (!(node = group[i0]) &amp;&amp; ++i0 &lt; n);
    return node;
  };
}

// import "../transition/transition";

d3_selectionPrototype.transition = function() {
  var id = d3_transitionInheritId || ++d3_transitionId,
      subgroups = [],
      subgroup,
      node,
      transition = d3_transitionInherit || {time: Date.now(), ease: d3_ease_cubicInOut, delay: 0, duration: 250};

  for (var j = -1, m = this.length; ++j &lt; m;) {
    subgroups.push(subgroup = []);
    for (var group = this[j], i = -1, n = group.length; ++i &lt; n;) {
      if (node = group[i]) d3_transitionNode(node, i, id, transition);
      subgroup.push(node);
    }
  }

  return d3_transition(subgroups, id);
};
// import "../transition/transition";

d3_selectionPrototype.interrupt = function() {
  return this.each(d3_selection_interrupt);
};

function d3_selection_interrupt() {
  var lock = this.__transition__;
  if (lock) ++lock.active;
}

// TODO fast singleton implementation?
d3.select = function(node) {
  var group = [typeof node === "string" ? d3_select(node, d3_document) : node];
  group.parentNode = d3_documentElement;
  return d3_selection([group]);
};

d3.selectAll = function(nodes) {
  var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
  group.parentNode = d3_documentElement;
  return d3_selection([group]);
};

var d3_selectionRoot = d3.select(d3_documentElement);

function d3_transition(groups, id) {
  d3_subclass(groups, d3_transitionPrototype);

  groups.id = id; // Note: read-only!

  return groups;
}

var d3_transitionPrototype = [],
    d3_transitionId = 0,
    d3_transitionInheritId,
    d3_transitionInherit;

d3_transitionPrototype.call = d3_selectionPrototype.call;
d3_transitionPrototype.empty = d3_selectionPrototype.empty;
d3_transitionPrototype.node = d3_selectionPrototype.node;
d3_transitionPrototype.size = d3_selectionPrototype.size;

d3.transition = function(selection) {
  return arguments.length
      ? (d3_transitionInheritId ? selection.transition() : selection)
      : d3_selectionRoot.transition();
};

d3.transition.prototype = d3_transitionPrototype;


d3_transitionPrototype.select = function(selector) {
  var id = this.id,
      subgroups = [],
      subgroup,
      subnode,
      node;

  selector = d3_selection_selector(selector);

  for (var j = -1, m = this.length; ++j &lt; m;) {
    subgroups.push(subgroup = []);
    for (var group = this[j], i = -1, n = group.length; ++i &lt; n;) {
      if ((node = group[i]) &amp;&amp; (subnode = selector.call(node, node.__data__, i, j))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        d3_transitionNode(subnode, i, id, node.__transition__[id]);
        subgroup.push(subnode);
      } else {
        subgroup.push(null);
      }
    }
  }

  return d3_transition(subgroups, id);
};

d3_transitionPrototype.selectAll = function(selector) {
  var id = this.id,
      subgroups = [],
      subgroup,
      subnodes,
      node,
      subnode,
      transition;

  selector = d3_selection_selectorAll(selector);

  for (var j = -1, m = this.length; ++j &lt; m;) {
    for (var group = this[j], i = -1, n = group.length; ++i &lt; n;) {
      if (node = group[i]) {
        transition = node.__transition__[id];
        subnodes = selector.call(node, node.__data__, i, j);
        subgroups.push(subgroup = []);
        for (var k = -1, o = subnodes.length; ++k &lt; o;) {
          if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
          subgroup.push(subnode);
        }
      }
    }
  }

  return d3_transition(subgroups, id);
};

d3_transitionPrototype.filter = function(filter) {
  var subgroups = [],
      subgroup,
      group,
      node;

  if (typeof filter !== "function") filter = d3_selection_filter(filter);

  for (var j = 0, m = this.length; j &lt; m; j++) {
    subgroups.push(subgroup = []);
    for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {
      if ((node = group[i]) &amp;&amp; filter.call(node, node.__data__, i, j)) {
        subgroup.push(node);
      }
    }
  }

  return d3_transition(subgroups, this.id);
};

d3.transform = function(string) {
  var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
  return (d3.transform = function(string) {
    if (string != null) {
      g.setAttribute("transform", string);
      var t = g.transform.baseVal.consolidate();
    }
    return new d3_transform(t ? t.matrix : d3_transformIdentity);
  })(string);
};

// Compute x-scale and normalize the first row.
// Compute shear and make second row orthogonal to first.
// Compute y-scale and normalize the second row.
// Finally, compute the rotation.
function d3_transform(m) {
  var r0 = [m.a, m.b],
      r1 = [m.c, m.d],
      kx = d3_transformNormalize(r0),
      kz = d3_transformDot(r0, r1),
      ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
  if (r0[0] * r1[1] &lt; r1[0] * r0[1]) {
    r0[0] *= -1;
    r0[1] *= -1;
    kx *= -1;
    kz *= -1;
  }
  this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
  this.translate = [m.e, m.f];
  this.scale = [kx, ky];
  this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
};

d3_transform.prototype.toString = function() {
  return "translate(" + this.translate
      + ")rotate(" + this.rotate
      + ")skewX(" + this.skew
      + ")scale(" + this.scale
      + ")";
};

function d3_transformDot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}

function d3_transformNormalize(a) {
  var k = Math.sqrt(d3_transformDot(a, a));
  if (k) {
    a[0] /= k;
    a[1] /= k;
  }
  return k;
}

function d3_transformCombine(a, b, k) {
  a[0] += k * b[0];
  a[1] += k * b[1];
  return a;
}

var d3_transformIdentity = {a: 1, b: 0, c: 0, d: 1, e: 0, f: 0};

d3.interpolateTransform = d3_interpolateTransform;

function d3_interpolateTransform(a, b) {
  var s = [], // string constants and placeholders
      q = [], // number interpolators
      n,
      A = d3.transform(a),
      B = d3.transform(b),
      ta = A.translate,
      tb = B.translate,
      ra = A.rotate,
      rb = B.rotate,
      wa = A.skew,
      wb = B.skew,
      ka = A.scale,
      kb = B.scale;

  if (ta[0] != tb[0] || ta[1] != tb[1]) {
    s.push("translate(", null, ",", null, ")");
    q.push({i: 1, x: d3_interpolateNumber(ta[0], tb[0])}, {i: 3, x: d3_interpolateNumber(ta[1], tb[1])});
  } else if (tb[0] || tb[1]) {
    s.push("translate(" + tb + ")");
  } else {
    s.push("");
  }

  if (ra != rb) {
    if (ra - rb &gt; 180) rb += 360; else if (rb - ra &gt; 180) ra += 360; // shortest path
    q.push({i: s.push(s.pop() + "rotate(", null, ")") - 2, x: d3_interpolateNumber(ra, rb)});
  } else if (rb) {
    s.push(s.pop() + "rotate(" + rb + ")");
  }

  if (wa != wb) {
    q.push({i: s.push(s.pop() + "skewX(", null, ")") - 2, x: d3_interpolateNumber(wa, wb)});
  } else if (wb) {
    s.push(s.pop() + "skewX(" + wb + ")");
  }

  if (ka[0] != kb[0] || ka[1] != kb[1]) {
    n = s.push(s.pop() + "scale(", null, ",", null, ")");
    q.push({i: n - 4, x: d3_interpolateNumber(ka[0], kb[0])}, {i: n - 2, x: d3_interpolateNumber(ka[1], kb[1])});
  } else if (kb[0] != 1 || kb[1] != 1) {
    s.push(s.pop() + "scale(" + kb + ")");
  }

  n = q.length;
  return function(t) {
    var i = -1, o;
    while (++i &lt; n) s[(o = q[i]).i] = o.x(t);
    return s.join("");
  };
}

d3_transitionPrototype.tween = function(name, tween) {
  var id = this.id;
  if (arguments.length &lt; 2) return this.node().__transition__[id].tween.get(name);
  return d3_selection_each(this, tween == null
        ? function(node) { node.__transition__[id].tween.remove(name); }
        : function(node) { node.__transition__[id].tween.set(name, tween); });
};

function d3_transition_tween(groups, name, value, tween) {
  var id = groups.id;
  return d3_selection_each(groups, typeof value === "function"
      ? function(node, i, j) { node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j))); }
      : (value = tween(value), function(node) { node.__transition__[id].tween.set(name, value); }));
}

d3_transitionPrototype.attr = function(nameNS, value) {
  if (arguments.length &lt; 2) {

    // For attr(object), the object specifies the names and values of the
    // attributes to transition. The values may be functions that are
    // evaluated for each element.
    for (value in nameNS) this.attr(value, nameNS[value]);
    return this;
  }

  var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate,
      name = d3.ns.qualify(nameNS);

  // For attr(string, null), remove the attribute with the specified name.
  function attrNull() {
    this.removeAttribute(name);
  }
  function attrNullNS() {
    this.removeAttributeNS(name.space, name.local);
  }

  // For attr(string, string), set the attribute with the specified name.
  function attrTween(b) {
    return b == null ? attrNull : (b += "", function() {
      var a = this.getAttribute(name), i;
      return a !== b &amp;&amp; (i = interpolate(a, b), function(t) { this.setAttribute(name, i(t)); });
    });
  }
  function attrTweenNS(b) {
    return b == null ? attrNullNS : (b += "", function() {
      var a = this.getAttributeNS(name.space, name.local), i;
      return a !== b &amp;&amp; (i = interpolate(a, b), function(t) { this.setAttributeNS(name.space, name.local, i(t)); });
    });
  }

  return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
};

d3_transitionPrototype.attrTween = function(nameNS, tween) {
  var name = d3.ns.qualify(nameNS);

  function attrTween(d, i) {
    var f = tween.call(this, d, i, this.getAttribute(name));
    return f &amp;&amp; function(t) { this.setAttribute(name, f(t)); };
  }
  function attrTweenNS(d, i) {
    var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
    return f &amp;&amp; function(t) { this.setAttributeNS(name.space, name.local, f(t)); };
  }

  return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
};

d3_transitionPrototype.style = function(name, value, priority) {
  var n = arguments.length;
  if (n &lt; 3) {

    // For style(object) or style(object, string), the object specifies the
    // names and values of the attributes to set or remove. The values may be
    // functions that are evaluated for each element. The optional string
    // specifies the priority.
    if (typeof name !== "string") {
      if (n &lt; 2) value = "";
      for (priority in name) this.style(priority, name[priority], value);
      return this;
    }

    // For style(string, string) or style(string, function), use the default
    // priority. The priority is ignored for style(string, null).
    priority = "";
  }

  // For style(name, null) or style(name, null, priority), remove the style
  // property with the specified name. The priority is ignored.
  function styleNull() {
    this.style.removeProperty(name);
  }

  // For style(name, string) or style(name, string, priority), set the style
  // property with the specified name, using the specified priority.
  // Otherwise, a name, value and priority are specified, and handled as below.
  function styleString(b) {
    return b == null ? styleNull : (b += "", function() {
      var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
      return a !== b &amp;&amp; (i = d3_interpolate(a, b), function(t) { this.style.setProperty(name, i(t), priority); });
    });
  }

  return d3_transition_tween(this, "style." + name, value, styleString);
};

d3_transitionPrototype.styleTween = function(name, tween, priority) {
  if (arguments.length &lt; 3) priority = "";

  function styleTween(d, i) {
    var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
    return f &amp;&amp; function(t) { this.style.setProperty(name, f(t), priority); };
  }

  return this.tween("style." + name, styleTween);
};

d3_transitionPrototype.text = function(value) {
  return d3_transition_tween(this, "text", value, d3_transition_text);
};

function d3_transition_text(b) {
  if (b == null) b = "";
  return function() { this.textContent = b; };
}

d3_transitionPrototype.remove = function() {
  return this.each("end.transition", function() {
    var p;
    if (this.__transition__.count &lt; 2 &amp;&amp; (p = this.parentNode)) p.removeChild(this);
  });
};

d3_transitionPrototype.ease = function(value) {
  var id = this.id;
  if (arguments.length &lt; 1) return this.node().__transition__[id].ease;
  if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
  return d3_selection_each(this, function(node) { node.__transition__[id].ease = value; });
};

d3_transitionPrototype.delay = function(value) {
  var id = this.id;
  if (arguments.length &lt; 1) return this.node().__transition__[id].delay;
  return d3_selection_each(this, typeof value === "function"
      ? function(node, i, j) { node.__transition__[id].delay = +value.call(node, node.__data__, i, j); }
      : (value = +value, function(node) { node.__transition__[id].delay = value; }));
};

d3_transitionPrototype.duration = function(value) {
  var id = this.id;
  if (arguments.length &lt; 1) return this.node().__transition__[id].duration;
  return d3_selection_each(this, typeof value === "function"
      ? function(node, i, j) { node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j)); }
      : (value = Math.max(1, value), function(node) { node.__transition__[id].duration = value; }));
};

d3_transitionPrototype.each = function(type, listener) {
  var id = this.id;
  if (arguments.length &lt; 2) {
    var inherit = d3_transitionInherit,
        inheritId = d3_transitionInheritId;
    d3_transitionInheritId = id;
    d3_selection_each(this, function(node, i, j) {
      d3_transitionInherit = node.__transition__[id];
      type.call(node, node.__data__, i, j);
    });
    d3_transitionInherit = inherit;
    d3_transitionInheritId = inheritId;
  } else {
    d3_selection_each(this, function(node) {
      var transition = node.__transition__[id];
      (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
    });
  }
  return this;
};

d3_transitionPrototype.transition = function() {
  var id0 = this.id,
      id1 = ++d3_transitionId,
      subgroups = [],
      subgroup,
      group,
      node,
      transition;

  for (var j = 0, m = this.length; j &lt; m; j++) {
    subgroups.push(subgroup = []);
    for (var group = this[j], i = 0, n = group.length; i &lt; n; i++) {
      if (node = group[i]) {
        transition = Object.create(node.__transition__[id0]);
        transition.delay += transition.duration;
        d3_transitionNode(node, i, id1, transition);
      }
      subgroup.push(node);
    }
  }

  return d3_transition(subgroups, id1);
};

function d3_transitionNode(node, i, id, inherit) {
  var lock = node.__transition__ || (node.__transition__ = {active: 0, count: 0}),
      transition = lock[id];

  if (!transition) {
    var time = inherit.time;

    transition = lock[id] = {
      tween: new d3_Map,
      time: time,
      ease: inherit.ease,
      delay: inherit.delay,
      duration: inherit.duration
    };

    ++lock.count;

    d3.timer(function(elapsed) {
      var d = node.__data__,
          ease = transition.ease,
          delay = transition.delay,
          duration = transition.duration,
          timer = d3_timer_active,
          tweened = [];

      timer.t = delay + time;
      if (delay &lt;= elapsed) return start(elapsed - delay);
      timer.c = start;

      function start(elapsed) {
        if (lock.active &gt; id) return stop();
        lock.active = id;
        transition.event &amp;&amp; transition.event.start.call(node, d, i);

        transition.tween.forEach(function(key, value) {
          if (value = value.call(node, d, i)) {
            tweened.push(value);
          }
        });

        d3.timer(function() { // defer to end of current frame
          timer.c = tick(elapsed || 1) ? d3_true : tick;
          return 1;
        }, 0, time);
      }

      function tick(elapsed) {
        if (lock.active !== id) return stop();

        var t = elapsed / duration,
            e = ease(t),
            n = tweened.length;

        while (n &gt; 0) {
          tweened[--n].call(node, e);
        }

        if (t &gt;= 1) {
          transition.event &amp;&amp; transition.event.end.call(node, d, i);
          return stop();
        }
      }

      function stop() {
        if (--lock.count) delete lock[id];
        else delete node.__transition__;
        return 1;
      }
    }, 0, time);
  }
}
  if (typeof define === "function" &amp;&amp; define.amd) {
    define(d3);
  } else if (typeof module === "object" &amp;&amp; module.exports) {
    module.exports = d3;
  } else {
    this.d3 = d3;
  }
}();
</raw>
    <min type="string">!function(){function $b(a,b,c){return function(){var d=c.apply(b,arguments);return d===b?a:d}}function ac(a,b){h.rebind(a,b,"sort","children","value");a.nodes=a;a.links=bc;return a}function cc(a){return a.children}function dc(a){return a.value}function ec(a,b){return b.value-a.value}function bc(a){return h.merge(a.map(function(a){return(a.children||[]).map(function(c){return{source:a,target:c}})}))}function wa(a){return{x:a.x,y:a.y,dx:a.dx,dy:a.dy}}function Wa(a,b){var c=a.x+b[3],d=a.y+b[0],e=a.dx-
b[1]-b[3],f=a.dy-b[0]-b[2];0&gt;e&amp;&amp;(c+=e/2,e=0);0&gt;f&amp;&amp;(d+=f/2,f=0);return{x:c,y:d,dx:e,dy:f}}function D(){}function Xa(a){var b=a[0];a=a[a.length-1];return b&lt;a?[b,a]:[a,b]}function Ya(a,b){function c(c){return f[((e.get(c)||("range"===b.t?e.set(c,a.push(c)):NaN))-1)%f.length]}function d(b,c){return h.range(a.length).map(function(a){return b+c*a})}var e,f,g;c.domain=function(d){if(!arguments.length)return a;a=[];e=new D;for(var f=-1,g=d.length,h;++f&lt;g;)e.has(h=d[f])||e.set(h,a.push(h));return c[b.t].apply(c,
b.a)};c.range=function(a){if(!arguments.length)return f;f=a;g=0;b={t:"range",a:arguments};return c};c.rangePoints=function(e,n){2&gt;arguments.length&amp;&amp;(n=0);var h=e[0],m=e[1],s=(m-h)/(Math.max(1,a.length-1)+n);f=d(2&gt;a.length?(h+m)/2:h+s*n/2,s);g=0;b={t:"rangePoints",a:arguments};return c};c.rangeBands=function(e,n,h){2&gt;arguments.length&amp;&amp;(n=0);3&gt;arguments.length&amp;&amp;(h=n);var m=e[1]&lt;e[0],s=e[m-0],r=(e[1-m]-s)/(a.length-n+2*h);f=d(s+r*h,r);m&amp;&amp;f.reverse();g=r*(1-n);b={t:"rangeBands",a:arguments};return c};
c.rangeRoundBands=function(e,n,h){2&gt;arguments.length&amp;&amp;(n=0);3&gt;arguments.length&amp;&amp;(h=n);var m=e[1]&lt;e[0],s=e[m-0],r=e[1-m],H=Math.floor((r-s)/(a.length-n+2*h));f=d(s+Math.round((r-s-(a.length-n)*H)/2),H);m&amp;&amp;f.reverse();g=Math.round(H*(1-n));b={t:"rangeRoundBands",a:arguments};return c};c.rangeBand=function(){return g};c.rangeExtent=function(){return Xa(b.a[0])};c.copy=function(){return Ya(a,b)};return c.domain(a)}function N(){}function O(a,b,c){return new xa(a,b,c)}function xa(a,b,c){this.h=a;this.s=
b;this.l=c}function Za(a,b,c){function d(a){360&lt;a?a-=360:0&gt;a&amp;&amp;(a+=360);return 60&gt;a?e+(f-e)*a/60:180&gt;a?f:240&gt;a?e+(f-e)*(240-a)/60:e}var e,f;a=isNaN(a)?0:0&gt;(a%=360)?a+360:a;b=isNaN(b)?0:0&gt;b?0:1&lt;b?1:b;c=0&gt;c?0:1&lt;c?1:c;f=.5&gt;=c?c*(1+b):c+b-c*b;e=2*c-f;return A(Math.round(255*d(a+120)),Math.round(255*d(a)),Math.round(255*d(a-120)))}function P(a,b,c){return new ca(a,b,c)}function ca(a,b,c){this.h=a;this.c=b;this.l=c}function $a(a,b,c){isNaN(a)&amp;&amp;(a=0);isNaN(b)&amp;&amp;(b=0);return Q(c,Math.cos(a*=fc)*b,Math.sin(a)*
b)}function Q(a,b,c){return new da(a,b,c)}function da(a,b,c){this.l=a;this.a=b;this.b=c}function ab(a,b,c){return 0&lt;a?P(Math.atan2(c,b)*ya,Math.sqrt(b*b+c*c),a):P(NaN,NaN,a)}function za(a){return.206893034&lt;a?a*a*a:(a-4/29)/7.787037}function Aa(a){return.008856&lt;a?Math.pow(a,1/3):7.787037*a+4/29}function Ba(a){return Math.round(255*(.00304&gt;=a?12.92*a:1.055*Math.pow(a,1/2.4)-.055))}function A(a,b,c){return new Ca(a,b,c)}function Ca(a,b,c){this.r=a;this.g=b;this.b=c}function R(a){return 16&gt;a?"0"+Math.max(0,
a).toString(16):Math.min(255,a).toString(16)}function bb(a,b,c){var d=0,e=0,f=0,g,k;if(g=/([a-z]+)\((.*)\)/i.exec(a))switch(k=g[2].split(","),g[1]){case "hsl":return c(parseFloat(k[0]),parseFloat(k[1])/100,parseFloat(k[2])/100);case "rgb":return b(Da(k[0]),Da(k[1]),Da(k[2]))}if(c=ea.get(a))return b(c.r,c.g,c.b);null==a||"#"!==a.charAt(0)||isNaN(c=parseInt(a.substring(1),16))||(4===a.length?(d=(c&amp;3840)&gt;&gt;4,d|=d&gt;&gt;4,e=c&amp;240,e|=e&gt;&gt;4,f=c&amp;15,f|=f&lt;&lt;4):7===a.length&amp;&amp;(d=(c&amp;16711680)&gt;&gt;16,e=(c&amp;65280)&gt;&gt;8,f=c&amp;
255));return b(d,e,f)}function cb(a,b,c){var d=Math.min(a/=255,b/=255,c/=255),e=Math.max(a,b,c),f=e-d,g=(e+d)/2;f?(d=.5&gt;g?f/(e+d):f/(2-e-d),a=60*(a==e?(b-c)/f+(b&lt;c?6:0):b==e?(c-a)/f+2:(a-b)/f+4)):(a=NaN,d=0&lt;g&amp;&amp;1&gt;g?0:a);return O(a,d,g)}function db(a,b,c){a=Ea(a);b=Ea(b);c=Ea(c);var d=Aa((.4124564*a+.3575761*b+.1804375*c)/eb),e=Aa((.2126729*a+.7151522*b+.072175*c)/fb);a=Aa((.0193339*a+.119192*b+.9503041*c)/gb);return Q(116*e-16,500*(d-e),200*(e-a))}function Ea(a){return.04045&gt;=(a/=255)?a/12.92:Math.pow((a+
.055)/1.055,2.4)}function Da(a){var b=parseFloat(a);return"%"===a.charAt(a.length-1)?Math.round(2.55*b):b}function Fa(a,b){a=h.rgb(a);b=h.rgb(b);var c=a.r,d=a.g,e=a.b,f=b.r-c,g=b.g-d,k=b.b-e;return function(a){return"#"+R(Math.round(c+f*a))+R(Math.round(d+g*a))+R(Math.round(e+k*a))}}function hb(a,b){var c={},d={},e;for(e in a)e in b?c[e]=M(a[e],b[e]):d[e]=a[e];for(e in b)e in a||(d[e]=b[e]);return function(a){for(e in c)d[e]=c[e](a);return d}}function ib(a,b){var c=[],d=[],e=a.length,f=b.length,g=
Math.min(a.length,b.length),k;for(k=0;k&lt;g;++k)c.push(M(a[k],b[k]));for(;k&lt;e;++k)d[k]=a[k];for(;k&lt;f;++k)d[k]=b[k];return function(a){for(k=0;k&lt;g;++k)d[k]=c[k](a);return d}}function B(a,b){b-=a=+a;return function(c){return a+b*c}}function jb(a,b){var c=Ga.lastIndex=Ha.lastIndex=0,d,e,f,g=-1,k=[],n=[];a+="";for(b+="";(d=Ga.exec(a))&amp;&amp;(e=Ha.exec(b));)(f=e.index)&gt;c&amp;&amp;(f=b.substring(c,f),k[g]?k[g]+=f:k[++g]=f),(d=d[0])===(e=e[0])?k[g]?k[g]+=e:k[++g]=e:(k[++g]=null,n.push({i:g,x:B(d,e)})),c=Ha.lastIndex;c&lt;
b.length&amp;&amp;(f=b.substring(c),k[g]?k[g]+=f:k[++g]=f);return 2&gt;k.length?n[0]?(b=n[0].x,function(a){return b(a)+""}):function(){return b}:(b=n.length,function(a){for(var c=0,d;c&lt;b;++c)k[(d=n[c]).i]=d.x(a);return k.join("")})}function M(a,b){for(var c=h.interpolators.length,d;0&lt;=--c&amp;&amp;!(d=h.interpolators[c](a,b)););return d}function kb(a,b){b-=a;return function(c){return Math.round(a+b*c)}}function gc(a,b){b=b-(a=+a)?1/(b-a):0;return function(c){return(c-a)*b}}function hc(a,b){b=b-(a=+a)?1/(b-a):0;return function(c){return Math.max(0,
Math.min(1,(c-a)*b))}}function S(a){return a}function Ia(a,b){return b-(a?Math.ceil(Math.log(a)/Math.LN10):1)}function ic(a){var b=a.decimal,c=a.thousands,d=a.grouping,e=a.currency,f=d?function(a){for(var b=a.length,e=[],f=0,h=d[0];0&lt;b&amp;&amp;0&lt;h;)e.push(a.substring(b-=h,b+h)),h=d[f=(f+1)%d.length];return e.reverse().join(c)}:S;return function(a){a=lb.exec(a);var c=a[1]||" ",d=a[2]||"&gt;",v=a[3]||"",m=a[4]||"",s=a[5],r=+a[6],H=a[7],x=a[8],y=a[9],C=1,T="",I="",fa=!1;x&amp;&amp;(x=+x.substring(1));if(s||"0"===c&amp;&amp;"="===
d)s=c="0",d="=",H&amp;&amp;(r-=Math.floor((r-1)/4));switch(y){case "n":H=!0;y="g";break;case "%":C=100;I="%";y="f";break;case "p":C=100;I="%";y="r";break;case "b":case "o":case "x":case "X":"#"===m&amp;&amp;(T="0"+y.toLowerCase());case "c":case "d":fa=!0;x=0;break;case "s":C=-1,y="r"}"$"===m&amp;&amp;(T=e[0],I=e[1]);"r"!=y||x||(y="g");if(null!=x)if("g"==y)x=Math.max(1,Math.min(21,x));else if("e"==y||"f"==y)x=Math.max(0,Math.min(20,x));var y=jc.get(y)||kc,l=s&amp;&amp;H;return function(a){var e=I;if(fa&amp;&amp;a%1)return"";var g=0&gt;a||0===
a&amp;&amp;0&gt;1/a?(a=-a,"-"):v;0&gt;C?(e=h.formatPrefix(a,x),a=e.scale(a),e=e.symbol+I):a*=C;a=y(a,x);var m=a.lastIndexOf("."),p=0&gt;m?a:a.substring(0,m);a=0&gt;m?"":b+a.substring(m+1);!s&amp;&amp;H&amp;&amp;(p=f(p));var m=T.length+p.length+a.length+(l?0:g.length),U=m&lt;r?Array(m=r-m+1).join(c):"";l&amp;&amp;(p=f(U+p));g+=T;a=p+a;return("&lt;"===d?g+a+U:"&gt;"===d?U+g+a:"^"===d?U.substring(0,m&gt;&gt;=1)+g+a+U.substring(m):g+(l?a:U+a))+e}}}function kc(a){return a+""}function z(){this._=new Date(1&lt;arguments.length?Date.UTC.apply(this,arguments):arguments[0])}
function Ja(a,b,c){function d(b){var c=a(b),d=f(c,1);return b-c&lt;d-b?c:d}function e(c){b(c=a(new w(c-1)),1);return c}function f(a,c){b(a=new w(+a),c);return a}function g(a,d,f){a=e(a);var g=[];if(1&lt;f)for(;a&lt;d;)c(a)%f||g.push(new Date(+a)),b(a,1);else for(;a&lt;d;)g.push(new Date(+a)),b(a,1);return g}a.floor=a;a.round=d;a.ceil=e;a.offset=f;a.range=g;var k=a.utc=ha(a);k.floor=k;k.round=ha(d);k.ceil=ha(e);k.offset=ha(f);k.range=function(a,b,c){try{w=z;var d=new z;d._=a;return g(d,b,c)}finally{w=Date}};return a}
function ha(a){return function(b,c){try{w=z;var d=new z;d._=b;return a(d,c)._}finally{w=Date}}}function lc(a){function b(a){function b(c){for(var e=[],f=-1,g=0,k,n;++f&lt;d;)if(37===a.charCodeAt(f)){e.push(a.substring(g,f));null!=(k=mb[g=a.charAt(++f)])&amp;&amp;(g=a.charAt(++f));if(n=ga[g])g=n(c,null==k?"e"===g?" ":"0":k);e.push(g);g=f+1}e.push(a.substring(g,f));return e.join("")}var d=a.length;b.parse=function(b){var d={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(c(d,a,b,0)!=b.length)return null;"p"in d&amp;&amp;(d.H=
d.H%12+12*d.p);b=null!=d.Z&amp;&amp;w!==z;var e=new (b?z:w);"j"in d?e.setFullYear(d.y,0,d.j):"w"in d&amp;&amp;("W"in d||"U"in d)?(e.setFullYear(d.y,0,1),e.setFullYear(d.y,0,"W"in d?(d.w+6)%7+7*d.W-(e.getDay()+5)%7:d.w+7*d.U-(e.getDay()+6)%7)):e.setFullYear(d.y,d.m,d.d);e.setHours(d.H+Math.floor(d.Z/100),d.M+d.Z%100,d.S,d.L);return b?e._:e};b.toString=function(){return a};return b}function c(a,b,c,d){for(var e,f=0,g=b.length,k=c.length;f&lt;g;){if(d&gt;=k)return-1;e=b.charCodeAt(f++);if(37===e){if(e=b.charAt(f++),e=q[e in
mb?b.charAt(f++):e],!e||0&gt;(d=e(a,c,d)))return-1}else if(e!=c.charCodeAt(d++))return-1}return d}var d=a.dateTime,e=a.date,f=a.time,g=a.periods,k=a.days,n=a.shortDays,v=a.months,m=a.shortMonths;b.utc=function(a){function c(a){try{w=z;var b=new w;b._=a;return d(b)}finally{w=Date}}var d=b(a);c.parse=function(a){try{w=z;var b=d.parse(a);return b&amp;&amp;b._}finally{w=Date}};c.toString=d.toString;return c};b.multi=b.utc.multi=mc;var s=h.map(),r=ia(k),l=ja(k),x=ia(n),y=ja(n),C=ia(v),T=ja(v),I=ia(m),fa=ja(m);g.forEach(function(a,
b){s.set(a.toLowerCase(),b)});var ga={a:function(a){return n[a.getDay()]},A:function(a){return k[a.getDay()]},b:function(a){return m[a.getMonth()]},B:function(a){return v[a.getMonth()]},c:b(d),d:function(a,b){return u(a.getDate(),b,2)},e:function(a,b){return u(a.getDate(),b,2)},H:function(a,b){return u(a.getHours(),b,2)},I:function(a,b){return u(a.getHours()%12||12,b,2)},j:function(a,b){return u(1+p.dayOfYear(a),b,3)},L:function(a,b){return u(a.getMilliseconds(),b,3)},m:function(a,b){return u(a.getMonth()+
1,b,2)},M:function(a,b){return u(a.getMinutes(),b,2)},p:function(a){return g[+(12&lt;=a.getHours())]},S:function(a,b){return u(a.getSeconds(),b,2)},U:function(a,b){return u(p.sundayOfYear(a),b,2)},w:function(a){return a.getDay()},W:function(a,b){return u(p.mondayOfYear(a),b,2)},x:b(e),X:b(f),y:function(a,b){return u(a.getFullYear()%100,b,2)},Y:function(a,b){return u(a.getFullYear()%1E4,b,4)},Z:nc,"%":function(){return"%"}},q={a:function(a,b,c){x.lastIndex=0;return(b=x.exec(b.substring(c)))?(a.w=y.get(b[0].toLowerCase()),
c+b[0].length):-1},A:function(a,b,c){r.lastIndex=0;return(b=r.exec(b.substring(c)))?(a.w=l.get(b[0].toLowerCase()),c+b[0].length):-1},b:function(a,b,c){I.lastIndex=0;return(b=I.exec(b.substring(c)))?(a.m=fa.get(b[0].toLowerCase()),c+b[0].length):-1},B:function(a,b,c){C.lastIndex=0;return(b=C.exec(b.substring(c)))?(a.m=T.get(b[0].toLowerCase()),c+b[0].length):-1},c:function(a,b,d){return c(a,ga.c.toString(),b,d)},d:nb,e:nb,H:ob,I:ob,j:oc,L:pc,m:qc,M:rc,p:function(a,b,c){b=s.get(b.substring(c,c+=2).toLowerCase());
return null==b?-1:(a.p=b,c)},S:sc,U:tc,w:uc,W:vc,x:function(a,b,d){return c(a,ga.x.toString(),b,d)},X:function(a,b,d){return c(a,ga.X.toString(),b,d)},y:wc,Y:xc,Z:yc,"%":zc};return b}function u(a,b,c){var d=0&gt;a?"-":"";a=(d?-a:a)+"";var e=a.length;return d+(e&lt;c?Array(c-e+1).join(b)+a:a)}function ia(a){return new RegExp("^(?:"+a.map(h.requote).join("|")+")","i")}function ja(a){for(var b=new D,c=-1,d=a.length;++c&lt;d;)b.set(a[c].toLowerCase(),c);return b}function uc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,
c+1)))?(a.w=+b[0],c+b[0].length):-1}function tc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c)))?(a.U=+b[0],c+b[0].length):-1}function vc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c)))?(a.W=+b[0],c+b[0].length):-1}function xc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+4)))?(a.y=+b[0],c+b[0].length):-1}function wc(a,b,c){q.lastIndex=0;if(b=q.exec(b.substring(c,c+2))){var d=+b[0];a=(a.y=d+(68&lt;d?1900:2E3),c+b[0].length)}else a=-1;return a}function yc(a,b,c){return/^[+-]\d{4}$/.test(b=
b.substring(c,c+5))?(a.Z=-b,c+5):-1}function qc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+2)))?(a.m=b[0]-1,c+b[0].length):-1}function nb(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+2)))?(a.d=+b[0],c+b[0].length):-1}function oc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+3)))?(a.j=+b[0],c+b[0].length):-1}function ob(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+2)))?(a.H=+b[0],c+b[0].length):-1}function rc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+2)))?
(a.M=+b[0],c+b[0].length):-1}function sc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+2)))?(a.S=+b[0],c+b[0].length):-1}function pc(a,b,c){q.lastIndex=0;return(b=q.exec(b.substring(c,c+3)))?(a.L=+b[0],c+b[0].length):-1}function nc(a){var b=a.getTimezoneOffset();a=0&lt;b?"-":"+";var c=~~(J(b)/60),b=J(b)%60;return a+u(c,"0",2)+u(b,"0",2)}function zc(a,b,c){pb.lastIndex=0;return(a=pb.exec(b.substring(c,c+1)))?c+a[0].length:-1}function mc(a){for(var b=a.length,c=-1;++c&lt;b;)a[c][0]=this(a[c][0]);return function(b){for(var c=
0,f=a[c];!f[1](b);)f=a[++c];return f[0](b)}}function Ac(a,b,c,d){var e=c(a[0],a[1]),f=d(b[0],b[1]);return function(a){return f(e(a))}}function qb(a,b){var c=0,d=a.length-1,e=a[c],f=a[d],g;f&lt;e&amp;&amp;(g=c,c=d,d=g,g=e,e=f,f=g);a[c]=b.floor(e);a[d]=b.ceil(f);return a}function rb(a){return a?{floor:function(b){return Math.floor(b/a)*a},ceil:function(b){return Math.ceil(b/a)*a}}:Bc}function ka(a,b){return a&lt;b?-1:a&gt;b?1:a&gt;=b?0:NaN}function sb(a){return{left:function(b,c,d,e){3&gt;arguments.length&amp;&amp;(d=0);4&gt;arguments.length&amp;&amp;
(e=b.length);for(;d&lt;e;){var f=d+e&gt;&gt;&gt;1;0&gt;a(b[f],c)?d=f+1:e=f}return d},right:function(b,c,d,e){3&gt;arguments.length&amp;&amp;(d=0);4&gt;arguments.length&amp;&amp;(e=b.length);for(;d&lt;e;){var f=d+e&gt;&gt;&gt;1;0&lt;a(b[f],c)?e=f:d=f+1}return d}}}function Cc(a,b,c,d){var e=[],f=[],g=0,k=Math.min(a.length,b.length)-1;a[k]&lt;a[0]&amp;&amp;(a=a.slice().reverse(),b=b.slice().reverse());for(;++g&lt;=k;)e.push(c(a[g-1],a[g])),f.push(d(b[g-1],b[g]));return function(b){var c=h.bisect(a,b,1,k)-1;return f[c](e[c](b))}}function tb(a,b,c,d){function e(){var e=
2&lt;Math.min(a.length,b.length)?Cc:Ac,h=d?hc:gc;g=e(a,b,h,c);k=e(b,a,h,M);return f}function f(a){return g(a)}var g,k;f.invert=function(a){return k(a)};f.domain=function(b){if(!arguments.length)return a;a=b.map(Number);return e()};f.range=function(a){if(!arguments.length)return b;b=a;return e()};f.rangeRound=function(a){return f.range(a).interpolate(kb)};f.clamp=function(a){if(!arguments.length)return d;d=a;return e()};f.interpolate=function(a){if(!arguments.length)return c;c=a;return e()};f.ticks=function(b){return h.range.apply(h,
X(a,b))};f.tickFormat=function(b,c){return ub(a,b,c)};f.nice=function(b){qb(a,rb(X(a,b)[2]));return e()};f.copy=function(){return tb(a,b,c,d)};return e()}function X(a,b){null==b&amp;&amp;(b=10);var c=Xa(a),d=c[1]-c[0],e=Math.pow(10,Math.floor(Math.log(d/b)/Math.LN10)),d=b/d*e;.15&gt;=d?e*=10:.35&gt;=d?e*=5:.75&gt;=d&amp;&amp;(e*=2);c[0]=Math.ceil(c[0]/e)*e;c[1]=Math.floor(c[1]/e)*e+.5*e;c[2]=e;return c}function ub(a,b,c){a=X(a,b);if(c){b=lb.exec(c);b.shift();if("s"===b[8]){var d=h.formatPrefix(Math.max(J(a[0]),J(a[1])));
b[7]||(b[7]="."+la(d.scale(a[2])));b[8]="f";c=h.format(b.join(""));return function(a){return c(d.scale(a))+d.symbol}}b[7]||(b[7]="."+Dc(b[8],a));c=b.join("")}else c=",."+la(a[2])+"f";return h.format(c)}function la(a){return-Math.floor(Math.log(a)/Math.LN10+.01)}function Dc(a,b){var c=la(b[2]);return a in Ec?Math.abs(c-la(Math.max(J(b[0]),J(b[1]))))+ +("e"!==a):c-2*("%"===a)}function vb(a,b,c){function d(b){return a(e(b))}var e=ma(b),f=ma(1/b);d.invert=function(b){return f(a.invert(b))};d.domain=function(b){if(!arguments.length)return c;
a.domain((c=b.map(Number)).map(e));return d};d.ticks=function(a){return h.range.apply(h,X(c,a))};d.tickFormat=function(a,b){return ub(c,a,b)};d.nice=function(a){return d.domain(qb(c,rb(X(c,a)[2])))};d.exponent=function(g){if(!arguments.length)return b;e=ma(b=g);f=ma(1/b);a.domain(c.map(e));return d};d.copy=function(){return vb(a.copy(),b,c)};return h.rebind(d,a,"range","rangeRound","interpolate","clamp")}function ma(a){return function(b){return 0&gt;b?-Math.pow(-b,a):Math.pow(b,a)}}function Fc(){return!0}
function wb(){}function Gc(a){function b(){for(var b=c,d=-1,g=b.length,k;++d&lt;g;)(k=b[d].on)&amp;&amp;k.apply(this,arguments);return a}var c=[],d=new D;b.on=function(b,f){var g=d.get(b),k;if(2&gt;arguments.length)return g&amp;&amp;g.on;g&amp;&amp;(g.on=null,c=c.slice(0,k=c.indexOf(g)).concat(c.slice(k+1)),d.remove(b));f&amp;&amp;c.push(d.set(b,{on:f}));return a};return b}function xb(a,b){if(b in a)return b;b=b.charAt(0).toUpperCase()+b.substring(1);for(var c=0,d=yb.length;c&lt;d;++c){var e=yb[c]+b;if(e in a)return e}}function Ka(){var a=
zb(),a=Ab()-a;24&lt;a?(isFinite(a)&amp;&amp;(clearTimeout(na),na=setTimeout(Ka,a)),oa=0):(oa=1,Bb(Ka))}function zb(){var a=Date.now();for(E=pa;E;)a&gt;=E.t&amp;&amp;(E.f=E.c(a-E.t)),E=E.n;return a}function Ab(){for(var a,b=pa,c=Infinity;b;)b.f?b=a?a.n=b.n:pa=b.n:(b.t&lt;c&amp;&amp;(c=b.t),b=(a=b).n);qa=a;return c}function Hc(a){return function(b){return 0&gt;=b?0:1&lt;=b?1:a(b)}}function Cb(a){return function(b){return 1-a(1-b)}}function Db(a){return function(b){return.5*(.5&gt;b?a(2*b):2-a(2-2*b))}}function Ic(a){return a*a}function Jc(a){return a*
a*a}function Kc(a){if(0&gt;=a)return 0;if(1&lt;=a)return 1;var b=a*a,c=b*a;return 4*(.5&gt;a?c:3*(a-b)+c-.75)}function Lc(a){return 1-Math.cos(a*Mc)}function Nc(a){return Math.pow(2,10*(a-1))}function Oc(a){return 1-Math.sqrt(1-a*a)}function Pc(a){return a&lt;1/2.75?7.5625*a*a:a&lt;2/2.75?7.5625*(a-=1.5/2.75)*a+.75:a&lt;2.5/2.75?7.5625*(a-=2.25/2.75)*a+.9375:7.5625*(a-=2.625/2.75)*a+.984375}function K(a){La(a,l);return a}function Ma(a){return"function"===typeof a?a:function(){return Na(a,this)}}function Eb(a){return"function"===
typeof a?a:function(){return Oa(a,this)}}function Fb(a,b){function c(){this.removeAttribute(a)}function d(){this.removeAttributeNS(a.space,a.local)}function e(){this.setAttribute(a,b)}function f(){this.setAttributeNS(a.space,a.local,b)}function g(){var c=b.apply(this,arguments);null==c?this.removeAttribute(a):this.setAttribute(a,c)}function k(){var c=b.apply(this,arguments);null==c?this.removeAttributeNS(a.space,a.local):this.setAttributeNS(a.space,a.local,c)}a=h.ns.qualify(a);return null==b?a.local?
d:c:"function"===typeof b?a.local?k:g:a.local?f:e}function Gb(a){return a.trim().replace(/\s+/g," ")}function Hb(a){return new RegExp("(?:^|\\s+)"+h.requote(a)+"(?:\\s+|$)","g")}function Ib(a,b){function c(){for(var c=-1;++c&lt;e;)a[c](this,b)}function d(){for(var c=-1,d=b.apply(this,arguments);++c&lt;e;)a[c](this,d)}a=a.trim().split(/^|\s+/).map(Qc);var e=a.length;return"function"===typeof b?d:c}function Qc(a){var b=Hb(a);return function(c,d){if(e=c.classList)return d?e.add(a):e.remove(a);var e=c.getAttribute("class")||
"";d?(b.lastIndex=0,b.test(e)||c.setAttribute("class",Gb(e+" "+a))):c.setAttribute("class",Gb(e.replace(b," ")))}}function Jb(a,b,c){function d(){this.style.removeProperty(a)}function e(){this.style.setProperty(a,b,c)}function f(){var d=b.apply(this,arguments);null==d?this.style.removeProperty(a):this.style.setProperty(a,d,c)}return null==b?d:"function"===typeof b?f:e}function Kb(a,b){function c(){delete this[a]}function d(){this[a]=b}function e(){var c=b.apply(this,arguments);null==c?delete this[a]:
this[a]=c}return null==b?c:"function"===typeof b?e:d}function Lb(a){return"function"===typeof a?a:(a=h.ns.qualify(a)).local?function(){return this.ownerDocument.createElementNS(a.space,a.local)}:function(){return this.ownerDocument.createElementNS(this.namespaceURI,a)}}function Mb(a){return function(){return Nb(this,a)}}function Rc(a){arguments.length||(a=ka);return function(b,c){return b&amp;&amp;c?a(b.__data__,c.__data__):!b-!c}}function Sc(){}function Ob(a,b,c){function d(){var b=this[g];b&amp;&amp;(this.removeEventListener(a,
b,b.$),delete this[g])}function e(){var e=n(b,V(arguments));d.call(this);this.addEventListener(a,this[g]=e,e.$=c);e._=b}function f(){var b=new RegExp("^__on([^.]+)"+h.requote(a)+"$"),c,d;for(d in this)if(c=d.match(b)){var e=this[d];this.removeEventListener(c[1],e,e.$);delete this[d]}}var g="__on"+a,k=a.indexOf("."),n=Pb;0&lt;k&amp;&amp;(a=a.substring(0,k));var v=Pa.get(a);v&amp;&amp;(a=v,n=Tc);return k?b?e:d:b?Sc:f}function Pb(a,b){return function(c){var d=h.event;h.event=c;b[0]=this.__data__;try{a.apply(this,b)}finally{h.event=
d}}}function Tc(a,b){var c=Pb(a,b);return function(a){var b=a.relatedTarget;b&amp;&amp;(b===this||b.compareDocumentPosition(this)&amp;8)||c.call(this,a)}}function L(a,b){for(var c=0,d=a.length;c&lt;d;c++)for(var e=a[c],f=0,g=e.length,k;f&lt;g;f++)(k=e[f])&amp;&amp;b(k,f,c);return a}function Qb(a){La(a,F);return a}function Uc(a){var b,c;return function(d,e,f){d=a[f].update;var g=d.length;f!=c&amp;&amp;(c=f,b=0);for(e&gt;=b&amp;&amp;(b=e+1);!(e=d[b])&amp;&amp;++b&lt;g;);return e}}function Vc(){var a=this.__transition__;a&amp;&amp;++a.active}function Y(a,b){La(a,
t);a.id=b;return a}function Rb(a){var b=[a.a,a.b],c=[a.c,a.d],d=Sb(b),e=b[0]*c[0]+b[1]*c[1],f=-e;c[0]+=f*b[0];c[1]+=f*b[1];f=Sb(c)||0;b[0]*c[1]&lt;c[0]*b[1]&amp;&amp;(b[0]*=-1,b[1]*=-1,d*=-1,e*=-1);this.rotate=(d?Math.atan2(b[1],b[0]):Math.atan2(-c[0],c[1]))*ya;this.translate=[a.e,a.f];this.scale=[d,f];this.skew=f?Math.atan2(e,f)*ya:0}function Sb(a){var b=Math.sqrt(a[0]*a[0]+a[1]*a[1]);b&amp;&amp;(a[0]/=b,a[1]/=b);return b}function Tb(a,b){var c=[],d=[],e,f=h.transform(a),g=h.transform(b),k=f.translate,n=g.translate,
v=f.rotate,m=g.rotate,s=f.skew,r=g.skew,f=f.scale,g=g.scale;k[0]!=n[0]||k[1]!=n[1]?(c.push("translate(",null,",",null,")"),d.push({i:1,x:B(k[0],n[0])},{i:3,x:B(k[1],n[1])})):n[0]||n[1]?c.push("translate("+n+")"):c.push("");v!=m?(180&lt;v-m?m+=360:180&lt;m-v&amp;&amp;(v+=360),d.push({i:c.push(c.pop()+"rotate(",null,")")-2,x:B(v,m)})):m&amp;&amp;c.push(c.pop()+"rotate("+m+")");s!=r?d.push({i:c.push(c.pop()+"skewX(",null,")")-2,x:B(s,r)}):r&amp;&amp;c.push(c.pop()+"skewX("+r+")");f[0]!=g[0]||f[1]!=g[1]?(e=c.push(c.pop()+"scale(",
null,",",null,")"),d.push({i:e-4,x:B(f[0],g[0])},{i:e-2,x:B(f[1],g[1])})):1==g[0]&amp;&amp;1==g[1]||c.push(c.pop()+"scale("+g+")");e=d.length;return function(a){for(var b=-1,f;++b&lt;e;)c[(f=d[b]).i]=f.x(a);return c.join("")}}function Qa(a,b,c,d){var e=a.id;return L(a,"function"===typeof c?function(a,g,k){a.__transition__[e].tween.set(b,d(c.call(a,a.__data__,g,k)))}:(c=d(c),function(a){a.__transition__[e].tween.set(b,c)}))}function Wc(a){null==a&amp;&amp;(a="");return function(){this.textContent=a}}function ra(a,b,
c,d){var e=a.__transition__||(a.__transition__={active:0,count:0}),f=e[c];if(!f){var g=d.time,f=e[c]={tween:new D,time:g,ease:d.ease,delay:d.delay,duration:d.duration};++e.count;h.timer(function(d){function n(d){if(e.active&gt;c)return m();e.active=c;f.event&amp;&amp;f.event.start.call(a,s,b);f.tween.forEach(function(c,d){(d=d.call(a,s,b))&amp;&amp;C.push(d)});h.timer(function(){y.c=v(d||1)?Fc:v;return 1},0,g)}function v(d){if(e.active!==c)return m();d/=x;for(var g=r(d),k=C.length;0&lt;k;)C[--k].call(a,g);if(1&lt;=d)return f.event&amp;&amp;
f.event.end.call(a,s,b),m()}function m(){--e.count?delete e[c]:delete a.__transition__;return 1}var s=a.__data__,r=f.ease,l=f.delay,x=f.duration,y=E,C=[];y.t=l+g;if(l&lt;=d)return n(d-l);y.c=n},0,g)}}var h={version:"3.4.6",keys:function(a){var b=[],c;for(c in a)b.push(c);return b},extent:function(a,b){var c=-1,d=a.length,e,f,g;if(1===arguments.length){for(;++c&lt;d&amp;&amp;!(null!=(e=g=a[c])&amp;&amp;e&lt;=e);)e=g=void 0;for(;++c&lt;d;)null!=(f=a[c])&amp;&amp;(e&gt;f&amp;&amp;(e=f),g&lt;f&amp;&amp;(g=f))}else{for(;++c&lt;d&amp;&amp;!(null!=(e=g=b.call(a,a[c],c))&amp;&amp;
e&lt;=e);)e=void 0;for(;++c&lt;d;)null!=(f=b.call(a,a[c],c))&amp;&amp;(e&gt;f&amp;&amp;(e=f),g&lt;f&amp;&amp;(g=f))}return[e,g]},layout:{},merge:function(a){var b=a.length,c;c=-1;for(var d=0,e,f;++c&lt;b;)d+=a[c].length;for(e=Array(d);0&lt;=--b;)for(f=a[b],c=f.length;0&lt;=--c;)e[--d]=f[c];return e},rebind:function(a,b){for(var c=1,d=arguments.length,e;++c&lt;d;)a[e=arguments[c]]=$b(a,b,b[e]);return a}};h.layout.hierarchy=function(){function a(b,k,h){var v=e.call(c,b,k);b.depth=k;h.push(b);if(v&amp;&amp;(s=v.length)){var m=-1,s,r=b.children=Array(s),l=
0;k+=1;for(var x;++m&lt;s;)x=r[m]=a(v[m],k,h),x.parent=b,l+=x.value;d&amp;&amp;r.sort(d);f&amp;&amp;(b.value=l)}else delete b.children,f&amp;&amp;(b.value=+f.call(c,b,k)||0);return b}function b(a,d){var e=a.children,h=0;if(e&amp;&amp;(l=e.length))for(var m=-1,l,r=d+1;++m&lt;l;)h+=b(e[m],r);else f&amp;&amp;(h=+f.call(c,a,d)||0);f&amp;&amp;(a.value=h);return h}function c(b){var c=[];a(b,0,c);return c}var d=ec,e=cc,f=dc;c.sort=function(a){if(!arguments.length)return d;d=a;return c};c.children=function(a){if(!arguments.length)return e;e=a;return c};c.value=
function(a){if(!arguments.length)return f;f=a;return c};c.revalue=function(a){b(a,0);return a};return c};h.layout.treemap=function(){function a(a,b){for(var c=-1,d=a.length,e,f;++c&lt;d;)f=(e=a[c]).value*(0&gt;b?0:b),e.area=isNaN(f)||0&gt;=f?0:f}function b(c){var e=c.children;if(e&amp;&amp;e.length){var f=v(c),g=[],k=e.slice(),h=Infinity,n,m="slice"===r?f.dx:"dice"===r?f.dy:"slice-dice"===r?c.depth&amp;1?f.dy:f.dx:Math.min(f.dx,f.dy);a(k,f.dx*f.dy/c.value);for(g.area=0;0&lt;(c=k.length);){g.push(c=k[c-1]);g.area+=c.area;
if(!(c="squarify"!==r)){n=m;c=g.area;for(var l=void 0,s=0,q=Infinity,t=-1,u=g.length;++t&lt;u;)if(l=g[t].area)l&lt;q&amp;&amp;(q=l),l&gt;s&amp;&amp;(s=l);c*=c;n*=n;c=(n=c?Math.max(n*s*p/c,c/(n*q*p)):Infinity)&lt;=h}c?(k.pop(),h=n):(g.area-=g.pop().area,d(g,m,f,!1),m=Math.min(f.dx,f.dy),g.length=g.area=0,h=Infinity)}g.length&amp;&amp;(d(g,m,f,!0),g.length=g.area=0);e.forEach(b)}}function c(b){var e=b.children;if(e&amp;&amp;e.length){var f=v(b),g=e.slice(),k=[];a(g,f.dx*f.dy/b.value);for(k.area=0;b=g.pop();)k.push(b),k.area+=b.area,null!=b.z&amp;&amp;
(d(k,b.z?f.dx:f.dy,f,!g.length),k.length=k.area=0);e.forEach(c)}}function d(a,b,c,d){var e=-1,f=a.length,k=c.x,h=c.y,n=b?g(a.area/b):0,m;if(b==c.dx){if(d||n&gt;c.dy)n=c.dy;for(;++e&lt;f;)m=a[e],m.x=k,m.y=h,m.dy=n,k+=m.dx=Math.min(c.x+c.dx-k,n?g(m.area/n):0);m.z=!0;m.dx+=c.x+c.dx-k;c.y+=n;c.dy-=n}else{if(d||n&gt;c.dx)n=c.dx;for(;++e&lt;f;)m=a[e],m.x=k,m.y=h,m.dx=n,h+=m.dy=Math.min(c.y+c.dy-h,n?g(m.area/n):0);m.z=!1;m.dy+=c.y+c.dy-h;c.x+=n;c.dx-=n}}function e(d){d=l||f(d);var e=d[0];e.x=0;e.y=0;e.dx=k[0];e.dy=
k[1];l&amp;&amp;f.revalue(e);a([e],e.dx*e.dy/e.value);(l?c:b)(e);m&amp;&amp;(l=d);return d}var f=h.layout.hierarchy(),g=Math.round,k=[1,1],n=null,v=wa,m=!1,l,r="squarify",p=.5*(1+Math.sqrt(5));e.size=function(a){if(!arguments.length)return k;k=a;return e};e.padding=function(a){function b(c){var d=a.call(e,c,c.depth);return null==d?wa(c):Wa(c,"number"===typeof d?[d,d,d,d]:d)}function c(b){return Wa(b,a)}if(!arguments.length)return n;var d;v=null==(n=a)?wa:"function"===(d=typeof a)?b:"number"===d?(a=[a,a,a,a],c):c;
return e};e.round=function(a){if(!arguments.length)return g!=Number;g=a?Math.round:Number;return e};e.sticky=function(a){if(!arguments.length)return m;m=a;l=null;return e};e.ratio=function(a){if(!arguments.length)return p;p=a;return e};e.mode=function(a){if(!arguments.length)return r;r=a+"";return e};return ac(e,f)};h.map=function(a){var b=new D;if(a instanceof D)a.forEach(function(a,c){b.set(a,c)});else for(var c in a)b.set(c,a[c]);return b};(function(a,b){try{for(var c in b)Object.defineProperty(a.prototype,
c,{value:b[c],enumerable:!1})}catch(d){a.prototype=b}})(D,{has:function(a){return Z+a in this},get:function(a){return this[Z+a]},set:function(a,b){return this[Z+a]=b},remove:function(a){a=Z+a;return a in this&amp;&amp;delete this[a]},keys:function(){var a=[];this.forEach(function(b){a.push(b)});return a},values:function(){var a=[];this.forEach(function(b,c){a.push(c)});return a},entries:function(){var a=[];this.forEach(function(b,c){a.push({key:b,value:c})});return a},size:function(){var a=0,b;for(b in this)b.charCodeAt(0)===
Ra&amp;&amp;++a;return a},empty:function(){for(var a in this)if(a.charCodeAt(0)===Ra)return!1;return!0},forEach:function(a){for(var b in this)b.charCodeAt(0)===Ra&amp;&amp;a.call(this,b.substring(1),this[b])}});var Z="\x00",Ra=Z.charCodeAt(0),J=Math.abs;h.range=function(a,b,c){3&gt;arguments.length&amp;&amp;(c=1,2&gt;arguments.length&amp;&amp;(b=a,a=0));if(Infinity===(b-a)/c)throw Error("infinite range");var d=[],e;e=J(c);for(var f=1;e*f%1;)f*=10;e=f;var f=-1,g;a*=e;b*=e;c*=e;if(0&gt;c)for(;(g=a+c*++f)&gt;b;)d.push(g/e);else for(;(g=a+c*++f)&lt;
b;)d.push(g/e);return d};h.scale={};h.scale.ordinal=function(){return Ya([],{t:"range",a:[[]]})};N.prototype.toString=function(){return this.rgb()+""};h.hsl=function(a,b,c){return 1===arguments.length?a instanceof xa?O(a.h,a.s,a.l):bb(""+a,cb,O):O(+a,+b,+c)};var Sa=xa.prototype=new N;Sa.brighter=function(a){a=Math.pow(.7,arguments.length?a:1);return O(this.h,this.s,this.l/a)};Sa.darker=function(a){a=Math.pow(.7,arguments.length?a:1);return O(this.h,this.s,a*this.l)};Sa.rgb=function(){return Za(this.h,
this.s,this.l)};var sa=Math.PI,Ub=2*sa,Mc=sa/2,fc=sa/180,ya=180/sa;h.hcl=function(a,b,c){return 1===arguments.length?a instanceof ca?P(a.h,a.c,a.l):a instanceof da?ab(a.l,a.a,a.b):ab((a=db((a=h.rgb(a)).r,a.g,a.b)).l,a.a,a.b):P(+a,+b,+c)};var Ta=ca.prototype=new N;Ta.brighter=function(a){return P(this.h,this.c,Math.min(100,this.l+ta*(arguments.length?a:1)))};Ta.darker=function(a){return P(this.h,this.c,Math.max(0,this.l-ta*(arguments.length?a:1)))};Ta.rgb=function(){return $a(this.h,this.c,this.l).rgb()};
h.lab=function(a,b,c){return 1===arguments.length?a instanceof da?Q(a.l,a.a,a.b):a instanceof ca?$a(a.l,a.c,a.h):db((a=h.rgb(a)).r,a.g,a.b):Q(+a,+b,+c)};var ta=18,eb=.95047,fb=1,gb=1.08883,Ua=da.prototype=new N;Ua.brighter=function(a){return Q(Math.min(100,this.l+ta*(arguments.length?a:1)),this.a,this.b)};Ua.darker=function(a){return Q(Math.max(0,this.l-ta*(arguments.length?a:1)),this.a,this.b)};Ua.rgb=function(){var a=(this.l+16)/116,b=a+this.a/500,c=a-this.b/200,b=za(b)*eb,a=za(a)*fb,c=za(c)*gb;
return A(Ba(3.2404542*b-1.5371385*a-.4985314*c),Ba(-.969266*b+1.8760108*a+.041556*c),Ba(.0556434*b-.2040259*a+1.0572252*c))};h.rgb=function(a,b,c){return 1===arguments.length?a instanceof Ca?A(a.r,a.g,a.b):bb(""+a,A,Za):A(~~a,~~b,~~c)};var ua=Ca.prototype=new N;ua.brighter=function(a){a=Math.pow(.7,arguments.length?a:1);var b=this.r,c=this.g,d=this.b;if(!b&amp;&amp;!c&amp;&amp;!d)return A(30,30,30);b&amp;&amp;30&gt;b&amp;&amp;(b=30);c&amp;&amp;30&gt;c&amp;&amp;(c=30);d&amp;&amp;30&gt;d&amp;&amp;(d=30);return A(Math.min(255,~~(b/a)),Math.min(255,~~(c/a)),Math.min(255,~~(d/
a)))};ua.darker=function(a){a=Math.pow(.7,arguments.length?a:1);return A(~~(a*this.r),~~(a*this.g),~~(a*this.b))};ua.hsl=function(){return cb(this.r,this.g,this.b)};ua.toString=function(){return"#"+R(this.r)+R(this.g)+R(this.b)};var ea=h.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,
coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,
dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,
lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,
midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,
seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});ea.forEach(function(a,b){ea.set(a,A(b&gt;&gt;16,b&gt;&gt;8&amp;255,b&amp;255))});h.interpolateRgb=Fa;h.interpolateObject=hb;h.interpolateArray=ib;h.interpolateNumber=
B;h.interpolateString=jb;var Ga=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ha=new RegExp(Ga.source,"g");h.interpolate=M;h.interpolators=[function(a,b){var c=typeof b;return("string"===c?ea.has(b)||/^(#|rgb\(|hsl\()/.test(b)?Fa:jb:b instanceof N?Fa:Array.isArray(b)?ib:"object"===c&amp;&amp;isNaN(b)?hb:B)(a,b)}];h.interpolateRound=kb;h.round=function(a,b){return b?Math.round(a*(b=Math.pow(10,b)))/b:Math.round(a)};var Xc="y z a f p n \u00b5 m  k M G T P E Z Y".split(" ").map(function(a,b){var c=Math.pow(10,
3*J(8-b));return{scale:8&lt;b?function(a){return a/c}:function(a){return a*c},symbol:a}});h.formatPrefix=function(a,b){var c=0;a&amp;&amp;(0&gt;a&amp;&amp;(a*=-1),b&amp;&amp;(a=h.round(a,Ia(a,b))),c=1+Math.floor(1E-12+Math.log(a)/Math.LN10),c=Math.max(-24,Math.min(24,3*Math.floor((c-1)/3))));return Xc[8+c/3]};var lb=/(?:([^{])?([&lt;&gt;=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,jc=h.map({b:function(a){return a.toString(2)},c:function(a){return String.fromCharCode(a)},o:function(a){return a.toString(8)},x:function(a){return a.toString(16)},
X:function(a){return a.toString(16).toUpperCase()},g:function(a,b){return a.toPrecision(b)},e:function(a,b){return a.toExponential(b)},f:function(a,b){return a.toFixed(b)},r:function(a,b){return(a=h.round(a,Ia(a,b))).toFixed(Math.max(0,Math.min(20,Ia(a*(1+1E-15),b))))}});h.requote=function(a){return a.replace(Yc,"\\$&amp;")};var Yc=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,p=h.time={},w=Date;z.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},
getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){G.setUTCDate.apply(this._,arguments)},setDay:function(){G.setUTCDay.apply(this._,arguments)},
setFullYear:function(){G.setUTCFullYear.apply(this._,arguments)},setHours:function(){G.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){G.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){G.setUTCMinutes.apply(this._,arguments)},setMonth:function(){G.setUTCMonth.apply(this._,arguments)},setSeconds:function(){G.setUTCSeconds.apply(this._,arguments)},setTime:function(){G.setTime.apply(this._,arguments)}};var G=Date.prototype;p.year=Ja(function(a){a=p.day(a);a.setMonth(0,
1);return a},function(a,b){a.setFullYear(a.getFullYear()+b)},function(a){return a.getFullYear()});p.years=p.year.range;p.years.utc=p.year.utc.range;p.day=Ja(function(a){var b=new w(2E3,0);b.setFullYear(a.getFullYear(),a.getMonth(),a.getDate());return b},function(a,b){a.setDate(a.getDate()+b)},function(a){return a.getDate()-1});p.days=p.day.range;p.days.utc=p.day.utc.range;p.dayOfYear=function(a){var b=p.year(a);return Math.floor((a-b-6E4*(a.getTimezoneOffset()-b.getTimezoneOffset()))/864E5)};"sunday monday tuesday wednesday thursday friday saturday".split(" ").forEach(function(a,
b){b=7-b;var c=p[a]=Ja(function(a){(a=p.day(a)).setDate(a.getDate()-(a.getDay()+b)%7);return a},function(a,b){a.setDate(a.getDate()+7*Math.floor(b))},function(a){var c=p.year(a).getDay();return Math.floor((p.dayOfYear(a)+(c+b)%7)/7)-(c!==b)});p[a+"s"]=c.range;p[a+"s"].utc=c.utc.range;p[a+"OfYear"]=function(a){var c=p.year(a).getDay();return Math.floor((p.dayOfYear(a)+(c+b)%7)/7)}});p.week=p.sunday;p.weeks=p.sunday.range;p.weeks.utc=p.sunday.utc.range;p.weekOfYear=p.sundayOfYear;var mb={"-":"",_:" ",
0:"0"},q=/^\s*\d+/,pb=/^%/;h.locale=function(a){return{numberFormat:ic(a),timeFormat:lc(a)}};var Zc=h.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),shortDays:"Sun Mon Tue Wed Thu Fri Sat".split(" "),months:"January February March April May June July August September October November December".split(" "),shortMonths:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" ")});
h.format=Zc.numberFormat;var Bc={floor:S,ceil:S};h.ascending=ka;var Vb=sb(ka);h.bisectLeft=Vb.left;h.bisect=h.bisectRight=Vb.right;h.bisector=function(a){return sb(1===a.length?function(b,c){return ka(a(b),c)}:a)};h.scale.linear=function(){return tb([0,1],[0,1],M,!1)};var Ec={s:1,g:1,p:1,r:1,e:1};h.scale.pow=function(){return vb(h.scale.linear(),1,[0,1])};h.scale.sqrt=function(){return h.scale.pow().exponent(.5)};var La={}.__proto__?function(a,b){a.__proto__=b}:function(a,b){for(var c in b)a[c]=b[c]};
h.dispatch=function(){for(var a=new wb,b=-1,c=arguments.length;++b&lt;c;)a[arguments[b]]=Gc(a);return a};wb.prototype.on=function(a,b){var c=a.indexOf("."),d="";0&lt;=c&amp;&amp;(d=a.substring(c+1),a=a.substring(0,c));if(a)return 2&gt;arguments.length?this[a].on(d):this[a].on(d,b);if(2===arguments.length){if(null==b)for(a in this)if(this.hasOwnProperty(a))this[a].on(d,null);return this}};var Wb=[].slice,V=function(a){return Wb.call(a)},$=document,W=$.documentElement,aa=window;try{V(W.childNodes)[0].nodeType}catch(dd){V=
function(a){for(var b=a.length,c=Array(b);b--;)c[b]=a[b];return c}}var yb="webkit ms moz Moz o O".split(" "),pa,qa,oa,na,E,Bb=aa[xb(aa,"requestAnimationFrame")]||function(a){setTimeout(a,17)};h.timer=function(a,b,c){var d=arguments.length;2&gt;d&amp;&amp;(b=0);3&gt;d&amp;&amp;(c=Date.now());d={c:a,t:c+b,f:!1,n:null};qa?qa.n=d:pa=d;qa=d;oa||(na=clearTimeout(na),oa=1,Bb(Ka))};h.timer.flush=function(){zb();Ab()};var Xb=function(){return S},$c=h.map({linear:Xb,poly:function(a){return function(b){return Math.pow(b,a)}},quad:function(){return Ic},
cubic:function(){return Jc},sin:function(){return Lc},exp:function(){return Nc},circle:function(){return Oc},elastic:function(a,b){var c;2&gt;arguments.length&amp;&amp;(b=.45);arguments.length?c=b/Ub*Math.asin(1/a):(a=1,c=b/4);return function(d){return 1+a*Math.pow(2,-10*d)*Math.sin((d-c)*Ub/b)}},back:function(a){a||(a=1.70158);return function(b){return b*b*((a+1)*b-a)}},bounce:function(){return Pc}}),ad=h.map({"in":S,out:Cb,"in-out":Db,"out-in":function(a){return Db(Cb(a))}});h.ease=function(a){var b=a.indexOf("-"),
c=0&lt;=b?a.substring(0,b):a,b=0&lt;=b?a.substring(b+1):"in",c=$c.get(c)||Xb,b=ad.get(b)||S;return Hc(b(c.apply(null,Wb.call(arguments,1))))};var Na=function(a,b){return b.querySelector(a)},Oa=function(a,b){return b.querySelectorAll(a)},bd=W[xb(W,"matchesSelector")],Nb=function(a,b){return bd.call(a,b)};"function"===typeof Sizzle&amp;&amp;(Na=function(a,b){return Sizzle(a,b)[0]||null},Oa=Sizzle,Nb=Sizzle.matchesSelector);h.selection=function(){return Yb};var l=h.selection.prototype=[];l.select=function(a){var b=
[],c,d,e,f;a=Ma(a);for(var g=-1,k=this.length;++g&lt;k;){b.push(c=[]);c.parentNode=(e=this[g]).parentNode;for(var h=-1,l=e.length;++h&lt;l;)(f=e[h])?(c.push(d=a.call(f,f.__data__,h,g)),d&amp;&amp;"__data__"in f&amp;&amp;(d.__data__=f.__data__)):c.push(null)}return K(b)};l.selectAll=function(a){var b=[],c,d;a=Eb(a);for(var e=-1,f=this.length;++e&lt;f;)for(var g=this[e],k=-1,h=g.length;++k&lt;h;)if(d=g[k])b.push(c=V(a.call(d,d.__data__,k,e))),c.parentNode=d;return K(b)};var Va={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",
xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};h.ns={prefix:Va,qualify:function(a){var b=a.indexOf(":"),c=a;0&lt;=b&amp;&amp;(c=a.substring(0,b),a=a.substring(b+1));return Va.hasOwnProperty(c)?{space:Va[c],local:a}:a}};l.attr=function(a,b){if(2&gt;arguments.length){if("string"===typeof a){var c=this.node();a=h.ns.qualify(a);return a.local?c.getAttributeNS(a.space,a.local):c.getAttribute(a)}for(b in a)this.each(Fb(b,a[b]));return this}return this.each(Fb(a,
b))};l.classed=function(a,b){if(2&gt;arguments.length){if("string"===typeof a){var c=this.node(),d=(a=a.trim().split(/^|\s+/)).length,e=-1;if(b=c.classList)for(;++e&lt;d;){if(!b.contains(a[e]))return!1}else for(b=c.getAttribute("class");++e&lt;d;)if(!Hb(a[e]).test(b))return!1;return!0}for(b in a)this.each(Ib(b,a[b]));return this}return this.each(Ib(a,b))};l.style=function(a,b,c){var d=arguments.length;if(3&gt;d){if("string"!==typeof a){2&gt;d&amp;&amp;(b="");for(c in a)this.each(Jb(c,a[c],b));return this}if(2&gt;d)return aa.getComputedStyle(this.node(),
null).getPropertyValue(a);c=""}return this.each(Jb(a,b,c))};l.property=function(a,b){if(2&gt;arguments.length){if("string"===typeof a)return this.node()[a];for(b in a)this.each(Kb(b,a[b]));return this}return this.each(Kb(a,b))};l.text=function(a){return arguments.length?this.each("function"===typeof a?function(){var b=a.apply(this,arguments);this.textContent=null==b?"":b}:null==a?function(){this.textContent=""}:function(){this.textContent=a}):this.node().textContent};l.html=function(a){return arguments.length?
this.each("function"===typeof a?function(){var b=a.apply(this,arguments);this.innerHTML=null==b?"":b}:null==a?function(){this.innerHTML=""}:function(){this.innerHTML=a}):this.node().innerHTML};l.append=function(a){a=Lb(a);return this.select(function(){return this.appendChild(a.apply(this,arguments))})};l.insert=function(a,b){a=Lb(a);b=Ma(b);return this.select(function(){return this.insertBefore(a.apply(this,arguments),b.apply(this,arguments)||null)})};l.remove=function(){return this.each(function(){var a=
this.parentNode;a&amp;&amp;a.removeChild(this)})};l.data=function(a,b){function c(a,c){var d,e=a.length,f=c.length,g=Math.min(e,f),p=Array(f),q=Array(f),t=Array(e),u,w;if(b){var g=new D,A=new D,B=[],z;for(d=-1;++d&lt;e;)z=b.call(u=a[d],u.__data__,d),g.has(z)?t[d]=u:g.set(z,u),B.push(z);for(d=-1;++d&lt;f;)z=b.call(c,w=c[d],d),(u=g.get(z))?(p[d]=u,u.__data__=w):A.has(z)||(q[d]={__data__:w}),A.set(z,w),g.remove(z);for(d=-1;++d&lt;e;)g.has(B[d])&amp;&amp;(t[d]=a[d])}else{for(d=-1;++d&lt;g;)u=a[d],w=c[d],u?(u.__data__=w,p[d]=u):
q[d]={__data__:w};for(;d&lt;f;++d)q[d]={__data__:c[d]};for(;d&lt;e;++d)t[d]=a[d]}q.update=p;q.parentNode=p.parentNode=t.parentNode=a.parentNode;k.push(q);h.push(p);l.push(t)}var d=-1,e=this.length,f,g;if(!arguments.length){for(a=Array(e=(f=this[0]).length);++d&lt;e;)if(g=f[d])a[d]=g.__data__;return a}var k=Qb([]),h=K([]),l=K([]);if("function"===typeof a)for(;++d&lt;e;)c(f=this[d],a.call(f,f.parentNode.__data__,d));else for(;++d&lt;e;)c(f=this[d],a);h.enter=function(){return k};h.exit=function(){return l};return h};
l.datum=function(a){return arguments.length?this.property("__data__",a):this.property("__data__")};l.filter=function(a){var b=[],c,d,e;"function"!==typeof a&amp;&amp;(a=Mb(a));for(var f=0,g=this.length;f&lt;g;f++){b.push(c=[]);c.parentNode=(d=this[f]).parentNode;for(var k=0,h=d.length;k&lt;h;k++)(e=d[k])&amp;&amp;a.call(e,e.__data__,k,f)&amp;&amp;c.push(e)}return K(b)};l.order=function(){for(var a=-1,b=this.length;++a&lt;b;)for(var c=this[a],d=c.length-1,e=c[d],f;0&lt;=--d;)if(f=c[d])e&amp;&amp;e!==f.nextSibling&amp;&amp;e.parentNode.insertBefore(f,
e),e=f;return this};l.sort=function(a){a=Rc.apply(this,arguments);for(var b=-1,c=this.length;++b&lt;c;)this[b].sort(a);return this.order()};h.event=null;l.on=function(a,b,c){var d=arguments.length;if(3&gt;d){if("string"!==typeof a){2&gt;d&amp;&amp;(b=!1);for(c in a)this.each(Ob(c,a[c],b));return this}if(2&gt;d)return(d=this.node()["__on"+a])&amp;&amp;d._;c=!1}return this.each(Ob(a,b,c))};var Pa=h.map({mouseenter:"mouseover",mouseleave:"mouseout"});Pa.forEach(function(a){"on"+a in $&amp;&amp;Pa.remove(a)});l.each=function(a){return L(this,
function(b,c,d){a.call(b,b.__data__,c,d)})};l.call=function(a){var b=V(arguments);a.apply(b[0]=this,b);return this};l.empty=function(){return!this.node()};l.node=function(){for(var a=0,b=this.length;a&lt;b;a++)for(var c=this[a],d=0,e=c.length;d&lt;e;d++){var f=c[d];if(f)return f}return null};l.size=function(){var a=0;this.each(function(){++a});return a};var F=[];h.selection.enter=Qb;h.selection.enter.prototype=F;F.append=l.append;F.empty=l.empty;F.node=l.node;F.call=l.call;F.size=l.size;F.select=function(a){for(var b=
[],c,d,e,f,g,k=-1,h=this.length;++k&lt;h;){e=(f=this[k]).update;b.push(c=[]);c.parentNode=f.parentNode;for(var l=-1,m=f.length;++l&lt;m;)(g=f[l])?(c.push(e[l]=d=a.call(f.parentNode,g.__data__,l,k)),d.__data__=g.__data__):c.push(null)}return K(b)};F.insert=function(a,b){2&gt;arguments.length&amp;&amp;(b=Uc(this));return l.insert.call(this,a,b)};l.transition=function(){for(var a=ba||++Zb,b=[],c,d,e=va||{time:Date.now(),ease:Kc,delay:0,duration:250},f=-1,g=this.length;++f&lt;g;){b.push(c=[]);for(var k=this[f],h=-1,l=k.length;++h&lt;
l;)(d=k[h])&amp;&amp;ra(d,h,a,e),c.push(d)}return Y(b,a)};l.interrupt=function(){return this.each(Vc)};h.select=function(a){a=["string"===typeof a?Na(a,$):a];a.parentNode=W;return K([a])};h.selectAll=function(a){a=V("string"===typeof a?Oa(a,$):a);a.parentNode=W;return K([a])};var Yb=h.select(W),t=[],Zb=0,ba,va;t.call=l.call;t.empty=l.empty;t.node=l.node;t.size=l.size;h.transition=function(a){return arguments.length?ba?a.transition():a:Yb.transition()};h.transition.prototype=t;t.select=function(a){var b=this.id,
c=[],d,e,f;a=Ma(a);for(var g=-1,k=this.length;++g&lt;k;){c.push(d=[]);for(var h=this[g],l=-1,m=h.length;++l&lt;m;)(f=h[l])&amp;&amp;(e=a.call(f,f.__data__,l,g))?("__data__"in f&amp;&amp;(e.__data__=f.__data__),ra(e,l,b,f.__transition__[b]),d.push(e)):d.push(null)}return Y(c,b)};t.selectAll=function(a){var b=this.id,c=[],d,e,f,g;a=Eb(a);for(var k=-1,h=this.length;++k&lt;h;)for(var l=this[k],m=-1,p=l.length;++m&lt;p;)if(d=l[m]){g=d.__transition__[b];e=a.call(d,d.__data__,m,k);c.push(d=[]);for(var r=-1,q=e.length;++r&lt;q;)(f=e[r])&amp;&amp;
ra(f,r,b,g),d.push(f)}return Y(c,b)};t.filter=function(a){var b=[],c,d,e;"function"!==typeof a&amp;&amp;(a=Mb(a));for(var f=0,g=this.length;f&lt;g;f++){b.push(c=[]);d=this[f];for(var k=0,h=d.length;k&lt;h;k++)(e=d[k])&amp;&amp;a.call(e,e.__data__,k,f)&amp;&amp;c.push(e)}return Y(b,this.id)};h.transform=function(a){var b=$.createElementNS(h.ns.prefix.svg,"g");return(h.transform=function(a){if(null!=a){b.setAttribute("transform",a);var d=b.transform.baseVal.consolidate()}return new Rb(d?d.matrix:cd)})(a)};Rb.prototype.toString=
function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var cd={a:1,b:0,c:0,d:1,e:0,f:0};h.interpolateTransform=Tb;t.tween=function(a,b){var c=this.id;return 2&gt;arguments.length?this.node().__transition__[c].tween.get(a):L(this,null==b?function(b){b.__transition__[c].tween.remove(a)}:function(d){d.__transition__[c].tween.set(a,b)})};t.attr=function(a,b){function c(){this.removeAttribute(k)}function d(){this.removeAttributeNS(k.space,k.local)}
function e(a){return null==a?c:(a+="",function(){var b=this.getAttribute(k),c;return b!==a&amp;&amp;(c=g(b,a),function(a){this.setAttribute(k,c(a))})})}function f(a){return null==a?d:(a+="",function(){var b=this.getAttributeNS(k.space,k.local),c;return b!==a&amp;&amp;(c=g(b,a),function(a){this.setAttributeNS(k.space,k.local,c(a))})})}if(2&gt;arguments.length){for(b in a)this.attr(b,a[b]);return this}var g="transform"==a?Tb:M,k=h.ns.qualify(a);return Qa(this,"attr."+a,b,k.local?f:e)};t.attrTween=function(a,b){function c(a,
c){var d=b.call(this,a,c,this.getAttribute(e));return d&amp;&amp;function(a){this.setAttribute(e,d(a))}}function d(a,c){var d=b.call(this,a,c,this.getAttributeNS(e.space,e.local));return d&amp;&amp;function(a){this.setAttributeNS(e.space,e.local,d(a))}}var e=h.ns.qualify(a);return this.tween("attr."+a,e.local?d:c)};t.style=function(a,b,c){function d(){this.style.removeProperty(a)}var e=arguments.length;if(3&gt;e){if("string"!==typeof a){2&gt;e&amp;&amp;(b="");for(c in a)this.style(c,a[c],b);return this}c=""}return Qa(this,"style."+
a,b,function(b){return null==b?d:(b+="",function(){var d=aa.getComputedStyle(this,null).getPropertyValue(a),e;return d!==b&amp;&amp;(e=M(d,b),function(b){this.style.setProperty(a,e(b),c)})})})};t.styleTween=function(a,b,c){3&gt;arguments.length&amp;&amp;(c="");return this.tween("style."+a,function(d,e){var f=b.call(this,d,e,aa.getComputedStyle(this,null).getPropertyValue(a));return f&amp;&amp;function(b){this.style.setProperty(a,f(b),c)}})};t.text=function(a){return Qa(this,"text",a,Wc)};t.remove=function(){return this.each("end.transition",
function(){var a;2&gt;this.__transition__.count&amp;&amp;(a=this.parentNode)&amp;&amp;a.removeChild(this)})};t.ease=function(a){var b=this.id;if(1&gt;arguments.length)return this.node().__transition__[b].ease;"function"!==typeof a&amp;&amp;(a=h.ease.apply(h,arguments));return L(this,function(c){c.__transition__[b].ease=a})};t.delay=function(a){var b=this.id;return 1&gt;arguments.length?this.node().__transition__[b].delay:L(this,"function"===typeof a?function(c,d,e){c.__transition__[b].delay=+a.call(c,c.__data__,d,e)}:(a=+a,function(c){c.__transition__[b].delay=
a}))};t.duration=function(a){var b=this.id;return 1&gt;arguments.length?this.node().__transition__[b].duration:L(this,"function"===typeof a?function(c,d,e){c.__transition__[b].duration=Math.max(1,a.call(c,c.__data__,d,e))}:(a=Math.max(1,a),function(c){c.__transition__[b].duration=a}))};t.each=function(a,b){var c=this.id;if(2&gt;arguments.length){var d=va,e=ba;ba=c;L(this,function(b,d,e){va=b.__transition__[c];a.call(b,b.__data__,d,e)});va=d;ba=e}else L(this,function(d){d=d.__transition__[c];(d.event||(d.event=
h.dispatch("start","end"))).on(a,b)});return this};t.transition=function(){for(var a=this.id,b=++Zb,c=[],d,e,f,g,k=0,h=this.length;k&lt;h;k++){c.push(d=[]);e=this[k];for(var l=0,m=e.length;l&lt;m;l++){if(f=e[l])g=Object.create(f.__transition__[a]),g.delay+=g.duration,ra(f,l,b,g);d.push(f)}}return Y(c,b)};"function"===typeof define&amp;&amp;define.amd?define(h):"object"===typeof module&amp;&amp;module.exports?module.exports=h:this.d3=h}();</min>
    <version type="string">3.4.6-1</version>
    <sysmodtime type="dateTime">10/12/14 20:13:33</sysmodtime>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodcount type="decimal">13</sysmodcount>
  </record>
</recordset>
