<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="Process">
  <record id="process=&quot;kmdoctype.doaddview&quot;" recordid="kmdoctype.doaddview">
    <process type="string">kmdoctype.doaddview</process>
    <pre.expressions sctype="array">
      <pre.expressions sctype="operator">$L.newviewarray={[]}</pre.expressions>
      <pre.expressions sctype="operator">1 in $L.newviewarray=$viewDataVar</pre.expressions>
      <pre.expressions sctype="operator">2 in $L.newviewarray=$viewDescVar</pre.expressions>
      <pre.expressions sctype="operator">3 in $L.newviewarray=$viewNameVar</pre.expressions>
      <pre.expressions sctype="operator">5 in $L.newviewarray=$viewSecLevelVar</pre.expressions>
      <pre.expressions sctype="operator">$viewRoles=denull($viewRoles)</pre.expressions>
      <pre.expressions sctype="operator">$seclevelerror=0</pre.expressions>
    </pre.expressions>
    <post.expressions sctype="array">
      <post.expressions sctype="operator">if ($seclevelerror=0) then (4 in $L.newviewarray=$viewRoles)</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then (format.view in $L.file=insert(format.view in $L.file, 0, 1, $L.newviewarray, true))</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then ($L.format="kmdoctype.edit")</post.expressions>
      <post.expressions sctype="string"/>
      <post.expressions sctype="string"/>
      <post.expressions sctype="operator">cleanup($seclevelerror)</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then cleanup($viewNameVar)</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then cleanup($viewSecLevelVar)</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then cleanup($viewDataVar)</post.expressions>
      <post.expressions sctype="operator">if ($seclevelerror=0) then cleanup($viewDescVar)</post.expressions>
      <post.expressions sctype="operator">if (not  (null($viewListIndex))) then cleanup($viewListIndex)</post.expressions>
      <post.expressions sctype="operator">$L.exit="display"</post.expressions>
    </post.expressions>
    <rad NullValue="1" sctype="array">
      <rad sctype="structure">
        <application NullValue="1" type="string"/>
        <names NullValue="1" sctype="array">
          <names NullValue="1" type="string"/>
        </names>
        <values NullValue="1" sctype="array">
          <values NullValue="1" type="string"/>
        </values>
        <rad.condition NullValue="1" type="boolean"/>
        <pre.rad.expressions NullValue="1" sctype="array">
          <pre.rad.expressions NullValue="1" type="expression"/>
        </pre.rad.expressions>
        <post.rad.expressions NullValue="1" sctype="array">
          <post.rad.expressions NullValue="1" type="expression"/>
        </post.rad.expressions>
      </rad>
    </rad>
    <next.process NullValue="1" sctype="array">
      <next.process NullValue="1" type="string"/>
    </next.process>
    <process.condition NullValue="1" sctype="array">
      <process.condition NullValue="1" type="boolean"/>
    </process.condition>
    <run.standard type="boolean">true</run.standard>
    <sysmodcount type="decimal">30</sysmodcount>
    <sysmoduser type="string">ezeobiej</sysmoduser>
    <sysmodtime type="dateTime">04/22/11 09:44:09</sysmodtime>
    <save.cursor.position NullValue="1" type="boolean"/>
    <run.in.window NullValue="1" type="boolean"/>
    <window.name NullValue="1" type="string"/>
    <javascript.pre type="string">// This function checks if a string passed to it consists of only numeric values
function checkNumeric(strString)
   //  check for valid numeric strings	
   {
   var strValidChars = "0123456789";
   var strChar;
   var blnResult = true;
   
   if (strString.length == 0) return false;

  
   //  test strString consists of valid characters listed above
   for (i = 0; i &lt; strString.length &amp;&amp; blnResult == true; i++)
      {
      strChar = strString.charAt(i);
      if (strValidChars.indexOf(strChar) == -1)
         {
         blnResult = false;
         }
      }
   return blnResult;
   }


//we need to do a loop of the existing views to make sure the security level is unique
var dupelevel="false";

//Make sure the fields on the form have valid values

if ((vars.$viewSecLevelVar == "") || (vars.$viewSecLevelVar == null))
{
	vars.$seclevelerror = 1;
	print(system.functions.scmsg(109, "km")); // Security level must have a value.
	vars.$L_action = "do nothing";
}

else if ((vars.$viewNameVar == "") || (vars.$viewNameVar == null))
{
	vars.$seclevelerror = 1;
	print(system.functions.scmsg(1209, "km")); // View name can't be empty.
	vars.$L_action = "do nothing";
}

// ensure we have a numeric value in the seclevel field

else if (checkNumeric(vars.$viewSecLevelVar) == false) 
      {
      
      vars.$seclevelerror = 1;
      print(system.functions.scmsg(1109, "km")); // Security level must be numeric.
      
      vars.$L_action = "do nothing";
      }

else
{
	for (var i=0;i &lt;  vars.$L_file.format_view.length();i++)
	{
    	if (vars.$L_file.format_view[i].view_seclevel == vars.$viewSecLevelVar)
    	{
    		dupelevel="true";
    	}
	}

	if( dupelevel == "true")
	{
		vars.$seclevelerror = 1;
		print(system.functions.scmsg(108, "km")); // Security level must be unique within a Document Type.
		vars.$L_action = "do nothing";
	}
	else
	{
		var arrayArgs = new SCDatum();
		arrayArgs.setType(8);  //type array
		arrayArgs.push(vars.$viewNameVar);
		print(system.functions.scmsg(110, "km", arrayArgs)); // New Document View: %S added to View list.  You must save the Document Type to save any changes to the View list.
	}
}
</javascript.pre>
    <javascript.post NullValue="1" type="string"/>
    <baseMethod NullValue="1" type="string"/>
  </record>
</recordset>
