<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="Process">
  <record id="process=&quot;kmdocument.execrecordlink.view&quot;" recordid="kmdocument.execrecordlink.view">
    <process type="string">kmdocument.execrecordlink.view</process>
    <pre.expressions sctype="array">
      <pre.expressions sctype="operator">$kmviewedid=""</pre.expressions>
      <pre.expressions sctype="operator">$L.continue=false</pre.expressions>
      <pre.expressions sctype="operator">$L.comment=false</pre.expressions>
    </pre.expressions>
    <post.expressions sctype="array">
      <post.expressions sctype="operator">if (not  (null($firepreview))) then cleanup($firepreview)</post.expressions>
      <post.expressions sctype="operator">if ($L.doc.exit="usesolution") then ($L.exit.when.done=true)</post.expressions>
      <post.expressions sctype="operator">if null($usesolution) then ($usesolution=false)</post.expressions>
      <post.expressions sctype="operator">if $usesolution then ($L.exit.when.done=true)</post.expressions>
    </post.expressions>
    <rad sctype="array">
      <rad sctype="structure">
        <application type="string">se.search.engine</application>
        <names sctype="array">
          <names sctype="string">text</names>
          <names sctype="string">query</names>
          <names sctype="string">types</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.linktable</values>
          <values sctype="string">$L.linkquery</values>
          <values sctype="string">$L.formattouse</values>
        </values>
        <rad.condition type="operator">$oktoview and not  ($L.continue)</rad.condition>
        <pre.rad.expressions sctype="string"/>
        <post.rad.expressions sctype="string"/>
      </rad>
      <rad sctype="structure">
        <application type="string">apm.mb.ok</application>
        <names sctype="array">
          <names sctype="string">text</names>
          <names sctype="string">index</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.errortext</values>
          <values sctype="string">3</values>
        </values>
        <rad.condition type="operator">not  ($oktoview) and not  ($L.continue)</rad.condition>
        <pre.rad.expressions sctype="string"/>
        <post.rad.expressions sctype="string"/>
      </rad>
      <rad sctype="structure">
        <application type="string">se.call.process</application>
        <names sctype="array">
          <names sctype="string">name</names>
          <names sctype="string">file</names>
        </names>
        <values sctype="array">
          <values sctype="string">"kmdocument.addfeedback"</values>
          <values sctype="string">$L.file</values>
        </values>
        <rad.condition type="operator">$L.comment=true</rad.condition>
        <pre.rad.expressions sctype="array"/>
        <post.rad.expressions sctype="array"/>
      </rad>
    </rad>
    <next.process NullValue="1" sctype="array">
      <next.process NullValue="1" type="string"/>
    </next.process>
    <process.condition NullValue="1" sctype="array">
      <process.condition NullValue="1" type="boolean"/>
    </process.condition>
    <run.standard NullValue="1" type="boolean"/>
    <sysmodcount type="decimal">40</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">07/02/15 20:36:50</sysmodtime>
    <save.cursor.position NullValue="1" type="boolean"/>
    <run.in.window NullValue="1" type="boolean"/>
    <window.name NullValue="1" type="string"/>
    <javascript.pre type="string">if(vars.$L_linktable != "kmfeedback")
{

vars.$L_linkquery = decodeURIComponent( vars.$L_linkquery );

// Display the document if vars.$oktoview is true
var strId = system.library.KMUtils.removetoken(vars.$L_linkquery, "\"");

strId = strId.split("=");

vars.$L_doctoview = new SCFile(vars.$L_linktable);

// Remove the kbname from the link. The kbname is used for adaptive 
//  learning. The select statement should have only the id in the query.
var kbnameIndex = vars.$L_linkquery.indexOf("&amp;nbsp;and&amp;nbsp;kbname=");
if ( kbnameIndex &gt;= 0 )
{
  var kbname = vars.$L_linkquery.substring(kbnameIndex, vars.$L_linkquery.length-1);
  var qindex = kbname.indexOf("\"");
  kbname = kbname.substring(qindex+1,kbname.length);
  vars.$L_linkquery = vars.$L_linkquery.substring(0,kbnameIndex);
}

var rc = vars.$L_doctoview.doSelect(vars.$L_linkquery);

if( vars.$L_linktable == "kmdocument" )
{
  // Ensure that this user has rights to view the linked document.
        vars.$oktoview = system.library.KMSecurity.doesUserHaveDocViewRights(vars.$L_doctoview);

  if ( vars.$oktoview )
  {
    if (vars.$L_doctoview.doctype == "external")
      vars.$L_formattouse="kmdocument.viewexternalwithview";
    else 
      vars.$L_formattouse="kmdocument.viewwithview";    
    vars.$firepreview=true;
  }
  else
  {
    var arrayArgs = new SCDatum();
    arrayArgs.setType(8);  //type array
    arrayArgs.push(vars.$L_doctoview.id);
    vars.$L_errortext = system.functions.scmsg(185, "km", arrayArgs);
    // Alert: "You do not have permission to view the knowledge document with id %S." 
  }
}
else // linktable is not "kmdocument"
  vars.$oktoview = true;          

 system.library.KMUsageStats.incrementViewCount(strId[1], vars.$L_linktable);
 system.library.KMUsageHistory.viewed(strId[1], vars.$L_linktable);

 vars.$kmviewedid = strId[1];
 }
 else
 {
   vars.$L_continue=true;
  if( vars.$L_linkquery != "comments")
  {
  var fFeedback = new SCFile("kmfeedback");
    var newid = new SCDatum();
    var rc;
    newid.setType(1);
    var retVal = system.functions.rtecall("getnumber", rc, newid, "kmfeedback");
    //print("$L.newFBid "+newid);
    fFeedback.id = newid;
    
    if (vars.$L_linkquery=="like")
    {
      fFeedback.useful = true;
    }
    else
    {
      fFeedback.useful = false;
    }
    fFeedback.kmdocumentid  = vars.$L_file.id;
    fFeedback.author    = system.functions.operator();
    fFeedback.createtime  = system.functions.tod();
    fFeedback.feedbacktext    = "NA";
    //print("fFeedback "+fFeedback);
    var rc = fFeedback.doInsert();
    var text = "";
    if (rc==RC_SUCCESS)
    {
    text = system.functions.scmsg(99999,"km");
    print(text);
    }


    if (!!vars['$lo.idol.enabled']) {
      var IDOLGlobalSearchVoting = lib.IDOLGlobalSearchVoting.require();
      IDOLGlobalSearchVoting.vote(vars.$L_file, vars.$L_linkquery=="like");
    }
    
   }
   else
   {
     vars.$L_comment=true;
   }

 }
</javascript.pre>
    <javascript.post type="string">if( ! vars.$L_continue )
  system.library.KMUsageHistory.usesolution(vars.$kmviewedid, vars.$L_file.contexttag);

//system.functions.cleanup(vars.$kmmapsource);
//system.functions.cleanup(vars.$kmviewedid);
//system.functions.cleanup(var.$kmlinkedrecord);</javascript.post>
    <baseMethod NullValue="1" type="string"/>
  </record>
</recordset>
