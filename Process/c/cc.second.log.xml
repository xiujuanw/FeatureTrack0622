<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="Process">
  <record id="process=&quot;cc.second.log&quot;" recordid="cc.second.log">
    <process type="string">cc.second.log</process>
    <pre.expressions NullValue="1" sctype="array">
      <pre.expressions NullValue="1" type="expression"/>
    </pre.expressions>
    <post.expressions NullValue="1" sctype="array">
      <post.expressions NullValue="1" type="expression"/>
    </post.expressions>
    <rad sctype="array">
      <rad sctype="structure">
        <application type="string">sc.get.sla</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">number1</names>
          <names sctype="string">numbers</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">contract.id in $L.file</values>
          <values sctype="string">agreement.ids in $L.file</values>
        </values>
        <rad.condition type="operator">enable in $G.sla.environment</rad.condition>
        <pre.rad.expressions sctype="string"/>
        <post.rad.expressions sctype="string"/>
      </rad>
      <rad sctype="structure">
        <application type="string">sla.check.sh.wrapper</application>
        <names sctype="array">
          <names sctype="string">number1</names>
          <names sctype="string">text</names>
        </names>
        <values sctype="array">
          <values sctype="string">1 in agreement.ids in $L.file</values>
          <values sctype="string">$L.exit</values>
        </values>
        <rad.condition type="operator">not  (null(callback.contact in $L.file)) and null(agreement.ids in $L.file) and check.sh in $G.sla.environment and (nullsub($L.overridden, false)=false or not  (same($L.or.id, 1 in agreement.ids in $L.file)))</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">if (null(agreement.ids in $L.file) and not  (null(agreement.id in $L.file))) then (1 in agreement.ids in $L.file=agreement.id in $L.file)</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">if ($L.exit="normal") then ($L.overridden=true;$L.or.id=agreement.id in $L.file)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="blocked") then ($L.string=scmsg(292, "pm", {nullsub(callback.contact in $L.file, "NULL"), nullsub(agreement.id in $L.file, "NULL")});$L.overridden=false;$L.or.id=NULL;$L.action="complete";resolution in $L.file=resolution in $L.file+{$L.string})</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">getnumb</application>
        <names sctype="array">
          <names sctype="string">name</names>
          <names sctype="string">index</names>
          <names sctype="string">text</names>
        </names>
        <values sctype="array">
          <values sctype="string">number.record in $L.object</values>
          <values sctype="string">incident.id in $L.file</values>
          <values sctype="string">"string"</values>
        </values>
        <rad.condition type="operator">null(incident.id in $L.file)</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">if ($L.action={"log", "logexit"} and open in $L.file~="Closed") then (first.call in $L.file=false)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if ($L.action={"associate", "incident.change", "incident.request", "createchange", "createrequest", "create"}) then (first.call in $L.file=false;$L.notify.name="SM Save")</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if ($L.action="closeme") then ($L.oldstatus=open in $L.file;open in $L.file="Closed";$L.notify.name="SM Close")</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if ($L.action={"log", "logexit", "save", "newcall"}) then (open in $L.file=nullsub(open in $L.file, "Open - Callback");$L.notify.name="SM Save")</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="string"/>
      </rad>
      <rad sctype="structure">
        <application type="string">us.consume.wrapper</application>
        <names sctype="array">
          <names sctype="string">index</names>
          <names sctype="string">name</names>
          <names sctype="string">boolean1</names>
          <names sctype="string">text</names>
        </names>
        <values sctype="array">
          <values sctype="string">contract.id in $L.file</values>
          <values sctype="string">"i"</values>
          <values sctype="string">$L.bg</values>
          <values sctype="string">$L.exit</values>
        </values>
        <rad.condition type="operator">enable in $G.cm.control and not  (nullsub(contract.consumed in $L.file, false)) and not  (null(contract.id in $L.file))</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$L.exit="normal"</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">if ($L.exit="badval") then if ($L.action="complete") then (open in $L.file=$L.oldstatus)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="normal") then (contract.consumed in $L.file=true)</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">cc.save</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">name</names>
          <names sctype="string">record</names>
          <names sctype="string">boolean1</names>
          <names sctype="string">text</names>
          <names sctype="string">names</names>
          <names sctype="string">values</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">"update"</values>
          <values sctype="string">$L.fc</values>
          <values sctype="string">$L.bg</values>
          <values sctype="string">$L.exit</values>
          <values sctype="string">$L.file.names</values>
          <values sctype="string">$L.file.vars</values>
        </values>
        <rad.condition type="operator">$L.exit="normal"</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">if ($L.handle.start~=0) then (handle.time in $L.file=nullsub(handle.time in $L.file, '00:00:00');handle.time in $L.file=(handle.time in $L.file+tod()) - $L.handle.start;$L.handle.start=0)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.pri.calc=jscall("PriorityCalc.getPriorityCalc")</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if $G.pd.sd.enabled then ($L.file.names={"$L.category", "$L.workflow", "$L.phase", "$L.saved", "$L.parent", "$L.wfPhase", "$L.wfPhase.save", "$L.orig.format", "$L.wfRules", "$L.wfMode", "$L.wfType", "$L.to.phaseId"};if (not  (null($L.object))) then ($L.file.names=denull(local.variables in $L.object)+$L.file.names))</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if $G.pd.sd.enabled then ($L.file.vars={};$L.file.vars=getvariables($L.file.names))</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">if ($G.pd.sd.enabled=true and $L.exit~="bad.val" and $L.exit~="badval") then ($L.void=setvariables($L.file.names, $L.file.vars))</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="normal") then ($L.lastinc=incident.id in $L.file;$lastinc=$L.lastinc)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="badval") then if ($L.action="complete") then (open in $L.file=$L.oldstatus)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="badval") then if ($L.action="closeme") then (open in $L.file=$L.oldstatus)</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">us.notify</application>
        <names sctype="array">
          <names sctype="string">name</names>
          <names sctype="string">record</names>
          <names sctype="string">second.file</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.notify.name</values>
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.file.save</values>
        </values>
        <rad.condition type="operator">$L.exit="normal"</rad.condition>
        <pre.rad.expressions sctype="string"/>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">if ($L.exit="normal") then ($L.exit="restart")</post.rad.expressions>
        </post.rad.expressions>
      </rad>
    </rad>
    <next.process sctype="array">
      <next.process sctype="string">cc.screlate</next.process>
    </next.process>
    <process.condition sctype="array">
      <process.condition sctype="operator">nullsub($escalate.relate.choice, "nothing")="ke"</process.condition>
    </process.condition>
    <run.standard NullValue="1" type="boolean"/>
    <sysmodcount type="decimal">2</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">11/09/15 16:41:52</sysmodtime>
    <save.cursor.position NullValue="1" type="boolean"/>
    <run.in.window NullValue="1" type="boolean"/>
    <window.name NullValue="1" type="string"/>
    <javascript.pre NullValue="1" type="string"/>
    <javascript.post NullValue="1" type="string"/>
    <baseMethod NullValue="1" type="string"/>
  </record>
</recordset>
