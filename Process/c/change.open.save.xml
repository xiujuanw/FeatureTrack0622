<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="Process">
  <record id="process=&quot;change.open.save&quot;" recordid="change.open.save">
    <process type="string">change.open.save</process>
    <pre.expressions sctype="array">
      <pre.expressions sctype="operator">$L.calcfieldvalue=jscall("SMOOAlert.getCalcFieldValue")</pre.expressions>
      <pre.expressions sctype="operator">if (calc.interval in $L.file=NULL) then ($L.interval=0) else ($L.interval=calc.interval in $L.file)</pre.expressions>
      <pre.expressions sctype="operator">if (execute.mode in $L.file="byfield" and $L.calcfieldvalue~=NULL) then (calc.time in $L.file=$L.calcfieldvalue+calc.interval in $L.file)</pre.expressions>
      <pre.expressions sctype="operator">$G.legacy.change=nullsub($G.legacy.change, nullsub(val(jscall("settings.getSettingValue", "Change", "legacy"), 4), false))</pre.expressions>
      <pre.expressions sctype="operator">if $G.legacy.change then ($events={, };$events.pntr=1;$events.pntr in $events="cm3r open";if (filename($L.file)="cm3t") then ($events.pntr in $events="cm3t open");$events.pntr+=1)</pre.expressions>
      <pre.expressions sctype="operator">$L.orig.phase=current.phase in $L.file</pre.expressions>
    </pre.expressions>
    <post.expressions sctype="array">
      <post.expressions sctype="operator">if ($L.exit="added") then ($L.exit="added";$L.review.number=number in $L.file)</post.expressions>
      <post.expressions sctype="operator">if ($L.exit={"bad.val", "nosave"}) then if (not  ($L.bg)) then ($L.exit.when.done=false)</post.expressions>
      <post.expressions sctype="operator">if $L.exit.when.done then (if (filename($L.file)="cm3r") then ($phasepntr=NULL);if (filename($L.file)="cm3t") then ($tphasepntr=NULL))</post.expressions>
    </post.expressions>
    <rad sctype="array">
      <rad sctype="structure">
        <application type="string">sc.get.sla</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">number1</names>
          <names sctype="string">numbers</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">contract.id in $L.file</values>
          <values sctype="string">agreement.ids in $L.file</values>
        </values>
        <rad.condition type="operator">enable in $G.sla.environment</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$system.cm3.update=nullsub($L.bg, false)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">page in $L.file=1</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">operator in $L.file=operator()</post.rad.expressions>
          <post.rad.expressions sctype="operator">if (not  (evaluate(oper.full.name in $L.phase)) or evaluate(full.name in $G.cm3.global.environment)) then (operator in $L.file=$lo.ufname)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if (nullsub(operator in $L.file, "")="") then (operator in $L.file=operator())</post.rad.expressions>
          <post.rad.expressions sctype="operator">close.time in $L.file=NULL;orig.operator in $L.file=operator in $L.file</post.rad.expressions>
          <post.rad.expressions sctype="operator">total.pages in $L.file=nullsub(total.pages in $L.file, 0);(total.pages in $L.file)+=1</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">script.execute.wrapper</application>
        <names sctype="array">
          <names sctype="string">name</names>
          <names sctype="string">file</names>
          <names sctype="string">prompt</names>
        </names>
        <values sctype="array">
          <values sctype="string">opn.script in $L.phase</values>
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.script.exit</values>
        </values>
        <rad.condition type="operator">$L.execute.script and not  (null(opn.script in $L.phase))</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$L.execute.script=nullsub(opn.script.cond in $L.phase, false)</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">$L.continue=true;$L.exit=$L.script.exit</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.script.exit="cancel") then ($L.continue=false)</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">se.base.method</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">prompt</names>
          <names sctype="string">second.file</names>
          <names sctype="string">record</names>
          <names sctype="string">second.record</names>
          <names sctype="string">text</names>
          <names sctype="string">target.file</names>
          <names sctype="string">query</names>
          <names sctype="string">name</names>
          <names sctype="string">index</names>
          <names sctype="string">names</names>
          <names sctype="string">values</names>
          <names sctype="string">boolean1</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.mode</values>
          <values sctype="string">$L.file.save</values>
          <values sctype="string">$L.fc</values>
          <values sctype="string">$L.object</values>
          <values sctype="string">$L.exit</values>
          <values sctype="string">$L.fc.master</values>
          <values sctype="string">$L.mode</values>
          <values sctype="string">$L.related.filename</values>
          <values sctype="string">$L.related.id</values>
          <values sctype="string">$L.file.names</values>
          <values sctype="string">$L.file.vars</values>
          <values sctype="string">$L.bg</values>
        </values>
        <rad.condition type="globalVar">$L.continue</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$L.file.names={"$L.category", "$L.workflow", "$L.phase", "$L.saved", "$L.copy.number", "$L.parent", "$L.wfPhase", "$L.wfPhase.save", "$L.orig.format", "$L.wfRules", "$L.wfMode", "$L.wfType", "$L.action.save"}</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if (not  (null($L.object))) then ($L.file.names=denull(local.variables in $L.object)+$L.file.names)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.file.vars={};$L.file.vars=getvariables($L.file.names)</pre.rad.expressions>
          <pre.rad.expressions sctype="string"/>
          <pre.rad.expressions sctype="operator">$L.pri.calc=jscall("PriorityCalc.getPriorityCalc")</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">closing.comments in $L.file=NULL</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.mode="add"</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">open in $L.file=true</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if (jscall("ProcessDesignerEnablement.isChangeEnabled")=false or filename($L.file)="cm3r") then (status in $L.file=nullsub(status in $L.file, "initial"))</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.comments="The statement below is only for SRC. The $L.file.save should be copied for unsubscribe in SRC API"</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if nullsub($ws.src, false) then ($L.void=rtecall("copycurrent", $L.errcode, $L.file.save, $L.file))</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array">
          <post.rad.expressions sctype="operator">cleanup($system.cm3.update)</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit="wfPhaseChange") then ($L.exit="added")</post.rad.expressions>
          <post.rad.expressions sctype="operator">if ($L.exit~="bad.val") then ($L.void=setvariables($L.file.names, $L.file.vars))</post.rad.expressions>
        </post.rad.expressions>
      </rad>
      <rad sctype="structure">
        <application type="string">change.openPlanTasks</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">second.file</names>
          <names sctype="string">record</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.changePlan</values>
          <values sctype="string">$L.phase</values>
        </values>
        <rad.condition type="operator">false and $L.exit="added" and filename($L.file)="cm3r"</rad.condition>
        <pre.rad.expressions sctype="array"/>
        <post.rad.expressions sctype="array"/>
      </rad>
      <rad sctype="structure">
        <application type="string">cm3.notify.scheduler</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">prompt</names>
          <names sctype="string">query</names>
          <names sctype="string">names</names>
          <names sctype="string">number1</names>
          <names sctype="string">time1</names>
          <names sctype="string">boolean1</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.oper</values>
          <values sctype="string">$L.current.action</values>
          <values sctype="string">$events</values>
          <values sctype="string">$events.pntr</values>
          <values sctype="string">$L.tod</values>
          <values sctype="string">false</values>
        </values>
        <rad.condition type="operator">$L.exit="added" and $G.legacy.change</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">if ($L.exit="added" and $G.legacy.change) then ($L.oper=operator in $L.file;$L.current.action="Opened by "+$L.oper)</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array"/>
      </rad>
      <rad sctype="structure">
        <application type="string">change.auto.task</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">second.file</names>
          <names sctype="string">record</names>
          <names sctype="string">second.record</names>
          <names sctype="string">boolean1</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string">$L.parent</values>
          <values sctype="string">$L.phase</values>
          <values sctype="string">$L.object</values>
          <values sctype="string">$L.bg</values>
        </values>
        <rad.condition type="operator">$L.exit="added"</rad.condition>
        <pre.rad.expressions sctype="array"/>
        <post.rad.expressions sctype="array"/>
      </rad>
      <rad sctype="structure">
        <application type="string">cm3.Subscription.notifications</application>
        <names sctype="array">
          <names sctype="string">file</names>
          <names sctype="string">record</names>
          <names sctype="string">name</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.file</values>
          <values sctype="string"/>
          <values sctype="string">"open"</values>
        </values>
        <rad.condition type="operator">$L.exit="added"</rad.condition>
        <pre.rad.expressions sctype="array"/>
        <post.rad.expressions sctype="array"/>
      </rad>
      <rad sctype="structure">
        <application type="string">sm.schedule.update.affected.services</application>
        <names sctype="array">
          <names sctype="string">name</names>
          <names sctype="string">prompt</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.sch.filename</values>
          <values sctype="string">$L.qry.num</values>
        </values>
        <rad.condition type="operator">not  (null(logical.name in $L.file)) and filename($L.file)="cm3r" and $L.exit="added"</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$L.sch.filename="cm3r";$L.qry.num=number in $L.file</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array"/>
      </rad>
      <rad sctype="structure">
        <application type="string">apm.mb.ok</application>
        <names sctype="array">
          <names sctype="string">text</names>
          <names sctype="string">index</names>
        </names>
        <values sctype="array">
          <values sctype="string">$L.message</values>
          <values sctype="string">2</values>
        </values>
        <rad.condition type="operator">$L.bg=false and ($L.isDateUpdated or $L.isTaskDateUpdated) and nullsub($L.popupMessageDisabled, false)=false and tpconflict in $L.file&gt;0</rad.condition>
        <pre.rad.expressions sctype="array">
          <pre.rad.expressions sctype="operator">$L.isDateUpdated=jscall("timeperiodConflict.compareTimeperiodMappingDateFields", $L.file, $L.old.file)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.popupMessageDisabled=jscall("timeperiodConflict.disablePopupMessage")</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if (filename($L.file)="cm3r") then ($L.message=scmsg(1111, "timeperiod"))</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if (filename($L.file)="cm3t") then ($L.message=scmsg(1112, "timeperiod"))</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">$L.isTaskDateUpdated=jscall("timeperiodConflict.isTaskWithTimeperiodCalculation", $L.file)</pre.rad.expressions>
          <pre.rad.expressions sctype="operator">if ($L.bg=false and ($L.isDateUpdated or $L.isTaskDateUpdated) and $L.popupMessageDisabled and tpconflict in $L.file&gt;0) then ($L.void=rtecall("msg", $L.void, $L.message, 2))</pre.rad.expressions>
        </pre.rad.expressions>
        <post.rad.expressions sctype="array"/>
      </rad>
    </rad>
    <next.process NullValue="1" sctype="array">
      <next.process NullValue="1" type="string"/>
    </next.process>
    <process.condition NullValue="1" sctype="array">
      <process.condition NullValue="1" type="boolean"/>
    </process.condition>
    <run.standard type="boolean">false</run.standard>
    <sysmodcount type="decimal">1</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">09/13/15 14:42:09</sysmodtime>
    <save.cursor.position NullValue="1" type="boolean"/>
    <run.in.window NullValue="1" type="boolean"/>
    <window.name NullValue="1" type="string"/>
    <javascript.pre NullValue="1" type="string"/>
    <javascript.post NullValue="1" type="string"/>
    <baseMethod NullValue="1" type="string"/>
  </record>
</recordset>
