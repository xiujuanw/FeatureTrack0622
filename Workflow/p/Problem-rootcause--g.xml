<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="Workflow">
  <record id="name=&quot;Problem&quot; and tableName=&quot;rootcause&quot;" recordid="Problem - rootcause">
    <name type="string">Problem</name>
    <tableName type="string">rootcause</tableName>
    <type type="string">complex</type>
    <defaultPhase type="string">Categorization</defaultPhase>
    <description type="string">&lt;p&gt;Problem Management Workflow&lt;/p&gt;
</description>
    <defaultForm NullValue="1" type="string"/>
    <firstPhase type="string">Logging</firstPhase>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodtime type="dateTime">08/12/20 20:04:11</sysmodtime>
    <sysmodcount type="decimal">69</sysmodcount>
    <sysrestricted type="boolean">true</sysrestricted>
    <action sctype="array">
      <action sctype="structure">
        <actionName type="string">Refresh</actionName>
        <actionId type="string">refresh.record</actionId>
        <actionCondition type="boolean">true</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"true"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">1</actionLoc>
        <actionOption type="decimal">91</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( Expression: true)</actionCondDesc>
        <actionMsgId type="decimal">12</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">View Archived Emails</actionName>
        <actionId type="string">view.archived.email</actionId>
        <actionCondition NullValue="1" type="boolean"/>
        <actionCondXML NullValue="1" type="string"/>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">316</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc NullValue="1" type="string"/>
        <actionMsgId type="decimal">11</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">updatecount</actionName>
        <actionId type="string">pbm.update.im.count</actionId>
        <actionCondition type="operator">$L.mode~#"add"</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"$L.mode~#&amp;quot;add&amp;quot;"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">3</actionLoc>
        <actionOption type="decimal">3030</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( $L.mode~#"add" )</actionCondDesc>
        <actionMsgId type="decimal">9</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">clone</actionName>
        <actionId type="string">pbm.clone.problem</actionId>
        <actionCondition type="operator">$L.tableAccess.new=true and not  (same(current.phase in $L.file, "Logging"))</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="authorization"&gt;&lt;TableName&gt;CurrentRecordAuth&lt;/TableName&gt;&lt;FieldName caption="New"&gt;new&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Logging&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">315</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( User has New authorization AND Phase in CurrentRecord != Logging )</actionCondDesc>
        <actionMsgId type="decimal">8</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Apply Template</actionName>
        <actionId type="string">apply.template</actionId>
        <actionCondition type="operator">supportTemplates in $L.object=true and (current.phase in $L.file~="Abandonment" and current.phase in $L.file~="Closure") and ($L.tableAccess.update or current.phase in $L.file="Logging" and $L.tableAccess.new) and $G.ess=false</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"supportTemplates in $L.object=true and (current.phase in $L.file~=&amp;quot;Abandonment&amp;quot; and current.phase in $L.file~=&amp;quot;Closure&amp;quot;) and ($L.tableAccess.update or (current.phase in $L.file=&amp;quot;Logging&amp;quot; and $L.tableAccess.new)) and $G.ess=false"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">1</actionLoc>
        <actionOption type="decimal">90</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">supportTemplates in $L.object=true and (current.phase in $L.file~="Abandonment" and current.phase in $L.file~="Closure") and ($L.tableAccess.update or (current.phase in $L.file="Logging" and $L.tableAccess.new)) and $G.ess=false</actionCondDesc>
        <actionMsgId type="decimal">7</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Create Template from Record</actionName>
        <actionId type="string">create.template</actionId>
        <actionCondition type="operator">nullsub(jscall("security.getRights", "Problem", "modifyTemplate"), "false")="true" and supportTemplates in $L.object=true and current.phase in $L.file~="Logging"</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"nullsub(jscall(&amp;quot;security.getRights&amp;quot;,&amp;quot;Problem&amp;quot;, &amp;quot;modifyTemplate&amp;quot;),&amp;quot;false&amp;quot;)=&amp;quot;true&amp;quot; and supportTemplates in $L.object=true and current.phase in $L.file~=&amp;quot;Logging&amp;quot;"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">314</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( Expression: nullsub(jscall("security.getRights","Problem", "modifyTemplate"),"false")="true" and supportTemplates in $L.object=true and current.phase in $L.file~="Logging")</actionCondDesc>
        <actionMsgId type="decimal">6</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Launch Problem Isolation</actionName>
        <actionId type="string">pbm.isolation.launch</actionId>
        <actionCondition type="operator">nullsub(BAC in $G.system.info, "false")</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"nullsub(BAC in $G.system.info, &amp;quot;false&amp;quot;)"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">310</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( nullsub(BAC in $G.system.info, "false") )</actionCondDesc>
        <actionMsgId type="decimal">5</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Associate with BAC PI</actionName>
        <actionId type="string">pbm.bac.pi.assciate</actionId>
        <actionCondition type="operator">not  (null($G.related.id)) and nullsub(BAC in $G.system.info, "false") and current.phase in $L.file~="Logging"</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"not null($G.related.id) and nullsub(BAC in $G.system.info, &amp;quot;false&amp;quot;) and current.phase in $L.file~=&amp;quot;Logging&amp;quot;"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">311</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( not null($G.related.id) and nullsub(BAC in $G.system.info, "false") and current.phase in $L.file~="Logging" )</actionCondDesc>
        <actionMsgId type="decimal">4</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Create Task</actionName>
        <actionId type="string">pbm.task.create</actionId>
        <actionCondition type="operator">current.phase in $L.file~={"Logging", "Abandonment", "Closure"} and nullsub(jscall("security.getRights", "Problem Tasks", "new"), "false")="true"</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"current.phase in $L.file~={&amp;quot;Logging&amp;quot;,&amp;quot;Abandonment&amp;quot;,&amp;quot;Closure&amp;quot;} and nullsub(jscall(&amp;quot;security.getRights&amp;quot;, &amp;quot;Problem Tasks&amp;quot;, &amp;quot;new&amp;quot;),&amp;quot;false&amp;quot;)=&amp;quot;true&amp;quot; "&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">3</actionLoc>
        <actionOption type="decimal">3000</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( Expression: current.phase in $L.file~={"Logging","Abandonment","Closure"} and nullsub(jscall("security.getRights", "Problem Tasks", "new"),"false")="true" )</actionCondDesc>
        <actionMsgId type="decimal">3</actionMsgId>
      </action>
      <action sctype="structure">
        <actionName type="string">Set Reminder</actionName>
        <actionId type="string">pbm.set.reminder</actionId>
        <actionCondition type="operator">not  (same(current.phase in $L.file, "Logging")) and not  (same(current.phase in $L.file, "Abandonment"))</actionCondition>
        <actionCondXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"not same(current.phase in $L.file, &amp;quot;Logging&amp;quot;) and not same(current.phase in $L.file, &amp;quot;Abandonment&amp;quot;)"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</actionCondXML>
        <actionLoc type="decimal">2</actionLoc>
        <actionOption type="decimal">312</actionOption>
        <actionLock type="boolean">false</actionLock>
        <actionRunAction NullValue="1" type="string"/>
        <actionCondDesc type="string">( not same(current.phase in $L.file, "Logging") and not same(current.phase in $L.file, "Abandonment") )</actionCondDesc>
        <actionMsgId type="decimal">2</actionMsgId>
      </action>
    </action>
    <onCreateRules sctype="array">
      <onCreateRules sctype="string">pbm.standard.field.validation</onCreateRules>
    </onCreateRules>
    <onUpdateRules sctype="array">
      <onUpdateRules sctype="string">pbm.standard.mandatory</onUpdateRules>
      <onUpdateRules sctype="string">pbm.standard.field.validation</onUpdateRules>
      <onUpdateRules sctype="string">pbm.type.changed.prompt</onUpdateRules>
      <onUpdateRules sctype="string">pbm.review.detail</onUpdateRules>
      <onUpdateRules sctype="string">pbm.journal.udpate</onUpdateRules>
      <onUpdateRules sctype="string">pbm.cost.validation</onUpdateRules>
      <onUpdateRules sctype="string">pbm.problem.calculate.cost</onUpdateRules>
    </onUpdateRules>
    <afterAddRules sctype="array">
      <afterAddRules sctype="string">pbm.sync.status.to.interaction</afterAddRules>
      <afterAddRules sctype="string">pbm.set.priority</afterAddRules>
      <afterAddRules sctype="string">pbm.notification.new</afterAddRules>
      <afterAddRules sctype="string">pbm.notification.KE.logging</afterAddRules>
      <afterAddRules sctype="string">pbm.solution.matching</afterAddRules>
    </afterAddRules>
    <afterUpdateRules sctype="array">
      <afterUpdateRules sctype="string">pbm.sync.status.to.interaction</afterUpdateRules>
    </afterUpdateRules>
    <initRules sctype="array">
      <initRules sctype="string">pbm.clear.updates</initRules>
      <initRules sctype="string">pbm.status.list</initRules>
    </initRules>
    <onDisplayRules sctype="array">
      <onDisplayRules sctype="string">pbm.set.ucmdbbrowser.show</onDisplayRules>
    </onDisplayRules>
    <backendTransition sctype="array">
      <backendTransition sctype="structure">
        <btToPhase type="string">Review</btToPhase>
        <btCondition NullValue="1" type="boolean"/>
        <btRule type="string">pbm.resolve.by.interaction</btRule>
        <btCondXML NullValue="1" type="string"/>
        <btCondDesc NullValue="1" type="string"/>
        <btAction type="string">resolved.by.interaction</btAction>
      </backendTransition>
      <backendTransition sctype="structure">
        <btToPhase type="string">Closure</btToPhase>
        <btCondition NullValue="1" type="boolean"/>
        <btRule type="string">pbm.auto.close.set.fields</btRule>
        <btCondXML NullValue="1" type="string"/>
        <btCondDesc type="string">Always</btCondDesc>
        <btAction type="string">close.auto</btAction>
      </backendTransition>
    </backendTransition>
    <onEnterRules sctype="array">
      <onEnterRules sctype="string">pbm.cost.validation</onEnterRules>
      <onEnterRules sctype="string">pbm.problem.calculate.cost</onEnterRules>
    </onEnterRules>
    <onExitRules NullValue="1" sctype="array">
      <onExitRules NullValue="1" type="string"/>
    </onExitRules>
    <afterEnterRules NullValue="1" sctype="array">
      <afterEnterRules NullValue="1" type="string"/>
    </afterEnterRules>
    <is.legacy.workflow NullValue="1" type="boolean"/>
    <legacy.fc NullValue="1" type="string"/>
    <legacy.open.state NullValue="1" type="string"/>
    <legacy.close.state NullValue="1" type="string"/>
    <legacy.default.state NullValue="1" type="string"/>
    <legacy.browse.state NullValue="1" type="string"/>
    <optimize.autotran.save type="boolean">true</optimize.autotran.save>
  </record>
</recordset>
