<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="RuleSet">
  <record id="id=&quot;im.standard.mandatory&quot;" recordid="im.standard.mandatory">
    <id type="string">im.standard.mandatory</id>
    <name type="string">Incident standard mandatory fields validation</name>
    <tablename sctype="array">
      <tablename sctype="string">probsummary</tablename>
    </tablename>
    <rule sctype="array">
      <rule sctype="structure">
        <ruleId type="decimal">13</ruleId>
        <isGroup type="boolean">true</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML type="string">&lt;ruleGroup/&gt;</ruleXML>
        <ruleDesc type="string">Set Default Values of BG</ruleDesc>
        <condition type="operator">$G.bg="true"</condition>
        <conditionDesc type="string">( $G.bg = "true")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">[Set Default Values of BG (when ( $G.bg = "true"))]</fullDesc>
        <level type="decimal">0</level>
        <type type="string">ruleGroup</type>
        <ruleJSON NullValue="1" type="string"/>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">14</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">13</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Folder via JavaScript</ruleDesc>
        <condition type="operator">$G.folderEntitlement="true" and same(folder in $L.file, NULL)</condition>
        <conditionDesc type="string">( $G.folderEntitlement = "true" AND folder in CurrentRecord = NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.folderEntitlement"&gt;$G.folderEntitlement&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Folder"&gt;folder&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">-  Set Folder via JavaScript (when ( $G.folderEntitlement = "true" AND folder in CurrentRecord = NULL))</fullDesc>
        <level type="decimal">1</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"folder","script":"value=\"DEFAULT\";"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">15</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">13</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Incident Manager via JavaScript</ruleDesc>
        <condition type="operator">same(owner in $L.file, NULL) and (major.incident in $L.file="true" or escalated in $L.file="true")</condition>
        <conditionDesc type="string">( owner in CurrentRecord = NULL AND ( major.incident in CurrentRecord = "true" OR escalated in CurrentRecord = "true"))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Incident Manager"&gt;owner&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;collection logical="AND" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Major Incident"&gt;major.incident&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="OR" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Escalated"&gt;escalated&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">-  Set Incident Manager via JavaScript (when ( owner in CurrentRecord = NULL AND ( major.incident in CurrentRecord = "true" OR escalated in CurrentRecord = "true")))</fullDesc>
        <level type="decimal">1</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"owner","script":"value=\"Incident.Manager\";"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">16</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">13</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Assignee via JavaScript</ruleDesc>
        <condition type="operator">same(assignee.name in $L.file, NULL) and current.phase in $L.file="Categorization" and problem.status in $L.file="Assign" or same(assignee.name in $L.file, NULL) and not  (same(current.phase in $L.file, "Categorization")) and not  (same(problem.status in $L.file, "Suspended"))</condition>
        <conditionDesc type="string">(( assignee.name in CurrentRecord = NULL AND current.phase in CurrentRecord = "Categorization" AND problem.status in CurrentRecord = "Assign") OR ( assignee.name in CurrentRecord = NULL AND current.phase in CurrentRecord != "Categorization" AND problem.status in CurrentRecord != "Suspended"))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assignee"&gt;assignee.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;Assign&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;collection logical="OR" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assignee"&gt;assignee.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;Suspended&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">-  Set Assignee via JavaScript (when (( assignee.name in CurrentRecord = NULL AND current.phase in CurrentRecord = "Categorization" AND problem.status in CurrentRecord = "Assign") OR ( assignee.name in CurrentRecord = NULL AND current.phase in CurrentRecord != "Categorization" AND problem.status in CurrentRecord != "Suspended")))</fullDesc>
        <level type="decimal">1</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"assignee.name","script":"value=null;\u000aif(record.assignment!=null) {\u000a   var assignmentFile = new SCFile(\"assignment\");\u000a    var querySQL = \"name=\\\"\" + record.assignment + \"\\\"\";\u000a    if (assignmentFile.doSelect(querySQL) == RC_SUCCESS) {\u000a        value=assignmentFile.coordinator_incident;\u000a    }\u000a}\u000aif(value==null) {\u000a    value=\"Incident.Coordinator\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">1</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Title;Category;Status;Requested By;Description;Impact;Urgency;Affected Service are Mandatory</ruleDesc>
        <condition type="string">true</condition>
        <conditionDesc NullValue="1" type="string"/>
        <conditionXML NullValue="1" type="string"/>
        <fullDesc type="string">Title;Category;Status;Requested By;Description;Impact;Urgency;Affected Service are Mandatory</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"brief.description","default":""},{"fieldName":"category","default":""},{"fieldName":"action","default":""},{"fieldName":"problem.status","default":""},{"fieldName":"affected.item","default":""},{"fieldName":"opened.by","default":""},{"fieldName":"initial.impact","default":""},{"fieldName":"severity","default":""}],"messageType":"pop-up","validateAll":"false"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">2</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Incident Manager are Mandatory</ruleDesc>
        <condition type="operator">major.incident in $L.file=true</condition>
        <conditionDesc type="string">( major.incident in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Major Incident"&gt;major.incident&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Incident Manager are Mandatory (when ( major.incident in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"owner","default":""}],"messageType":"pop-up","validateAll":"false"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">3</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Inciden Manager are Mandatory</ruleDesc>
        <condition type="operator">escalated in $L.file=true</condition>
        <conditionDesc type="string">( escalated in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Escalated"&gt;escalated&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Inciden Manager are Mandatory (when ( escalated in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"owner","default":""}],"messageType":"pop-up","validateAll":"false"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">8</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Folder are Mandatory</ruleDesc>
        <condition type="operator">$G.folderEntitlement="true"</condition>
        <conditionDesc type="string">( $G.folderEntitlement = "true")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.folderEntitlement"&gt;$G.folderEntitlement&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Folder are Mandatory (when ( $G.folderEntitlement = "true"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"folder","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">9</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Subcategory are Mandatory</ruleDesc>
        <condition type="operator">not  (same(problem.status in $L.file, "Suspended")) and not  (same(problem.status in $L.file, "Categorize"))</condition>
        <conditionDesc type="string">( problem.status in CurrentRecord != "Suspended" AND problem.status in CurrentRecord != "Categorize")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Suspended&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Categorize&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Subcategory are Mandatory (when ( problem.status in CurrentRecord != "Suspended" AND problem.status in CurrentRecord != "Categorize"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"subcategory","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">4</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Assignment Group are Mandatory</ruleDesc>
        <condition type="operator">current.phase in $L.file="Categorization" and problem.status in $L.file="Assign" or not  (same(current.phase in $L.file, "Categorization")) and not  (same($L.mode, "add")) and not  (same(problem.status in $L.file, "Suspended"))</condition>
        <conditionDesc type="string">(( Current Phase in CurrentRecord = "Categorization" AND Status in CurrentRecord = "Assign") OR ( Current Phase in CurrentRecord != "Categorization" AND $L.mode != "add" AND Status in CurrentRecord != "Suspended"))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Assign&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;collection logical="OR" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$L.mode"&gt;$L.mode&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;add&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Suspended&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Assignment Group are Mandatory (when (( Current Phase in CurrentRecord = "Categorization" AND Status in CurrentRecord = "Assign") OR ( Current Phase in CurrentRecord != "Categorization" AND $L.mode != "add" AND Status in CurrentRecord != "Suspended")))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","messageType":"pop-up","validateAll":"true","fieldList":[{"fieldName":"assignment","default":""}]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">12</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Assignee are Mandatory</ruleDesc>
        <condition type="operator">current.phase in $L.file="Categorization" and problem.status in $L.file="Assign" or not  (same(current.phase in $L.file, "Categorization")) and not  (same(problem.status in $L.file, "Suspended")) and not  (same($L.mode, "add"))</condition>
        <conditionDesc type="string">(( Current Phase in CurrentRecord = "Categorization" AND Status in CurrentRecord = "Assign") OR ( Current Phase in CurrentRecord != "Categorization" AND Status in CurrentRecord != "Suspended" AND $L.mode != "add"))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Assign&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;collection logical="OR" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Categorization&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Suspended&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$L.mode"&gt;$L.mode&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;add&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Assignee are Mandatory (when (( Current Phase in CurrentRecord = "Categorization" AND Status in CurrentRecord = "Assign") OR ( Current Phase in CurrentRecord != "Categorization" AND Status in CurrentRecord != "Suspended" AND $L.mode != "add")))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","messageType":"pop-up","validateAll":"true","fieldList":[{"fieldName":"assignee.name","default":""}]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">11</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Solution are Mandatory</ruleDesc>
        <condition type="operator">problem.status in $L.file="Resolved"</condition>
        <conditionDesc type="string">( problem.status in CurrentRecord = "Resolved")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Resolved&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Solution are Mandatory (when ( problem.status in CurrentRecord = "Resolved"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"resolution","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">7</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Vendor are Mandatory</ruleDesc>
        <condition type="operator">problem.status in $L.file="Pending Vendor"</condition>
        <conditionDesc type="string">( problem.status in CurrentRecord = "Pending Vendor")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Status"&gt;problem.status&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Pending Vendor&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Vendor are Mandatory (when ( Status in CurrentRecord = "Pending Vendor"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"vendor","default":""}],"messageType":"pop-up","validateAll":"false"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">18</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Update is Mandatory</ruleDesc>
        <condition type="operator">priority.code in $L.file~=jscall("custom.setPriority", initial.impact in $L.file, severity in $L.file)</condition>
        <conditionDesc type="string">( Expression: priority.code in $L.file~=jscall("custom.setPriority", initial.impact in $L.file, severity in $L.file))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"priority.code in $L.file~=jscall(&amp;quot;custom.setPriority&amp;quot;, initial.impact in $L.file, severity in $L.file)"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Update is Mandatory (when ( Expression: priority.code in $L.file~=jscall("custom.setPriority", initial.impact in $L.file, severity in $L.file)))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryVariables</type>
        <ruleJSON type="string">{"type":"mandatoryVariables","fieldList":[{"variableName":"$pmc.actions","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">22</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Review Detail are Mandatory</ruleDesc>
        <condition type="operator">current.phase in $L.file="Review" and major.incident in $L.file=true and lng(denull(review.detail.log in $L.file))=0</condition>
        <conditionDesc type="string">( Expression: current.phase in $L.file="Review" and major.incident in $L.file=true and lng(denull(review.detail.log in $L.file))=0)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"current.phase in $L.file=&amp;quot;Review&amp;quot; and major.incident in $L.file=true and lng(denull(review.detail.log in $L.file))=0"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Review Detail are Mandatory (when ( Expression: current.phase in $L.file="Review" and major.incident in $L.file=true and lng(denull(review.detail.log in $L.file))=0))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","messageType":"screen","validateAll":true,"fieldList":[{"fieldName":"review.detail","default":""}]}</ruleJSON>
      </rule>
    </rule>
    <lastRuleId type="decimal">22</lastRuleId>
    <isAction NullValue="1" type="boolean"/>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">02/08/15 17:33:46</sysmodtime>
    <sysmodcount type="decimal">4</sysmodcount>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
