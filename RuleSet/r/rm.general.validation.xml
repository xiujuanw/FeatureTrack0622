<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="RuleSet">
  <record id="id=&quot;rm.general.validation&quot;" recordid="rm.general.validation">
    <id type="string">rm.general.validation</id>
    <name type="string">Validate Fields</name>
    <tablename sctype="array">
      <tablename sctype="string">request</tablename>
    </tablename>
    <rule sctype="array">
      <rule sctype="structure">
        <ruleId type="decimal">24</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Affected Service</ruleDesc>
        <condition type="operator">not  (same(affected.item in $L.file, NULL))</condition>
        <conditionDesc type="string">( Affected Service in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Affected Service"&gt;affected.item&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Affected Service (when ( Affected Service in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"affected.item","toTable":"device","toField":"logical.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">26</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">not  (same(logical.name in $L.file, NULL)) and not  (same(affected.item in $L.file, NULL))</condition>
        <conditionDesc type="string">( Affected CI in CurrentRecord != NULL AND Affected Service in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Affected CI"&gt;logical.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Affected Service"&gt;affected.item&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Affected CI in CurrentRecord != NULL AND Affected Service in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (!lib.BSGLink.isValidServiceToCi(record.affected_item, record.logical_name)){\u000d\u000a    returnCode = 1;\u000d\u000a    msgType=\"screen\";\u000d\u000a    message=system.functions.scmsg (2, \"ruleset\",  [system.functions.get_field_caption( \"logical.name\", system.functions.filename(vars.$L_file) )]); \u000d\u000a    cursorPosition = \"logical.name\"; \u000d\u000a}\u000d\u000a"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">27</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">not  (same(logical.name in $L.file, NULL)) and same(affected.item in $L.file, NULL)</condition>
        <conditionDesc type="string">( Affected CI in CurrentRecord != NULL AND Affected Service in CurrentRecord = NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Affected CI"&gt;logical.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Affected Service"&gt;affected.item&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Affected CI in CurrentRecord != NULL AND Affected Service in CurrentRecord = NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"           returnCode = 1;\u000a            msgType=\"screen\";\u000a\u0009    message=system.functions.scmsg (81, \"request\"); \u000a \u0009    cursorPosition = \"affected.item\";"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">22</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate model id</ruleDesc>
        <condition type="operator">not  (same(modelId in $L.file, NULL))</condition>
        <conditionDesc type="string">( Model Id in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Model Id"&gt;modelId&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate model id (when ( Model Id in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"modelId","toTable":"requestModel","toField":"id","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">18</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript to validate the assigned.group</ruleDesc>
        <condition type="operator">not  (same(assigned.group in $L.file, NULL))</condition>
        <conditionDesc type="string">( Assignment Group in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assignment Group"&gt;assigned.group&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript to validate the assigned.group (when ( Assignment Group in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"   var assfile=new SCFile(\"assignment\");\u000a   var sql=\"true\";\u000a\u000a   if(vars.$L_file.assigned_group!=null){\u000a     sql=sql+\" and name=\\\"\"+vars.$L_file.assigned_group+\"\\\"\"   \u000a   }\u000a\u000a  \u000a   if (assfile.doSelect(sql)!==RC_SUCCESS) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (74, \"request\",[vars.$L_file.assigned_group]);\u000a    msgType=\"screen\";\u000a    cursorPosition = \"assigned.group\";\u000a   }"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">17</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate date: requested.date</ruleDesc>
        <condition type="operator">not  (same(requested.date in $L.file, NULL))</condition>
        <conditionDesc type="string">( requested.date in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Requested Date"&gt;requested.date&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate date: requested.date (when ( requested.date in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateDate</type>
        <ruleJSON type="string">{"type":"validateDate","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"submit.date","offset1":"+","days1":"0","hours1":"0","mins1":"0","cField2":"","offset2":"+","days2":"0","hours2":"0","mins2":"0"},"dateValue":{"dateValue1":"","dateValue2":""},"messageType":"screen","fieldName":"requested.date","rangeType":"Field"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">2</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Category</ruleDesc>
        <condition type="operator">not  (same(category in $L.file, NULL))</condition>
        <conditionDesc type="string">( category in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Category"&gt;category&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Category (when ( category in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"category","toTable":"rmCategory","toField":"name","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">3</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Subcategory</ruleDesc>
        <condition type="operator">not  (same(subcategory in $L.file, NULL))</condition>
        <conditionDesc type="string">( subcategory in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Subcategory"&gt;subcategory&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Subcategory (when ( subcategory in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"subcategory","toTable":"rmSubcategory","toField":"name","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">12</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Requestor</ruleDesc>
        <condition type="operator">not  (same(requestor.name in $L.file, NULL))</condition>
        <conditionDesc type="string">( requestor.name in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Requestor Name"&gt;requestor.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Requestor (when ( requestor.name in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"requestor.name","toTable":"contacts","toField":"contact.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">5</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Bill to Location</ruleDesc>
        <condition type="operator">not  (same(bill.to.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( bill.to.code in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Bill to Code"&gt;bill.to.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Bill to Location (when ( bill.to.code in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"bill.to.code","toTable":"location","toField":"location.full.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">6</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Bill To Department</ruleDesc>
        <condition type="operator">not  (same(bill.to.dept in $L.file, NULL))</condition>
        <conditionDesc type="string">( bill.to.dept in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Bill to Dept"&gt;bill.to.dept&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Bill To Department (when ( bill.to.dept in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"bill.to.dept","toTable":"dept","toField":"dept","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">11</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Ship To Location</ruleDesc>
        <condition type="operator">not  (same(ship.to.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( ship.to.code in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Ship to Code"&gt;ship.to.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Ship To Location (when ( ship.to.code in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"ship.to.code","toTable":"location","toField":"location.full.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">1</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Assignee</ruleDesc>
        <condition type="operator">not  (same(assigned.to in $L.file, NULL))</condition>
        <conditionDesc type="string">( assigned.to in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assigned to"&gt;assigned.to&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Assignee (when ( assigned.to in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"assigned.to","toTable":"operator","toField":"name","filter":"assignment.groups=assigned.group in $L.file","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">8</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Requested For</ruleDesc>
        <condition type="operator">not  (same(requested.for in $L.file, NULL))</condition>
        <conditionDesc type="string">( requested.for in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Requested for"&gt;requested.for&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Requested For (when ( requested.for in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"requested.for","toTable":"contacts","toField":"contact.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">9</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate  Request Coordinator</ruleDesc>
        <condition type="operator">not  (same(coordinator.name in $L.file, NULL))</condition>
        <conditionDesc type="string">( coordinator.name in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Coordinator Name"&gt;coordinator.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate  Request Coordinator (when ( coordinator.name in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"coordinator.name","toTable":"operator","toField":"name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">13</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate "total.cost"  must larger than 0</ruleDesc>
        <condition type="operator">not  (same(total.cost in $L.file, NULL))</condition>
        <conditionDesc type="string">( total.cost in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Total Cost"&gt;total.cost&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate "total.cost"  must larger than 0 (when ( total.cost in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRange</type>
        <ruleJSON type="string">{"type":"validateRange","messageType":"screen","fieldName":"total.cost","rangeType":"Text/Num","comparison":{"not":"false","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"","cField2":""},"value":{"value1":"0","value2":""}}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">15</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Currency</ruleDesc>
        <condition type="operator">not  (same(cost.currency.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( cost.currency.code in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Cost Currency Code"&gt;cost.currency.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Currency (when ( cost.currency.code in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"cost.currency.code","toTable":"currency","toField":"currency.code","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">19</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation to validate priority value</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(priority in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Priority in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Priority"&gt;priority&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation to validate priority value (when ( $G.bg = "true" AND Priority in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.priority)===null || system.functions.val(record.priority)&gt;4) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (75, \"request\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"priority\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">20</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation  to validate the impact value</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(impact in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Impact in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Impact"&gt;impact&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation  to validate the impact value (when ( $G.bg = "true" AND Impact in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.impact)===null || system.functions.val(record.impact)&gt;4) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (76, \"request\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"impact\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">21</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation to validate reason value</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(reason in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Reason in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Reason"&gt;reason&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation to validate reason value (when ( $G.bg = "true" AND Reason in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.reason)===null || system.functions.val(record.reason)&gt;6) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (77, \"request\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"reason\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">23</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation to validate closure code</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(closure.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Closure Code in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Closure Code"&gt;closure.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation to validate closure code (when ( $G.bg = "true" AND Closure Code in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.closure_code)===null || system.functions.val(record.closure_code)&gt;11) {\u000d\u000a    returnCode = 1; \u000d\u000a    message=system.functions.scmsg (79, \"request\");\u000d\u000a    msgType=\"screen\";\u000d\u000a    cursorPosition = \"closure.code\";\u000d\u000a}"}</ruleJSON>
      </rule>
    </rule>
    <lastRuleId type="decimal">27</lastRuleId>
    <isAction NullValue="1" type="boolean"/>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">02/10/18 22:21:21</sysmodtime>
    <sysmodcount type="decimal">106</sysmodcount>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
