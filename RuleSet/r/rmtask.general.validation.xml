<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="RuleSet">
  <record id="id=&quot;rmtask.general.validation&quot;" recordid="rmtask.general.validation">
    <id type="string">rmtask.general.validation</id>
    <name type="string">request management task general validation</name>
    <tablename sctype="array">
      <tablename sctype="string">requestTask</tablename>
    </tablename>
    <rule sctype="array">
      <rule sctype="structure">
        <ruleId type="decimal">19</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Part No</ruleDesc>
        <condition type="operator">not  (same(part.no in $L.file, NULL))</condition>
        <conditionDesc type="string">( Part No in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Part No"&gt;part.no&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Part No (when ( Part No in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"part.no","toTable":"productCatalog","toField":"part.no","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">21</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Vendor</ruleDesc>
        <condition type="operator">not  (same(vendor in $L.file, NULL))</condition>
        <conditionDesc type="string">( Vendor in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Vendor"&gt;vendor&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Vendor (when ( Vendor in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"vendor","toTable":"modelvendor","toField":"vendor","filter":"part.no=part.no in $L.file","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">20</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Ship to Location</ruleDesc>
        <condition type="operator">not  (same(ship.to.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( Ship to Location in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Ship to Location"&gt;ship.to.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Ship to Location (when ( Ship to Location in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"ship.to.code","toTable":"location","toField":"location.full.name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">11</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate "actual.cost" against a range of text or numbers</ruleDesc>
        <condition type="operator">not  (same(actual.cost in $L.file, NULL))</condition>
        <conditionDesc type="string">( actual.cost in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Actual Cost"&gt;actual.cost&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="number"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate "actual.cost" against a range of text or numbers (when ( actual.cost in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRange</type>
        <ruleJSON type="string">{"type":"validateRange","messageType":"screen","fieldName":"actual.cost","rangeType":"Text/Num","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"","cField2":""},"value":{"value1":"0","value2":""}}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">9</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate date: actual.end</ruleDesc>
        <condition type="operator">not  (same(actual.end in $L.file, NULL))</condition>
        <conditionDesc type="string">( actual.end in CurrentRecord != 'NULL')</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Actual End"&gt;actual.end&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="datetime"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate date: actual.end (when ( actual.end in CurrentRecord != 'NULL'))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateDate</type>
        <ruleJSON type="string">{"type":"validateDate","comparison":{"not":"false","operator":"Less Than Or Equal To"},"compareField":{"cField1":"[Current Date/Time]","offset1":"+","days1":"0","hours1":"0","mins1":"0","cField2":"","offset2":"+","days2":"0","hours2":"0","mins2":"0"},"dateValue":{"dateValue1":"","dateValue2":""},"messageType":"screen","fieldName":"actual.end","rangeType":"Field"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">7</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate date: planned.end</ruleDesc>
        <condition type="operator">not  (same(planned.end in $L.file, NULL)) and not  (same(planned.start in $L.file, NULL))</condition>
        <conditionDesc type="string">( planned.end in CurrentRecord != 'NULL' AND planned.start in CurrentRecord != 'NULL')</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Planned End"&gt;planned.end&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="datetime"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Planned Start"&gt;planned.start&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="datetime"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate date: planned.end (when ( planned.end in CurrentRecord != 'NULL' AND planned.start in CurrentRecord != 'NULL'))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateDate</type>
        <ruleJSON type="string">{"type":"validateDate","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"planned.start","offset1":"+","days1":"0","hours1":"0","mins1":"0","cField2":"","offset2":"+","days2":"0","hours2":"0","mins2":"0"},"dateValue":{"dateValue1":"","dateValue2":""},"messageType":"screen","fieldName":"planned.end","rangeType":"Field"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">10</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate date: actual.end</ruleDesc>
        <condition type="operator">not  (same(actual.end in $L.file, NULL)) and not  (same(actual.start in $L.file, NULL))</condition>
        <conditionDesc type="string">( actual.end in CurrentRecord != 'NULL' AND actual.start in CurrentRecord != 'NULL')</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Actual End"&gt;actual.end&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="datetime"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Actual Start"&gt;actual.start&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="datetime"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate date: actual.end (when ( actual.end in CurrentRecord != 'NULL' AND actual.start in CurrentRecord != 'NULL'))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateDate</type>
        <ruleJSON type="string">{"type":"validateDate","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"actual.start","offset1":"+","days1":"0","hours1":"0","mins1":"0","cField2":"","offset2":"+","days2":"0","hours2":"0","mins2":"0"},"dateValue":{"dateValue1":"","dateValue2":""},"messageType":"screen","fieldName":"actual.end","rangeType":"Field"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">4</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Assignee</ruleDesc>
        <condition type="operator">not  (same(assigned.to in $L.file, NULL))</condition>
        <conditionDesc type="string">( assigned.to in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assigned to"&gt;assigned.to&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Assignee (when ( assigned.to in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"assigned.to","toTable":"operator","toField":"name","filter":"assignment.groups=assigned.group in $L.file","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">22</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Request Coordinator</ruleDesc>
        <condition type="operator">not  (same(coordinator.name in $L.file, NULL))</condition>
        <conditionDesc type="string">( Request Coordinator in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Request Coordinator"&gt;coordinator.name&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Request Coordinator (when ( Request Coordinator in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"coordinator.name","toTable":"operator","toField":"name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">3</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Category</ruleDesc>
        <condition type="operator">not  (same(category in $L.file, NULL))</condition>
        <conditionDesc type="string">( category in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Category"&gt;category&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Category (when ( category in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"category","toTable":"rmTaskCat","toField":"name","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">12</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Currency</ruleDesc>
        <condition type="operator">not  (same(cost.currency.code in $L.file, NULL))</condition>
        <conditionDesc type="string">( cost.currency.code in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Cost Currency Code"&gt;cost.currency.code&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Currency (when ( cost.currency.code in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"screen","fieldName":"cost.currency.code","toTable":"currency","toField":"currency.code","filter":"active=true","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">18</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation for Order Quantity</ruleDesc>
        <condition type="operator">category in $L.file="Purchase" and not  (same(ordered.quantity in $L.file, NULL))</condition>
        <conditionDesc type="string">( Category in CurrentRecord = "Purchase" AND Ordered Quantity in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Category"&gt;category&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;Purchase&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Ordered Quantity"&gt;ordered.quantity&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="number"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation for Order Quantity (when ( Category in CurrentRecord = "Purchase" AND Ordered Quantity in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (lib.IntegerUtil.isPositiveInteger(record.ordered_quantity)==false) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (22, \"requestTask\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"ordered.quantity\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">14</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript to validate the assigned.group</ruleDesc>
        <condition type="operator">not  (same(assigned.group in $L.file, NULL))</condition>
        <conditionDesc type="string">( Assigned Group in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Assigned Group"&gt;assigned.group&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript to validate the assigned.group (when ( Assigned Group in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"   \u000aif (!lib.RequestTaskService.validateAssignmentGroup(record)) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (74, \"request\",[vars.$L_file.assigned_group]);\u000a    msgType=\"screen\";\u000a    cursorPosition = \"assigned.group\";\u000a   }"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">16</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript to validate priority value</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(priority in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Priority in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Priority"&gt;priority&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript to validate priority value (when ( $G.bg = "true" AND Priority in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.priority)===null || system.functions.val(record.priority)&gt;4) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (75, \"request\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"priority\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">15</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript to validate the impact value</ruleDesc>
        <condition type="operator">$G.bg="true" and not  (same(impact in $L.file, NULL))</condition>
        <conditionDesc type="string">( $G.bg = "true" AND Impact in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="variable"&gt;&lt;VariableName caption="$G.bg"&gt;$G.bg&lt;/VariableName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Impact"&gt;impact&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript to validate the impact value (when ( $G.bg = "true" AND Impact in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"if (system.functions.val(record.impact)===null || system.functions.val(record.impact)&gt;4) {\u000a    returnCode = 1; \u000a    message=system.functions.scmsg (76, \"request\");\u000a    msgType=\"screen\";\u000a    cursorPosition = \"impact\";\u000a}"}</ruleJSON>
      </rule>
    </rule>
    <lastRuleId type="decimal">22</lastRuleId>
    <isAction NullValue="1" type="boolean"/>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">02/08/15 17:33:47</sysmodtime>
    <sysmodcount type="decimal">76</sysmodcount>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
