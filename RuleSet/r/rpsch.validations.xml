<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="RuleSet">
  <record id="id=&quot;rpsch.validations&quot;" recordid="rpsch.validations">
    <id type="string">rpsch.validations</id>
    <name type="string">Report Schedule - Validation</name>
    <tablename sctype="array">
      <tablename sctype="string">reportscheduleDefinition</tablename>
    </tablename>
    <rule sctype="array">
      <rule sctype="structure">
        <ruleId type="decimal">34</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Notification Name are Mandatory</ruleDesc>
        <condition type="operator">flag.email in $L.file=true and flag.notification in $L.file=true</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true AND Flag Notification in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Notification"&gt;flag.notification&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Notification Name are Mandatory (when ( Flag Email in CurrentRecord = true AND Flag Notification in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","messageType":"pop-up","validateAll":true,"fieldList":[{"fieldName":"email.notification.name","default":""}]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">18</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Rule Arbitrary Start Time are Mandatory</ruleDesc>
        <condition type="operator">rule.arbitrary in $L.file=true</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Rule Arbitrary Start Time are Mandatory (when ( Rule Arbitrary in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"rule.arbitrary.start.time","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">33</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">flag.email in $L.file=true</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Flag Email in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var  maildisabled = lib.reportExport.isStopExportViaMail();\u000aif (  maildisabled )\u000a{\u000a  var msg = system.functions.scmsg(\"305\", \"Reporting\");\u000a  var dt = new Datum();\u000a  system.functions.rtecall(\"msg\", dt, msg, 1, null, null, 1);\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">32</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">flag.file in $L.file=true</condition>
        <conditionDesc type="string">( Flag File in CurrentRecord = true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag File"&gt;flag.file&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Flag File in CurrentRecord = true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var basePath = lib.settings.getSettingValue(\"Report\", \"Export.location\");\u000a\u000aif (  basePath )\u000a{\u000a   var prompt = system.functions.scmsg(307, \"Reporting\", [basePath] );\u000a   var tmp = new Datum();\u000a   system.functions.rtecall(\"msg\",  tmp, prompt, 1, null, null, 1);\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">23</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Email Subject via JavaScript</ruleDesc>
        <condition type="operator">flag.email in $L.file=true and same(email.subject in $L.file, NULL)</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true AND Email Subject in CurrentRecord = NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Email Subject"&gt;email.subject&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Set Email Subject via JavaScript (when ( Flag Email in CurrentRecord = true AND Email Subject in CurrentRecord = NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"email.subject","script":"value = vars['$L.file'].name;"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">24</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Email to Users via JavaScript</ruleDesc>
        <condition type="operator">flag.email in $L.file=true and same(email.to.groups in $L.file, NULL) and same(email.to.users in $L.file, NULL)</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true AND Email to Groups in CurrentRecord = NULL AND Email to Users in CurrentRecord = NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Email to Groups"&gt;email.to.groups&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Email to Users"&gt;email.to.users&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Set Email to Users via JavaScript (when ( Flag Email in CurrentRecord = true AND Email to Groups in CurrentRecord = NULL AND Email to Users in CurrentRecord = NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"email.to.users","script":"var schOwner = vars['$L.file'].owner;\u000a\u000aif ( schOwner  ) \u000a{\u000a  var toUsers = new SCDatum();\u000a  toUsers.setType(8);\u000a  toUsers.push(schOwner);\u000a\u000a  value = toUsers;\u000a  vars['$L.file'].email_to_users = value;\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">19</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Rule Valid Count via JavaScript</ruleDesc>
        <condition type="operator">not  (same(rule.arbitrary in $L.file, true)) and rule.valid.type in $L.file="occurence"</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord != true AND Rule Valid Type in CurrentRecord = "occurence")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Valid Type"&gt;rule.valid.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;occurence&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Set Rule Valid Count via JavaScript (when ( Rule Arbitrary in CurrentRecord != true AND Rule Valid Type in CurrentRecord = "occurence"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"rule.valid.count","script":"value=parseInt(vars['$L.file'].rule_valid_count, 10);"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">20</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Set Rule Occurrence via JavaScript</ruleDesc>
        <condition type="operator">not  (same(rule.arbitrary in $L.file, true))</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord != true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Set Rule Occurrence via JavaScript (when ( Rule Arbitrary in CurrentRecord != true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">setField</type>
        <ruleJSON type="string">{"type":"setField","fieldName":"rule.occurrence","script":"value = parseInt(vars['$L.file'].rule_occurrence, 10);"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">1</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Owner group</ruleDesc>
        <condition type="operator">nullsub(owner.group in $L.file, "")~=""</condition>
        <conditionDesc type="string">( Expression: nullsub(owner.group in $L.file,"")~="")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"nullsub(owner.group in $L.file,"")~="""&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Owner group (when ( Expression: nullsub(owner.group in $L.file,"")~=""))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"pop-up","fieldName":"owner.group","toTable":"assignment","toField":"name","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">15</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate date: rule.valid.to</ruleDesc>
        <condition type="operator">rule.valid.type in $L.file="date" and not  (same(rule.arbitrary in $L.file, true)) and not  (same(current.phase in $L.file, "retired"))</condition>
        <conditionDesc type="string">( Rule Valid Type in CurrentRecord = "date" AND Rule Arbitrary in CurrentRecord != true AND Current Phase in CurrentRecord != "retired")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Valid Type"&gt;rule.valid.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;date&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;retired&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate date: rule.valid.to (when ( Rule Valid Type in CurrentRecord = "date" AND Rule Arbitrary in CurrentRecord != true AND Current Phase in CurrentRecord != "retired"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateDate</type>
        <ruleJSON type="string">{"type":"validateDate","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"rule.valid.from","offset1":"+","days1":"0","hours1":"0","mins1":"0","cField2":"","offset2":"+","days2":"0","hours2":"0","mins2":"0"},"dateValue":{"dateValue1":"","dateValue2":""},"messageType":"pop-up","fieldName":"rule.valid.to","rangeType":"Field"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">7</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate Owner field</ruleDesc>
        <condition type="operator">not  (null(owner in $L.file))</condition>
        <conditionDesc type="string">( Expression: not null(owner in $L.file))</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate="" &gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="expression"&gt;&lt;Expression caption=""&gt;"not null(owner in $L.file)"&lt;/Expression&gt;&lt;/operand&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate Owner field (when ( Expression: not null(owner in $L.file)))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRecord</type>
        <ruleJSON type="string">{"type":"validateRecord","messageType":"pop-up","fieldName":"owner","toTable":"operator","toField":"name","filter":"ess.access.only#false and template.operator#false","fillDataList":[]}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">29</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation for dashboard/report list</ruleDesc>
        <condition type="operator">not  (same(current.phase in $L.file, "retired"))</condition>
        <conditionDesc type="string">( Current Phase in CurrentRecord != "retired")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Current Phase"&gt;current.phase&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType=""&gt;retired&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation for dashboard/report list (when ( Current Phase in CurrentRecord != "retired"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var opName  = vars['$L.file'].owner;\u000a\u000avars['$L.file'].inbox_dashboard =  lib.inboxFilter.denullReports( vars['$L.file'].inbox_dashboard );\u000avars['$L.file'].inbox_report= lib.inboxFilter.denullReports( vars['$L.file'].inbox_report);\u000a\u000avar dashboardlist = vars['$L.file'].inbox_dashboard;\u000avar reportlist = vars['$L.file'].inbox_report;\u000avar totalCount = 0;\u000avar unauthReports = new SCDatum();\u000aunauthReports.setType(8);\u000a\u000aif ( dashboardlist &amp;&amp; dashboardlist.getSize() &gt; 0 )\u000a{\u000a  lib.inboxFilter.getUnauthorizedReports(dashboardlist, opName, unauthReports);\u000a  totalCount  += vars['$L.file'].inbox_dashboard.getSize();\u000a}\u000a\u000aif ( reportlist &amp;&amp; reportlist.getSize() &gt; 0 )\u000a{\u000a  lib.inboxFilter.getUnauthorizedReports(reportlist, opName, unauthReports);\u000a  totalCount  += vars['$L.file'].inbox_report.getSize();\u000a}\u000a\u000aif ( unauthReports.getSize() &gt; 0 )\u000a{\u000a  returnCode = 1;\u000a  message = system.functions.scmsg( \"220\", \"Reporting\", [ unauthReports.getText() ] );\u000a}\u000aelse\u000a{\u000a  if ( vars['$L.file'].flag_email )\u000a  {\u000a    var nLimit = lib.reportscheduleHelp.getMaxDashboardPerTask();\u000a    if ( totalCount &gt; nLimit )\u000a    {\u000a      returnCode = 1;\u000a      message = system.functions.scmsg( \"218\", \"Reporting\", [nLimit ] );\u000a    }\u000a  }\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">30</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">not  (same(rule.arbitrary in $L.file, true)) and rule.type in $L.file="week"</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord != true AND Rule Type in CurrentRecord = "week")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Type"&gt;rule.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;week&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Rule Arbitrary in CurrentRecord != true AND Rule Type in CurrentRecord = "week"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var iWeekDays = 0;\u000avar _nullsub  = system.functions.nullsub;\u000a for (var i = 0; i &lt; 7; i++)\u000a {\u000a     iWeekDays |= eval(_nullsub(eval(\"vars.$rpsch_weekday_\" + i), false)) &lt;&lt; i;\u000a } // for weekdays\u000a\u000aif ( iWeekDays == 0)\u000a{\u000a  returnCode = 1;\u000a  message = system.functions.scmsg(\"202\", \"reportschedule\");\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">27</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">flag.email in $L.file=true and not  (same(email.to.users in $L.file, NULL))</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true AND Email to Users in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Email to Users"&gt;email.to.users&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Flag Email in CurrentRecord = true AND Email to Users in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var dtRet = new SCDatum();\u000adtRet.setType(8);\u000a\u000alib.inboxFilter.getInvalidOperators( vars['$L.file'].email_to_users, dtRet );\u000aif ( dtRet.getSize() &gt; 0 )\u000a{\u000a  returnCode = 1; \u000a  message=system.functions.scmsg (38, \"reportschedule\", [ dtRet.getText() ]);\u000a  cursorPosition = \"email.to.users\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">28</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Run JavaScript Validation</ruleDesc>
        <condition type="operator">flag.email in $L.file=true and not  (same(email.to.groups in $L.file, NULL))</condition>
        <conditionDesc type="string">( Flag Email in CurrentRecord = true AND Email to Groups in CurrentRecord != NULL)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Flag Email"&gt;flag.email&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Email to Groups"&gt;email.to.groups&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="string"&gt;NULL&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Run JavaScript Validation (when ( Flag Email in CurrentRecord = true AND Email to Groups in CurrentRecord != NULL))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">JSValidate</type>
        <ruleJSON type="string">{"type":"JSValidate","script":"var dtRet = new SCDatum();\u000adtRet.setType(8);\u000a\u000alib.inboxFilter.getInvalidAssignGrps( vars['$L.file'].email_to_groups, dtRet );\u000aif ( dtRet.getSize() &gt; 0 )\u000a{\u000a  returnCode = 1; \u000a  message=system.functions.scmsg (39, \"reportschedule\", [ dtRet.getText() ]);\u000a  cursorPosition = \"email.to.groups\";\u000a}"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">13</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate "rule.occurrence" against a range of text or numbers</ruleDesc>
        <condition type="operator">not  (same(rule.arbitrary in $L.file, true))</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord != true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate "rule.occurrence" against a range of text or numbers (when ( Rule Arbitrary in CurrentRecord != true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRange</type>
        <ruleJSON type="string">{"type":"validateRange","messageType":"pop-up","fieldName":"rule.occurrence","rangeType":"Text/Num","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"","cField2":""},"value":{"value1":"1","value2":""}}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">16</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Rule Valid Count are Mandatory</ruleDesc>
        <condition type="operator">rule.valid.type in $L.file="occurence" and rule.arbitrary in $L.file=false</condition>
        <conditionDesc type="string">( Rule Valid Type in CurrentRecord = "occurence" AND Rule Arbitrary in CurrentRecord = false)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Valid Type"&gt;rule.valid.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;occurence&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;false&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Rule Valid Count are Mandatory (when ( Rule Valid Type in CurrentRecord = "occurence" AND Rule Arbitrary in CurrentRecord = false))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"rule.valid.count","default":"10"}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">17</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Rule Rule Valid to are Mandatory</ruleDesc>
        <condition type="operator">not  (same(rule.arbitrary in $L.file, true)) and rule.valid.type in $L.file="date"</condition>
        <conditionDesc type="string">( Rule Arbitrary in CurrentRecord != true AND Rule Valid Type in CurrentRecord = "date")</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Valid Type"&gt;rule.valid.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;date&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Rule Rule Valid to are Mandatory (when ( Rule Arbitrary in CurrentRecord != true AND Rule Valid Type in CurrentRecord = "date"))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">mandatoryFields</type>
        <ruleJSON type="string">{"type":"mandatoryFields","fieldList":[{"fieldName":"rule.valid.to","default":""}],"messageType":"pop-up","validateAll":"true"}</ruleJSON>
      </rule>
      <rule sctype="structure">
        <ruleId type="decimal">14</ruleId>
        <isGroup type="boolean">false</isGroup>
        <parentGroup type="decimal">0</parentGroup>
        <ruleXML NullValue="1" type="string"/>
        <ruleDesc type="string">Validate "rule.valid.count" against a range of text or numbers</ruleDesc>
        <condition type="operator">rule.valid.type in $L.file="occurence" and not  (same(rule.arbitrary in $L.file, true))</condition>
        <conditionDesc type="string">( Rule Valid Type in CurrentRecord = "occurence" AND Rule Arbitrary in CurrentRecord != true)</conditionDesc>
        <conditionXML type="string">&lt;XmlCondition&gt;&lt;collection logical="" negate=""&gt;&lt;condition logical="" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Valid Type"&gt;rule.valid.type&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;equals&lt;/Comparison&gt;&lt;Value dataType=""&gt;occurence&lt;/Value&gt;&lt;/condition&gt;&lt;condition logical="AND" negate="false"&gt;&lt;operand type="field"&gt;&lt;TableName&gt;CurrentRecord&lt;/TableName&gt;&lt;FieldName caption="Rule Arbitrary"&gt;rule.arbitrary&lt;/FieldName&gt;&lt;/operand&gt;&lt;Comparison&gt;neq&lt;/Comparison&gt;&lt;Value dataType="boolean"&gt;true&lt;/Value&gt;&lt;/condition&gt;&lt;/collection&gt;&lt;/XmlCondition&gt;</conditionXML>
        <fullDesc type="string">Validate "rule.valid.count" against a range of text or numbers (when ( Rule Valid Type in CurrentRecord = "occurence" AND Rule Arbitrary in CurrentRecord != true))</fullDesc>
        <level type="decimal">0</level>
        <type type="string">validateRange</type>
        <ruleJSON type="string">{"type":"validateRange","messageType":"pop-up","fieldName":"rule.valid.count","rangeType":"Text/Num","comparison":{"not":"null","operator":"Greater Than Or Equal To"},"compareField":{"cField1":"","cField2":""},"value":{"value1":"1","value2":""}}</ruleJSON>
      </rule>
    </rule>
    <lastRuleId type="decimal">34</lastRuleId>
    <isAction NullValue="1" type="boolean"/>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">04/25/16 07:16:50</sysmodtime>
    <sysmodcount type="decimal">93</sysmodcount>
    <sysrestricted type="boolean">true</sysrestricted>
  </record>
</recordset>
