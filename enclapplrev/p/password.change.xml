<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;password.change&quot;" recordid="password.change">
    <application.name type="string">password.change</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">05/06/14 22:22:08</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Unclear messages when reset password from SRC</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change Panel:</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.bg</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Add statemenets:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.send.msg=true</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.trigger.error.code=8) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string">if ($L.trigger.error.code=10) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string">if ($L.trigger.error.code=12) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string">if ($L.trigger.error.code=13) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string">if ($L.trigger.error.code=14) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string">if ($L.trigger.error.code=15) then ($L.send.msg=false)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Add panel: check.send.bg.msg</rev.desc>
        </rev.desc>
        <change.no type="decimal">108795</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">04/16/14 18:47:51</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Doc Engine call failed with cc  when the same user change the password at the same time</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">change panel: update.oper</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">exit if record has been changed</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change from ext.error</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">To: changed</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">add panel: changed</rev.desc>
          <rev.desc sctype="string">add panel: operator.changed</rev.desc>
          <rev.desc sctype="string">add panel:operator.changed.bg</rev.desc>
        </rev.desc>
        <change.no type="decimal">107839</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">04/09/14 12:03:22</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">code  merge issue</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">change panel: check.code</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change Exit from i</rev.desc>
          <rev.desc sctype="string">nvalid.password.mb</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">To</rev.desc>
          <rev.desc sctype="string">invalid.password</rev.desc>
        </rev.desc>
        <change.no type="decimal">107440</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">04/09/14 11:56:43</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">code  merge issue</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">change panel: check.code</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change Exit from i</rev.desc>
          <rev.desc sctype="string">nvalid.password.mb</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">To</rev.desc>
          <rev.desc sctype="string">invalid.password</rev.desc>
        </rev.desc>
        <change.no type="decimal">107440</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">03/25/14 03:31:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">reset password issue</rev.desc>
        </rev.desc>
        <change.no type="decimal">106545</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">03/10/14 03:14:06</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SRC users need be able to change their password after the password expires</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Modifed Panels:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">parameter.xml  -&gt; add parameter for backend password reset calls.</rev.desc>
          <rev.desc sctype="string">$NEW.PASSWORD</rev.desc>
          <rev.desc sctype="string">$RETURN.ACTION</rev.desc>
          <rev.desc sctype="string">start.xml -&gt; initilize $L.new.password if $G.bg=true</rev.desc>
          <rev.desc sctype="string">if nullsub($G.bg, false) then ($L.new.password=$NEW.PASSWORD;$L.bg=true)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">exit.normal.xml -&gt; add return action to backend call.</rev.desc>
          <rev.desc sctype="string">$RETURN.ACTION=nullsub($L.action, "normal")</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">reset.passwords.xml -&gt; initialize the $L.new.pass and $L.confirm.pass if backend call. add below statements:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.new.pass=nullsub($L.new.password, NULL)</rev.desc>
          <rev.desc sctype="string">$L.confirm.pass=nullsub($L.new.password, NULL)</rev.desc>
          <rev.desc sctype="string">if $L.bg then ($L.old.pass=$L.old.password)</rev.desc>
          <rev.desc sctype="string">update.oper.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">Change normal exit to :new.password.done</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.xml -&gt; change from msg panel to decision panel to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">get.oper.xml -&gt; change "if no records exit"</rev.desc>
          <rev.desc sctype="string">from no.oper.mb to no.oper</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">check.safuser.codes.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">from "new.password.mb" to "new.password.done"</rev.desc>
          <rev.desc sctype="string">check.saf.codes.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">from "new.password.mb" to "new.password.done"</rev.desc>
          <rev.desc sctype="string">check.passwords.xml -&gt; change condition of each branch to add not($L.bg) to avoid mb.ok prompt in backend calls</rev.desc>
          <rev.desc sctype="string">bad.error.xml -&gt;change from msg panel to decision panel to check both backend/foreground</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">add Panels:</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.bg.xml</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.1.xml</rev.desc>
          <rev.desc sctype="string">send.bg.ok.msg.xml</rev.desc>
          <rev.desc sctype="string">send.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">no.oper.xml</rev.desc>
          <rev.desc sctype="string">no.oper.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">no.null.xml</rev.desc>
          <rev.desc sctype="string">no.null.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">new.password.ok.bg.xml</rev.desc>
          <rev.desc sctype="string">new.password.done.xml</rev.desc>
          <rev.desc sctype="string">invalid.userid.xml</rev.desc>
          <rev.desc sctype="string">invalid.userid.bg.xml</rev.desc>
          <rev.desc sctype="string">invalid.password.xml</rev.desc>
          <rev.desc sctype="string">invalid.password.bg.xml</rev.desc>
          <rev.desc sctype="string">exit.no.validation.xml</rev.desc>
          <rev.desc sctype="string">check.bg.password.change.xml</rev.desc>
          <rev.desc sctype="string">bad.error.bg.xml</rev.desc>
          <rev.desc sctype="string">bad.error.1.xml</rev.desc>
        </rev.desc>
        <change.no type="decimal">105358</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lmingyan</rev.name>
        <rev.date type="dateTime">03/10/14 02:59:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SRC users need be able to change their password after the password expires</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Modifed Panels:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">parameter.xml  -&gt; add parameter for backend password reset calls.</rev.desc>
          <rev.desc sctype="string">$NEW.PASSWORD</rev.desc>
          <rev.desc sctype="string">$RETURN.ACTION</rev.desc>
          <rev.desc sctype="string">start.xml -&gt; initilize $L.new.password if $G.bg=true</rev.desc>
          <rev.desc sctype="string">if nullsub($G.bg, false) then ($L.new.password=$NEW.PASSWORD;$L.bg=true)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">exit.normal.xml -&gt; add return action to backend call.</rev.desc>
          <rev.desc sctype="string">$RETURN.ACTION=nullsub($L.action, "normal")</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">reset.passwords.xml -&gt; initialize the $L.new.pass and $L.confirm.pass if backend call. add below statements:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.new.pass=nullsub($L.new.password, NULL)</rev.desc>
          <rev.desc sctype="string">$L.confirm.pass=nullsub($L.new.password, NULL)</rev.desc>
          <rev.desc sctype="string">if $L.bg then ($L.old.pass=$L.old.password)</rev.desc>
          <rev.desc sctype="string">update.oper.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">Change normal exit to :new.password.done</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.xml -&gt; change from msg panel to decision panel to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">get.oper.xml -&gt; change "if no records exit"</rev.desc>
          <rev.desc sctype="string">from no.oper.mb to no.oper</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">check.safuser.codes.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">from "new.password.mb" to "new.password.done"</rev.desc>
          <rev.desc sctype="string">check.saf.codes.xml -&gt; change normal exit to check both backend/foreground</rev.desc>
          <rev.desc sctype="string">from "new.password.mb" to "new.password.done"</rev.desc>
          <rev.desc sctype="string">check.passwords.xml -&gt; change condition of each branch to add not($L.bg) to avoid mb.ok prompt in backend calls</rev.desc>
          <rev.desc sctype="string">bad.error.xml -&gt;change from msg panel to decision panel to check both backend/foreground</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">add Panels:</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.bg.xml</rev.desc>
          <rev.desc sctype="string">send.trigger.error.msg.1.xml</rev.desc>
          <rev.desc sctype="string">send.bg.ok.msg.xml</rev.desc>
          <rev.desc sctype="string">send.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">no.oper.xml</rev.desc>
          <rev.desc sctype="string">no.oper.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">no.null.xml</rev.desc>
          <rev.desc sctype="string">no.null.bg.msg.xml</rev.desc>
          <rev.desc sctype="string">new.password.ok.bg.xml</rev.desc>
          <rev.desc sctype="string">new.password.done.xml</rev.desc>
          <rev.desc sctype="string">invalid.userid.xml</rev.desc>
          <rev.desc sctype="string">invalid.userid.bg.xml</rev.desc>
          <rev.desc sctype="string">invalid.password.xml</rev.desc>
          <rev.desc sctype="string">invalid.password.bg.xml</rev.desc>
          <rev.desc sctype="string">exit.no.validation.xml</rev.desc>
          <rev.desc sctype="string">check.bg.password.change.xml</rev.desc>
          <rev.desc sctype="string">bad.error.bg.xml</rev.desc>
          <rev.desc sctype="string">bad.error.1.xml</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ffaegh</rev.name>
        <rev.date type="dateTime">12/14/10 08:15:25</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC ReqId: 53652 - Check for $lo.operator and  use that instead of seleting the operator record and initializing it repeatedly.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">*panel 'check.expire':</rev.desc>
          <rev.desc sctype="string">Changed teh normal exit from 'init.oper' to 'check.global.oper'</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">*New decision panel 'check.global.oper'</rev.desc>
          <rev.desc sctype="string">Check for null($lo.operator) -&gt; 'init.oper'</rev.desc>
          <rev.desc sctype="string">exit normal to 'modify.saf'</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">*panels 'init.oper', 'get.oper', 'modify.saf', 'reselect.operator', 'set.password', and 'update.oper' :</rev.desc>
          <rev.desc sctype="string">Replaced $L.oper.file with $lo.operator</rev.desc>
        </rev.desc>
        <change.no type="decimal">53652</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">mhuang</rev.name>
        <rev.date type="dateTime">12/12/10 12:25:09</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">check.saf -&gt;exits normal to init.info file name $L.info.file -&gt;get.info.company-&gt;check.expire-&gt;init.oper ...... -&gt;modify.saf.form</rev.desc>
          <rev.desc sctype="string">change tp check.saf -&gt;exit normal to check.g.system.info -&gt; null to init.info else to check.expire., $L.info.file to $G.system.info</rev.desc>
        </rev.desc>
        <change.no type="decimal">53651</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">10/17/07 10:42:11</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel get.passwords</rev.desc>
          <rev.desc sctype="string">Added a new option for ESS mode that does not have a description.</rev.desc>
        </rev.desc>
        <change.no type="decimal">40541</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">08/20/07 05:40:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel get.passwords</rev.desc>
          <rev.desc sctype="string">Added a 999 option that goes to exit.cancel (same as option 3)</rev.desc>
          <rev.desc sctype="string">DE1979</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">acorvino</rev.name>
        <rev.date type="dateTime">01/20/07 17:40:45</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">removed obsolete panel safuser</rev.desc>
        </rev.desc>
        <change.no type="decimal">885</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">03/01/06 21:53:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">removed print statements</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">05/09/05 00:24:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">fixed the error exit on the cleanup panel</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">05/03/05 08:23:35</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">replaced the new.password.msg panel from a mb.ok to a apm.mb.ok</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rmurray</rev.name>
        <rev.date type="dateTime">04/05/05 01:54:39</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">on the start panel changed</rev.desc>
          <rev.desc sctype="string">$L.skip.old.flg=nullsub($SKIP.OLD.FLG, false)</rev.desc>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">$L.skip.old.flg=nullsub(val($SKIP.OLD.FLG, 4), false)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to make sure that the value passed in via cond.input is a boolean.  if you try to call this app from menu and pass in true, it comes in as a string, not a boolean.</rev.desc>
        </rev.desc>
        <change.no type="decimal">32530</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kasey</rev.name>
        <rev.date type="dateTime">08/21/01 04:24:49</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added a first condition in the check.passwords panel to check if the new password and the confirmed one are the same.</rev.desc>
        </rev.desc>
        <change.no type="decimal">15486</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">joeh</rev.name>
        <rev.date type="dateTime">06/06/01 02:47:11</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Made Changes to catch triggers when trigger.operator.check returns a trigger error.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kasey</rev.name>
        <rev.date type="dateTime">08/27/00 21:20:01</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">In panel check.expire, check to see if the password is required, regardless of an expiration date.</rev.desc>
        </rev.desc>
        <change.no type="decimal">1668</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">01/03/99 14:29:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Converted to use scmsg().</rev.desc>
        </rev.desc>
        <change.no type="decimal">856</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">mprice</rev.name>
        <rev.date type="dateTime">12/07/98 15:01:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added if $L.skip.old.flg then ($L.form="password.form.set") to start panel.</rev.desc>
        </rev.desc>
        <change.no type="decimal">803</change.no>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">Unclear messages when reset password from SRC</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change Panel:</descript>
      <descript sctype="string">send.trigger.error.msg.bg</descript>
      <descript sctype="string"/>
      <descript sctype="string">Add statemenets:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.send.msg=true</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.trigger.error.code=8) then ($L.send.msg=false)</descript>
      <descript sctype="string">if ($L.trigger.error.code=10) then ($L.send.msg=false)</descript>
      <descript sctype="string">if ($L.trigger.error.code=12) then ($L.send.msg=false)</descript>
      <descript sctype="string">if ($L.trigger.error.code=13) then ($L.send.msg=false)</descript>
      <descript sctype="string">if ($L.trigger.error.code=14) then ($L.send.msg=false)</descript>
      <descript sctype="string">if ($L.trigger.error.code=15) then ($L.send.msg=false)</descript>
      <descript sctype="string"/>
      <descript sctype="string">Add panel: check.send.bg.msg</descript>
      <descript sctype="string">Doc Engine call failed with cc  when the same user change the password at the same time</descript>
      <descript sctype="string"/>
      <descript sctype="string">change panel: update.oper</descript>
      <descript sctype="string"/>
      <descript sctype="string">exit if record has been changed</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change from ext.error</descript>
      <descript sctype="string"/>
      <descript sctype="string">To: changed</descript>
      <descript sctype="string"/>
      <descript sctype="string">add panel: changed</descript>
      <descript sctype="string">add panel: operator.changed</descript>
      <descript sctype="string">add panel:operator.changed.bg</descript>
      <descript sctype="string">code  merge issue</descript>
      <descript sctype="string"/>
      <descript sctype="string">change panel: check.code</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change Exit from i</descript>
      <descript sctype="string">nvalid.password.mb</descript>
      <descript sctype="string"/>
      <descript sctype="string">To</descript>
      <descript sctype="string">invalid.password</descript>
      <descript sctype="string">code  merge issue</descript>
      <descript sctype="string"/>
      <descript sctype="string">change panel: check.code</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change Exit from i</descript>
      <descript sctype="string">nvalid.password.mb</descript>
      <descript sctype="string"/>
      <descript sctype="string">To</descript>
      <descript sctype="string">invalid.password</descript>
      <descript sctype="string">reset password issue</descript>
      <descript sctype="string">SRC users need be able to change their password after the password expires</descript>
      <descript sctype="string"/>
      <descript sctype="string">Modifed Panels:</descript>
      <descript sctype="string"/>
      <descript sctype="string">parameter.xml  -&gt; add parameter for backend password reset calls.</descript>
      <descript sctype="string">$NEW.PASSWORD</descript>
      <descript sctype="string">$RETURN.ACTION</descript>
      <descript sctype="string">start.xml -&gt; initilize $L.new.password if $G.bg=true</descript>
      <descript sctype="string">if nullsub($G.bg, false) then ($L.new.password=$NEW.PASSWORD;$L.bg=true)</descript>
      <descript sctype="string"/>
      <descript sctype="string">exit.normal.xml -&gt; add return action to backend call.</descript>
      <descript sctype="string">$RETURN.ACTION=nullsub($L.action, "normal")</descript>
      <descript sctype="string"/>
      <descript sctype="string">reset.passwords.xml -&gt; initialize the $L.new.pass and $L.confirm.pass if backend call. add below statements:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.new.pass=nullsub($L.new.password, NULL)</descript>
      <descript sctype="string">$L.confirm.pass=nullsub($L.new.password, NULL)</descript>
      <descript sctype="string">if $L.bg then ($L.old.pass=$L.old.password)</descript>
      <descript sctype="string">update.oper.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">Change normal exit to :new.password.done</descript>
      <descript sctype="string">send.trigger.error.msg.xml -&gt; change from msg panel to decision panel to check both backend/foreground</descript>
      <descript sctype="string">get.oper.xml -&gt; change "if no records exit"</descript>
      <descript sctype="string">from no.oper.mb to no.oper</descript>
      <descript sctype="string"/>
      <descript sctype="string">check.safuser.codes.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">from "new.password.mb" to "new.password.done"</descript>
      <descript sctype="string">check.saf.codes.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">from "new.password.mb" to "new.password.done"</descript>
      <descript sctype="string">check.passwords.xml -&gt; change condition of each branch to add not($L.bg) to avoid mb.ok prompt in backend calls</descript>
      <descript sctype="string">bad.error.xml -&gt;change from msg panel to decision panel to check both backend/foreground</descript>
      <descript sctype="string"/>
      <descript sctype="string">add Panels:</descript>
      <descript sctype="string">send.trigger.error.msg.bg.xml</descript>
      <descript sctype="string">send.trigger.error.msg.1.xml</descript>
      <descript sctype="string">send.bg.ok.msg.xml</descript>
      <descript sctype="string">send.bg.msg.xml</descript>
      <descript sctype="string">no.oper.xml</descript>
      <descript sctype="string">no.oper.bg.msg.xml</descript>
      <descript sctype="string">no.null.xml</descript>
      <descript sctype="string">no.null.bg.msg.xml</descript>
      <descript sctype="string">new.password.ok.bg.xml</descript>
      <descript sctype="string">new.password.done.xml</descript>
      <descript sctype="string">invalid.userid.xml</descript>
      <descript sctype="string">invalid.userid.bg.xml</descript>
      <descript sctype="string">invalid.password.xml</descript>
      <descript sctype="string">invalid.password.bg.xml</descript>
      <descript sctype="string">exit.no.validation.xml</descript>
      <descript sctype="string">check.bg.password.change.xml</descript>
      <descript sctype="string">bad.error.bg.xml</descript>
      <descript sctype="string">bad.error.1.xml</descript>
      <descript sctype="string">SRC users need be able to change their password after the password expires</descript>
      <descript sctype="string"/>
      <descript sctype="string">Modifed Panels:</descript>
      <descript sctype="string"/>
      <descript sctype="string">parameter.xml  -&gt; add parameter for backend password reset calls.</descript>
      <descript sctype="string">$NEW.PASSWORD</descript>
      <descript sctype="string">$RETURN.ACTION</descript>
      <descript sctype="string">start.xml -&gt; initilize $L.new.password if $G.bg=true</descript>
      <descript sctype="string">if nullsub($G.bg, false) then ($L.new.password=$NEW.PASSWORD;$L.bg=true)</descript>
      <descript sctype="string"/>
      <descript sctype="string">exit.normal.xml -&gt; add return action to backend call.</descript>
      <descript sctype="string">$RETURN.ACTION=nullsub($L.action, "normal")</descript>
      <descript sctype="string"/>
      <descript sctype="string">reset.passwords.xml -&gt; initialize the $L.new.pass and $L.confirm.pass if backend call. add below statements:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.new.pass=nullsub($L.new.password, NULL)</descript>
      <descript sctype="string">$L.confirm.pass=nullsub($L.new.password, NULL)</descript>
      <descript sctype="string">if $L.bg then ($L.old.pass=$L.old.password)</descript>
      <descript sctype="string">update.oper.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">Change normal exit to :new.password.done</descript>
      <descript sctype="string">send.trigger.error.msg.xml -&gt; change from msg panel to decision panel to check both backend/foreground</descript>
      <descript sctype="string">get.oper.xml -&gt; change "if no records exit"</descript>
      <descript sctype="string">from no.oper.mb to no.oper</descript>
      <descript sctype="string"/>
      <descript sctype="string">check.safuser.codes.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">from "new.password.mb" to "new.password.done"</descript>
      <descript sctype="string">check.saf.codes.xml -&gt; change normal exit to check both backend/foreground</descript>
      <descript sctype="string">from "new.password.mb" to "new.password.done"</descript>
      <descript sctype="string">check.passwords.xml -&gt; change condition of each branch to add not($L.bg) to avoid mb.ok prompt in backend calls</descript>
      <descript sctype="string">bad.error.xml -&gt;change from msg panel to decision panel to check both backend/foreground</descript>
      <descript sctype="string"/>
      <descript sctype="string">add Panels:</descript>
      <descript sctype="string">send.trigger.error.msg.bg.xml</descript>
      <descript sctype="string">send.trigger.error.msg.1.xml</descript>
      <descript sctype="string">send.bg.ok.msg.xml</descript>
      <descript sctype="string">send.bg.msg.xml</descript>
      <descript sctype="string">no.oper.xml</descript>
      <descript sctype="string">no.oper.bg.msg.xml</descript>
      <descript sctype="string">no.null.xml</descript>
      <descript sctype="string">no.null.bg.msg.xml</descript>
      <descript sctype="string">new.password.ok.bg.xml</descript>
      <descript sctype="string">new.password.done.xml</descript>
      <descript sctype="string">invalid.userid.xml</descript>
      <descript sctype="string">invalid.userid.bg.xml</descript>
      <descript sctype="string">invalid.password.xml</descript>
      <descript sctype="string">invalid.password.bg.xml</descript>
      <descript sctype="string">exit.no.validation.xml</descript>
      <descript sctype="string">check.bg.password.change.xml</descript>
      <descript sctype="string">bad.error.bg.xml</descript>
      <descript sctype="string">bad.error.1.xml</descript>
      <descript sctype="string">QC ReqId: 53652 - Check for $lo.operator and  use that instead of seleting the operator record and initializing it repeatedly.</descript>
      <descript sctype="string"/>
      <descript sctype="string">*panel 'check.expire':</descript>
      <descript sctype="string">Changed teh normal exit from 'init.oper' to 'check.global.oper'</descript>
      <descript sctype="string"/>
      <descript sctype="string">*New decision panel 'check.global.oper'</descript>
      <descript sctype="string">Check for null($lo.operator) -&gt; 'init.oper'</descript>
      <descript sctype="string">exit normal to 'modify.saf'</descript>
      <descript sctype="string"/>
      <descript sctype="string">*panels 'init.oper', 'get.oper', 'modify.saf', 'reselect.operator', 'set.password', and 'update.oper' :</descript>
      <descript sctype="string">Replaced $L.oper.file with $lo.operator</descript>
      <descript sctype="string">check.saf -&gt;exits normal to init.info file name $L.info.file -&gt;get.info.company-&gt;check.expire-&gt;init.oper ...... -&gt;modify.saf.form</descript>
      <descript sctype="string">change tp check.saf -&gt;exit normal to check.g.system.info -&gt; null to init.info else to check.expire., $L.info.file to $G.system.info</descript>
      <descript sctype="string">Panel get.passwords</descript>
      <descript sctype="string">Added a new option for ESS mode that does not have a description.</descript>
      <descript sctype="string">Panel get.passwords</descript>
      <descript sctype="string">Added a 999 option that goes to exit.cancel (same as option 3)</descript>
      <descript sctype="string">DE1979</descript>
      <descript sctype="string">removed obsolete panel safuser</descript>
      <descript sctype="string">removed print statements</descript>
      <descript sctype="string">fixed the error exit on the cleanup panel</descript>
      <descript sctype="string">replaced the new.password.msg panel from a mb.ok to a apm.mb.ok</descript>
      <descript sctype="string">on the start panel changed</descript>
      <descript sctype="string">$L.skip.old.flg=nullsub($SKIP.OLD.FLG, false)</descript>
      <descript sctype="string">to</descript>
      <descript sctype="string">$L.skip.old.flg=nullsub(val($SKIP.OLD.FLG, 4), false)</descript>
      <descript sctype="string"/>
      <descript sctype="string">to make sure that the value passed in via cond.input is a boolean.  if you try to call this app from menu and pass in true, it comes in as a string, not a boolean.</descript>
      <descript sctype="string">Added a first condition in the check.passwords panel to check if the new password and the confirmed one is the same.</descript>
      <descript sctype="string">Made Changes to catch triggers when trigger.operator.check returns a trigger error.</descript>
      <descript sctype="string">In panel check.expire, check to see if the password is required, regardless of an expiration date.</descript>
      <descript sctype="string">Converted to use scmsg().</descript>
      <descript sctype="string">Added if $L.skip.old.flg then ($L.form="password.form.set") to start panel.</descript>
    </descript>
    <release type="string">A9602</release>
    <sysmodcount type="decimal">22</sysmodcount>
    <sysmoduser type="string">lmingyan</sysmoduser>
    <sysmodtime type="dateTime">05/06/14 22:22:35</sysmodtime>
  </record>
</recordset>
