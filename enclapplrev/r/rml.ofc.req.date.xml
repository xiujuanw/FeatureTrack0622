<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;rml.ofc.req.date&quot;" recordid="rml.ofc.req.date">
    <application.name type="string">rml.ofc.req.date</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">03/15/10 08:43:31</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel: do.non.dt</rev.desc>
          <rev.desc sctype="string">Changed the expression:</rev.desc>
          <rev.desc sctype="string">if ($L.lead.time&lt;$L.requested.date)</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.lead.time&gt;$L.requested.date)</rev.desc>
        </rev.desc>
        <change.no type="decimal">48894</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">03/14/10 17:09:24</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC48894 - RAD rml.ofc.req.date does not appear to properly calculate requested.date/target date field based on line item lead time</rev.desc>
          <rev.desc sctype="string">Panel: calc.initial.date</rev.desc>
          <rev.desc sctype="string">Changed the following condition:</rev.desc>
          <rev.desc sctype="string">if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if (29 in $L.x in $L.data=$L.parent.line or nullsub(31 in $L.x in $L.data, 0)=$L.parent.line or index(29 in $L.x in $L.data, 36 in $L.parent.line in $L.data)&gt;0) then</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: calc.new.date</rev.desc>
          <rev.desc sctype="string">Changed the exit from:</rev.desc>
          <rev.desc sctype="string">set.new.date</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">verify.new.date</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: verify.new.date</rev.desc>
          <rev.desc sctype="string">New decision panel</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: recalc.parent.date</rev.desc>
          <rev.desc sctype="string">New process panel</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: recalc.new.date</rev.desc>
          <rev.desc sctype="string">New calendar.calc.date panel</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.new.date</rev.desc>
          <rev.desc sctype="string">Changed the following condition:</rev.desc>
          <rev.desc sctype="string">else ($L.parent.line=17 in $L.i in $L.data;25 in $L.i in $L.data=$L.new.start.date;</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">else (if nullsub($L.past.date, false) then ($L.parent.line=17 in $L.i in $L.data;24 in $L.i in $L.data=$L.new.start.date;25 in $L.i in $L.data=$L.start.date) else ($L.parent.line=17 in $L.i in $L.data;25 in $L.i in $L.data=$L.new.start.date);</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.final.dt</rev.desc>
          <rev.desc sctype="string">Changed the following condition:</rev.desc>
          <rev.desc sctype="string">if ($L.start.time&lt;'00:00:00')</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.start.time&lt;='00:00:00')</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: start.dt</rev.desc>
          <rev.desc sctype="string">Changed the following condition:</rev.desc>
          <rev.desc sctype="string">$L.line.lead.time=15 in $L.i in $L.data</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.line.lead.time=nullsub(15 in $L.i in $L.data, '00:00:00')</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: check.duty.tables</rev.desc>
          <rev.desc sctype="string">Changed the exit from: do.non.dt</rev.desc>
          <rev.desc sctype="string">To : pre.do.non.dt</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: pre.do.non.dt</rev.desc>
          <rev.desc sctype="string">New process panel.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: calc.nodate.nocal</rev.desc>
          <rev.desc sctype="string">New rml.ofc.no.req.date panel.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: compare.non.dt</rev.desc>
          <rev.desc sctype="string">New process panel.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: decide.do.non.dt</rev.desc>
          <rev.desc sctype="string">New decision panel.</rev.desc>
        </rev.desc>
        <change.no type="decimal">48894</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ffaegh</rev.name>
        <rev.date type="dateTime">05/04/09 21:34:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC8667 - SCR43132:</rev.desc>
          <rev.desc sctype="string">* Line 3 of the 'calc.initial.date' had a type of $L.date instead of $L.data</rev.desc>
          <rev.desc sctype="string">then if (nullsub(11 in $L.temp in $L.data, false):</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (17 in $L.i in $L.data~=NULL) then ($L.parent.line=17 in $L.i in $L.data;$L.min.time=NULL;$L.new.parent=NULL;for $L.x = 1 to ($L.i - 1) do (if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then if nullsub(11 in $L.x in $L.data, false) then (if (25 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=25 in $L.x in $L.data)) else (if (27 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=27 in $L.x in $L.data)));$L.debug=$L.new.parent;$L.temp=nullsub($L.new.parent, $L.parent.line);if ($L.temp&gt;0) then if (nullsub(11 in $L.temp in $L.date, false) or not same($L.temp, 30 in $L.i in $L.data)) then (24 in $L.i in $L.data=27 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')) else (24 in $L.i in $L.data=24 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Changed to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (17 in $L.i in $L.data~=NULL) then ($L.parent.line=17 in $L.i in $L.data;$L.min.time=NULL;$L.new.parent=NULL;for $L.x = 1 to ($L.i - 1) do (if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then if nullsub(11 in $L.x in $L.data, false) then (if (25 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=25 in $L.x in $L.data)) else (if (27 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=27 in $L.x in $L.data)));$L.debug=$L.new.parent;$L.temp=nullsub($L.new.parent, $L.parent.line);if ($L.temp&gt;0) then if (nullsub(11 in $L.temp in $L.data, false) or not same($L.temp, 30 in $L.i in $L.data)) then (24 in $L.i in $L.data=27 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')) else (24 in $L.i in $L.data=24 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')))</rev.desc>
        </rev.desc>
        <change.no type="decimal">8667</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ffaegh</rev.name>
        <rev.date type="dateTime">01/11/09 13:43:24</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SCR42128 - Sequencing/dependencies are incorrect in RM for phantoms that include a bundle that is dependent on a line item.</rev.desc>
          <rev.desc sctype="string">do.non.dt panel:</rev.desc>
          <rev.desc sctype="string">Added the following expressions:</rev.desc>
          <rev.desc sctype="string">$L.phantom.line={}</rev.desc>
          <rev.desc sctype="string">$L.done={}</rev.desc>
          <rev.desc sctype="string">$L.ph.index=1</rev.desc>
          <rev.desc sctype="string">for $L.ph.counter = 1 to $L.lng do (if (not nullsub(11 in $L.ph.counter in $L.data, false) and not null(28 in $L.ph.counter in $L.data)) then ($L.found.phantom=true;$L.phantom.line=$L.phantom.line+{$L.ph.counter}))</rev.desc>
          <rev.desc sctype="string">Changed the exit from "check.translate.back" to "look.for.phantoms"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">look.for.phantoms panel:</rev.desc>
          <rev.desc sctype="string">Create a new decision panel called "look.for.phantoms"</rev.desc>
          <rev.desc sctype="string">exiting to "do.phantom" with condition: $L.ph.index&lt;=lng($L.phantom.line)</rev.desc>
          <rev.desc sctype="string">exit normal to "check.translate.back"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">do.phantom panel:</rev.desc>
          <rev.desc sctype="string">Create a new rml.ofc.get.phtm.times panel called "do.phantom"</rev.desc>
          <rev.desc sctype="string">With the following parameters passed:</rev.desc>
          <rev.desc sctype="string">Data Structure = $L.data</rev.desc>
          <rev.desc sctype="string">Phantom           = $L.ph.index in $L.phantom.line</rev.desc>
          <rev.desc sctype="string">Time                 = $L.requested.date</rev.desc>
          <rev.desc sctype="string">Already Done   = $L.done</rev.desc>
          <rev.desc sctype="string">Exiting to "incr.phantom"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">incr.phantom panel:</rev.desc>
          <rev.desc sctype="string">Create a new process panel called "incr.phantom" and the following line:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.ph.index=$L.ph.index+1</rev.desc>
          <rev.desc sctype="string">Exiting to "look.for.phantoms"</rev.desc>
        </rev.desc>
        <change.no type="decimal">42128</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">09/13/04 09:59:03</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added ability to read time zone information from work structure and pass on to the calendaring routines.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">Panel: do.non.dt</descript>
      <descript sctype="string">Changed the expression:</descript>
      <descript sctype="string">if ($L.lead.time&lt;$L.requested.date)</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.lead.time&gt;$L.requested.date)</descript>
      <descript sctype="string">QC48894 - RAD rml.ofc.req.date does not appear to properly calculate requested.date/target date field based on line item lead time</descript>
      <descript sctype="string">Panel: calc.initial.date</descript>
      <descript sctype="string">Changed the following condition:</descript>
      <descript sctype="string">if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if (29 in $L.x in $L.data=$L.parent.line or nullsub(31 in $L.x in $L.data, 0)=$L.parent.line or index(29 in $L.x in $L.data, 36 in $L.parent.line in $L.data)&gt;0) then</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: calc.new.date</descript>
      <descript sctype="string">Changed the exit from:</descript>
      <descript sctype="string">set.new.date</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">verify.new.date</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: verify.new.date</descript>
      <descript sctype="string">New decision panel</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: recalc.parent.date</descript>
      <descript sctype="string">New process panel</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: recalc.new.date</descript>
      <descript sctype="string">New calendar.calc.date panel</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.new.date</descript>
      <descript sctype="string">Changed the following condition:</descript>
      <descript sctype="string">else ($L.parent.line=17 in $L.i in $L.data;25 in $L.i in $L.data=$L.new.start.date;</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">else (if nullsub($L.past.date, false) then ($L.parent.line=17 in $L.i in $L.data;24 in $L.i in $L.data=$L.new.start.date;25 in $L.i in $L.data=$L.start.date) else ($L.parent.line=17 in $L.i in $L.data;25 in $L.i in $L.data=$L.new.start.date);</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.final.dt</descript>
      <descript sctype="string">Changed the following condition:</descript>
      <descript sctype="string">if ($L.start.time&lt;'00:00:00')</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.start.time&lt;='00:00:00')</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: start.dt</descript>
      <descript sctype="string">Changed the following condition:</descript>
      <descript sctype="string">$L.line.lead.time=15 in $L.i in $L.data</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.line.lead.time=nullsub(15 in $L.i in $L.data, '00:00:00')</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: check.duty.tables</descript>
      <descript sctype="string">Changed the exit from: do.non.dt</descript>
      <descript sctype="string">To : pre.do.non.dt</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: pre.do.non.dt</descript>
      <descript sctype="string">New process panel.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: calc.nodate.nocal</descript>
      <descript sctype="string">New rml.ofc.no.req.date panel.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: compare.non.dt</descript>
      <descript sctype="string">New process panel.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: decide.do.non.dt</descript>
      <descript sctype="string">New decision panel.</descript>
      <descript sctype="string">QC8667 - SCR43132:</descript>
      <descript sctype="string">* Line 3 of the 'calc.initial.date' had a type of $L.date instead of $L.data</descript>
      <descript sctype="string">then if (nullsub(11 in $L.temp in $L.data, false):</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">if (17 in $L.i in $L.data~=NULL) then ($L.parent.line=17 in $L.i in $L.data;$L.min.time=NULL;$L.new.parent=NULL;for $L.x = 1 to ($L.i - 1) do (if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then if nullsub(11 in $L.x in $L.data, false) then (if (25 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=25 in $L.x in $L.data)) else (if (27 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=27 in $L.x in $L.data)));$L.debug=$L.new.parent;$L.temp=nullsub($L.new.parent, $L.parent.line);if ($L.temp&gt;0) then if (nullsub(11 in $L.temp in $L.date, false) or not same($L.temp, 30 in $L.i in $L.data)) then (24 in $L.i in $L.data=27 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')) else (24 in $L.i in $L.data=24 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')))</descript>
      <descript sctype="string"/>
      <descript sctype="string">Changed to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (17 in $L.i in $L.data~=NULL) then ($L.parent.line=17 in $L.i in $L.data;$L.min.time=NULL;$L.new.parent=NULL;for $L.x = 1 to ($L.i - 1) do (if (29 in $L.x in $L.data=$L.parent.line or 31 in $L.x in $L.data=$L.parent.line or 29 in $L.x in $L.data=36 in $L.parent.line in $L.data) then if nullsub(11 in $L.x in $L.data, false) then (if (25 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=25 in $L.x in $L.data)) else (if (27 in $L.x in $L.data&lt;$L.min.time or $L.min.time=NULL) then ($L.new.parent=29 in $L.x in $L.data;$L.min.time=27 in $L.x in $L.data)));$L.debug=$L.new.parent;$L.temp=nullsub($L.new.parent, $L.parent.line);if ($L.temp&gt;0) then if (nullsub(11 in $L.temp in $L.data, false) or not same($L.temp, 30 in $L.i in $L.data)) then (24 in $L.i in $L.data=27 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')) else (24 in $L.i in $L.data=24 in $L.temp in $L.data;25 in $L.i in $L.data=24 in $L.i in $L.data+nullsub($L.line.lead.time, '00:00:00')))</descript>
      <descript sctype="string">SCR42128 - Sequencing/dependencies are incorrect in RM for phantoms that include a bundle that is dependent on a line item.</descript>
      <descript sctype="string">do.non.dt panel:</descript>
      <descript sctype="string">Added the following expressions:</descript>
      <descript sctype="string">$L.phantom.line={}</descript>
      <descript sctype="string">$L.done={}</descript>
      <descript sctype="string">$L.ph.index=1</descript>
      <descript sctype="string">for $L.ph.counter = 1 to $L.lng do (if (not nullsub(11 in $L.ph.counter in $L.data, false) and not null(28 in $L.ph.counter in $L.data)) then ($L.found.phantom=true;$L.phantom.line=$L.phantom.line+{$L.ph.counter}))</descript>
      <descript sctype="string">Changed the exit from "check.translate.back" to "look.for.phantoms"</descript>
      <descript sctype="string"/>
      <descript sctype="string">look.for.phantoms panel:</descript>
      <descript sctype="string">Create a new decision panel called "look.for.phantoms"</descript>
      <descript sctype="string">exiting to "do.phantom" with condition: $L.ph.index&lt;=lng($L.phantom.line)</descript>
      <descript sctype="string">exit normal to "check.translate.back"</descript>
      <descript sctype="string"/>
      <descript sctype="string">do.phantom panel:</descript>
      <descript sctype="string">Create a new rml.ofc.get.phtm.times panel called "do.phantom"</descript>
      <descript sctype="string">With the following parameters passed:</descript>
      <descript sctype="string">Data Structure = $L.data</descript>
      <descript sctype="string">Phantom           = $L.ph.index in $L.phantom.line</descript>
      <descript sctype="string">Time                 = $L.requested.date</descript>
      <descript sctype="string">Already Done   = $L.done</descript>
      <descript sctype="string">Exiting to "incr.phantom"</descript>
      <descript sctype="string"/>
      <descript sctype="string">incr.phantom panel:</descript>
      <descript sctype="string">Create a new process panel called "incr.phantom" and the following line:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.ph.index=$L.ph.index+1</descript>
      <descript sctype="string">Exiting to "look.for.phantoms"</descript>
      <descript sctype="string">Added ability to read time zone information from work structure and pass on to the calendaring routines.</descript>
    </descript>
    <release type="string">SC5.1</release>
    <sysmodcount type="decimal">2</sysmodcount>
    <sysmoduser type="string">rolfel</sysmoduser>
    <sysmodtime type="dateTime">03/15/10 08:43:57</sysmodtime>
  </record>
</recordset>
