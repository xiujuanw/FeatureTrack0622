<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;approval.approve&quot;" recordid="approval.approve">
    <application.name type="string">approval.approve</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">01/06/20 17:21:06</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update panel retract.systemdenied.groups</rev.desc>
        </rev.desc>
        <change.no type="decimal">158272</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">09/04/19 12:30:56</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">add panel empty.current.pending.groups.denied, set others' status to "Denied By System" if one deny with approval type allfirstdeny</rev.desc>
        </rev.desc>
        <change.no type="decimal">156068</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhouanqing</rev.name>
        <rev.date type="dateTime">09/02/18 07:54:54</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">When denying a Change Approval, the Reject Reason is not mandatory</rev.desc>
        </rev.desc>
        <change.no type="decimal">149713</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">12/05/14 15:08:49</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">The interaction failed to move to next phase after being approved in My to do list.</rev.desc>
        </rev.desc>
        <change.no type="decimal">119178</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhichao.fei</rev.name>
        <rev.date type="dateTime">08/20/14 17:28:27</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Compile the rad.</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhichao.fei</rev.name>
        <rev.date type="dateTime">08/20/14 17:23:33</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">In panel 'get.comments' change from</rev.desc>
          <rev.desc sctype="string">if ($L.action="approve") then ($L.temp=scmsg(17, "approval"))</rev.desc>
          <rev.desc sctype="string">if ($L.action="deny") then ($L.temp=scmsg(8, "approval"))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">if ($L.action="approve") then ($L.temp=scmsg(17, "approval");$L.alert.msg=$L.temp)</rev.desc>
          <rev.desc sctype="string">if ($L.action="deny") then ($L.temp=scmsg(8, "approval");$L.alert.msg=scmsg(62, "approval"))</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhichao.fei</rev.name>
        <rev.date type="dateTime">08/20/14 15:25:16</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">1.Set Text to '$L.alert.msg' panel 'no.comments'</rev.desc>
          <rev.desc sctype="string">2.add a line '$L.alert.msg=scmsg(62, "approval")' in panel 'get.comments'</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhichao.fei</rev.name>
        <rev.date type="dateTime">08/17/14 11:45:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Change</rev.desc>
          <rev.desc sctype="string">(not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="")</rev.desc>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">(not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="" and $L.action="deny") in panel get.comments</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">08/17/14 08:43:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Append variable '$L.action' in panel 'display.comments'</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhichao.fei</rev.name>
        <rev.date type="dateTime">08/16/14 13:15:14</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">1.Add new Parameter:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$INTO.REASON</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">2.Panel:get.comments</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">string1 in $L.ask=""</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.reject.variable=nullsub(reject.reason.values in $L.object, "Default Reject Reasons")</rev.desc>
          <rev.desc sctype="string">$L.reason.values={}</rev.desc>
          <rev.desc sctype="string">$L.reason.values.dis={}</rev.desc>
          <rev.desc sctype="string">$L.globallist=NULL</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="") then ($L.sql="name=\""+$L.reject.variable+"\"";$L.success.flg=rtecall("rinit", $L.return.code, $L.globallist, "globallists");$L.success.flg=rtecall("select", $L.return.code, $L.globallist, $L.sql))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (not  (null($L.globallist)) and not  (null(list.variable in $L.globallist))) then ($L.reason.values=evaluate(parse(list.variable in $L.globallist, 2)))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (not  (null($L.globallist)) and not  (null(display.variable in $L.globallist))) then ($L.reason.values.dis=evaluate(parse(display.variable in $L.globallist, 2)))</rev.desc>
          <rev.desc sctype="string">if ($L.reason.values.dis={} or null($L.reason.values.dis) or lng($L.reason.values.dis)=0) then ($L.reason.values.dis=$L.reason.values)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">3.Panel:display.comments</rev.desc>
          <rev.desc sctype="string">{$L.title, $L.prompt, $L.app.id, $L.reason.values, $L.reason.values.dis}</rev.desc>
          <rev.desc sctype="string">{"$L.title", "$L.prompt", "$L.app.id", "$L.reason.values", "$L.reason.values.dis"}</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">4.Panel:set.comments</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (not  ($L.got.comments)) then ($L.comments=strings2 in $L.ask;$L.reasons=string1 in $L.ask;if $L.bg then ($L.comments=$INTO.COMMENTS;$L.reasons=$INTO.REASON))</rev.desc>
          <rev.desc sctype="string">$L.comments=denull($L.comments)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.got.comments=true</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.action="retract") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(14, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {}))</rev.desc>
          <rev.desc sctype="string">if ($L.action="deny") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(13, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {});if ($L.reasons~=NULL and $L.reasons~="") then ($L.reason.temp=scmsg(61, "approval")+":"+$L.reasons;comments in $L.approval=insert(comments in $L.approval, 0, 1, $L.reason.temp)))</rev.desc>
          <rev.desc sctype="string">if ($L.action="approve") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(12, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {}))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$denyAllComment=$L.comments</rev.desc>
          <rev.desc sctype="string">$denyAllReason=$L.reasons</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">5.Panel:deny.loop</rev.desc>
        </rev.desc>
        <change.no type="decimal">99488</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">08/11/14 14:36:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Remove operator by default in mass approve</rev.desc>
        </rev.desc>
        <change.no type="decimal">112790</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">08/09/14 11:03:51</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Do not pop up approval comments whe mass approval</rev.desc>
        </rev.desc>
        <change.no type="decimal">112790</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">08/02/14 11:05:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel:check.match</rev.desc>
          <rev.desc sctype="string">Change</rev.desc>
          <rev.desc sctype="string">if (lng($L.match.groups)=1)</rev.desc>
          <rev.desc sctype="string">return lock.record</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">if (lng($L.match.groups)=1 or $do.mass.approval=true)</rev.desc>
          <rev.desc sctype="string">return lock.record</rev.desc>
        </rev.desc>
        <change.no type="decimal">112790</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">09/27/13 08:38:26</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SRC should check if the record is locked when user click Update or Post button instead of Submit button. Reviewer: Zheng,Xiang</rev.desc>
        </rev.desc>
        <change.no type="decimal">97371</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">09/27/13 07:05:04</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">change the incidents record to make sure adhoc before update trigger can be called</rev.desc>
        </rev.desc>
        <change.no type="decimal">98621</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">Hao.Ding</rev.name>
        <rev.date type="dateTime">07/06/13 18:09:46</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">merge PD4&amp;932</rev.desc>
          <rev.desc sctype="string">Fix the condition in check.comments</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">panjun</rev.name>
        <rev.date type="dateTime">06/25/13 08:45:16</rev.date>
        <rev.desc sctype="array"/>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">panjun</rev.name>
        <rev.date type="dateTime">06/25/13 07:33:16</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel:check.comments</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">change from: $L.action="approve" and nullsub(val(approval.comments in $L.object, 4), false)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.action="approve" and (nullsub(val(approval.comments in $L.object, 4), false) or not null($INTO.COMMENTS))</rev.desc>
        </rev.desc>
        <change.no type="decimal">95273</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">11/21/11 20:07:01</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">In panel: decide.final.status</rev.desc>
          <rev.desc sctype="string">From</rev.desc>
          <rev.desc sctype="string">$L.total.count=lng(denull(all.status in $L.approval))</rev.desc>
          <rev.desc sctype="string">To</rev.desc>
          <rev.desc sctype="string">$L.group1=denull(nullsub(current.pending.groups in $L.approval, {}))</rev.desc>
          <rev.desc sctype="string">$L.group2=denull(nullsub(future.groups in $L.approval, {}))</rev.desc>
          <rev.desc sctype="string">$L.group3=denull(nullsub(approved.groups in $L.approval, {}))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.total.count=lng($L.group1)+lng($L.group2)+lng($L.group3)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Add line:</rev.desc>
          <rev.desc sctype="string">if ($L.denied.count&gt;0 and $L.appr.type="quorum" and $L.denied.count&gt;=$L.total.count/2) then ($L.final.status="denied")</rev.desc>
        </rev.desc>
        <change.no type="decimal">70489</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">04/23/11 16:18:49</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Made the following changes:</rev.desc>
          <rev.desc sctype="string">* added the following expressions to 'approve.loop':</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.parent.locked=false</rev.desc>
          <rev.desc sctype="string">if (not null($L.parent.locks)) then ($L.parent.locks=denull($L.parent.locks);$L.locks.lng=lng($L.parent.locks);if ($L.locks.lng&gt;0) then for $L.cntr = 1 to $L.locks.lng do (if ($L.cntr in $L.parent.locks)#"incidents;" then ($L.parent.locked=true)))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* changed the exit for 'exit.normal' from 'check.filename' to 'cleanup'</rev.desc>
          <rev.desc sctype="string">* changed the exit for 'save.file' from 'unlock.record' to 'check.filename'</rev.desc>
          <rev.desc sctype="string">* changed the exit for check.filename' from 'cleanup' to 'unlock.record'</rev.desc>
          <rev.desc sctype="string">* changed the exit for 'call.approval.approve.item' from 'cleanup' to 'unlock.record' and passed '$L.parent.locked' in as the 'Parent Locked' parameter value</rev.desc>
        </rev.desc>
        <change.no type="decimal">62077</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zouguo</rev.name>
        <rev.date type="dateTime">10/31/02 18:37:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modify check.comments</rev.desc>
          <rev.desc sctype="string">if $L.bg is true, also need to check object config to determine whether need approval comments.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">miquan</rev.name>
        <rev.date type="dateTime">10/28/28 21:26:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modify the approve.loop.1</rev.desc>
          <rev.desc sctype="string">if ($L.delegate="") then ($L.x in approved.for in $L.approval=$L.delegate) else ($L.x in approved.for in $L.approval=jscall("ApprovalUtil.checkDelegates", $L.appr.query, $L.module, $L.i in $L.match.groups))</rev.desc>
        </rev.desc>
        <change.no type="decimal">58544</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ZhuQinXiang</rev.name>
        <rev.date type="dateTime">10/29/05 07:08:59</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E59870-$L.file.save in notifications are bound to different tables when approval actions are performed</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">RAD: approval.approve</rev.desc>
          <rev.desc sctype="string">Panel:  start</rev.desc>
          <rev.desc sctype="string">Change from</rev.desc>
          <rev.desc sctype="string">if (filename($L.object.save)~=filename($L.file)) then ($L.void=fduplicate($L.object.save, $L.file))</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if (filename($L.object.save)~=filename($L.file)) then ($L.void=fduplicate($L.object.save, $L.file);$L.void=fduplicate($L.file.save.copy, $L.file.save);$L.void=fduplicate($L.file.save, $L.file))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">RAD:  approval.approve</rev.desc>
          <rev.desc sctype="string">Panel:  save.file</rev.desc>
          <rev.desc sctype="string">Add at the first line:</rev.desc>
          <rev.desc sctype="string">if (not same($L.file.save.copy, NULL) and filename($L.file.save.copy)~=filename($L.file)) then ($L.file.save=$L.file.save.copy)</rev.desc>
        </rev.desc>
        <change.no type="decimal">59870</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zouguo</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Update to support Line Item Approval.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xxia</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel: display.comments</rev.desc>
          <rev.desc sctype="string">change exits: close/menu, back</rev.desc>
          <rev.desc sctype="string">from unlock.record</rev.desc>
          <rev.desc sctype="string">to cancel.mult.action</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">add new panel in type: process, with name: cancel.mult.action</rev.desc>
          <rev.desc sctype="string">statements:</rev.desc>
          <rev.desc sctype="string">$cancel.approval.inbox.mult.action=true</rev.desc>
          <rev.desc sctype="string">exit.normal: unlock.record</rev.desc>
        </rev.desc>
        <change.no type="decimal">58184</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">02/25/10 14:55:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update panel decide.final.status</rev.desc>
        </rev.desc>
        <change.no type="decimal">51110</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">08/09/08 11:13:01</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed delegate parameter.  It had disappeared (probably source control issue)</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Hua: add a delegate parameter, changed approve.loop and approve.deny to set approved.for to delegate</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Removed debug log messaging.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">hzhang</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">pass in $L.object.save into call.approval.process instead of $L.file.save.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">02/01/07 20:24:05</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">No longer passes in the wrong environment to se.call.process.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">hzhang</rev.name>
        <rev.date type="dateTime">05/30/05 16:15:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">added code so that when approval sequence moves to the next, call notification.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">04/30/05 15:41:05</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added code to allow single comment to be applied on multiple approval denying</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added code to allow multiple rejection with comments for each approval being denied</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">04/06/05 17:23:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">dded operator to $L.groups, to allow checking for single operators as well as groups in pending groups of approvals</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">04/06/05 17:02:49</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added operator to $L.groups, to allow checking for single operators as well as groups in pending groups of approvals</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ausman</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">building all.status on aprovals or denies or retractions, this repaces triggers that were in place.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">hzhang</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">approval.approve: added a line in exit.normal to set $INTO.ACTION=$L.return.action</rev.desc>
        </rev.desc>
        <change.no type="decimal">31766</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">joeh</rev.name>
        <rev.date type="dateTime">05/06/05 19:56:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">DEVTX I1383</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Updated check.match to exit to no.groups.1 instead of no.groups if no matching approval groups were found.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Added the no.groups.1 process panel.  It sets $L.no.auth.groups=true.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Changed exit.normal to have following expression: if ($L.no.auth.groups=true) then ($L.exit="no auth")</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">09/07/04 18:19:50</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel approve.loop.1
  added $L.x in approved.by.fullname in $L.approval=nullsub($lo.ufname, operator())
  added $L.x in approved.by.fullname in $L.approval to the end of $L.info
 Panel deny.loop
  added $L.x in approved.by.fullname in $L.approval=nullsub($lo.ufname, operator())
  added $L.x in approved.by.fullname in $L.approval to the end of $L.info
 Panel retract.loop
  added approved.by.fullname in $L.approval=delete(approved.by.fullname in $L.approval, $L.z)
  added nullsub($lo.ufname, operator()) to the end of $L.info</rev.desc>
        </rev.desc>
        <change.no type="decimal">24582</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">10/01/02 14:58:15</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Now brings up a comments box for approvals if "Required Approval Comments" is checked on the object record:</rev.desc>
          <rev.desc sctype="string">- on check.comments, exit to get.comments if $L.action="approve" and nullsub(val(approval.comments in $L.object, 4), false)</rev.desc>
          <rev.desc sctype="string">- changed get.comments to set up the correct prompt and title for the approval action</rev.desc>
        </rev.desc>
        <change.no type="decimal">23545</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Updated send.single.message and send.final.msg to pass in $L.file.save.  save.file now gets called after the messages are sent and before unlock.record.</rev.desc>
        </rev.desc>
        <change.no type="decimal">25493</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Changed reselect exit on lock.record from locked to refresh.record.  When attempting to approve a record that's been modified, the system will load in the latest version of the record and then proceed to approve it.  No longer will it lock the record for the refresh, then lock it again when the user is forced to select Approve a second time to process the approval.</rev.desc>
        </rev.desc>
        <change.no type="decimal">24968</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified check.groups to check if fields current.pending.groups, future.groups, approvals.required and approved.groups exist before they are set to $L.temp.pending.groups, $L.temp.future.groups and $L.temp.approved.groups, respectively.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Now invokes format control (stored on the Object record) on approvals.</rev.desc>
        </rev.desc>
        <change.no type="decimal">24562</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">12/01/02 00:23:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed promote.future so that all future approvals of the same level will get moved over to pending if the current sequence is changed.</rev.desc>
        </rev.desc>
        <change.no type="decimal">24071</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">No longer displays a confirmation message after cancelling out of a denial.</rev.desc>
        </rev.desc>
        <change.no type="decimal">23883</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified approve.loop.1 to include $L.comments in the information array if $L.got.comments is true.</rev.desc>
        </rev.desc>
        <change.no type="decimal">21425</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added the "All must approve - first denial" approval option.  Using this option all approvers must approve the record for it to be completely approved.  However, as soon as the first person denies it, the status is set immediately to "denied" instead of waiting for all approvers to register their approval action.</rev.desc>
        </rev.desc>
        <change.no type="decimal">22965</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added an approval type for when all must approve, but the first denial sets the entire record to denied.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">09/09/01 14:00:25</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified set.status to set approvals.required to $L.future.groups if the field exists in the file.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">FALCON</rev.name>
        <rev.date type="dateTime">03/29/02 06:25:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed a problem where the parent lock was not being released when approving a child record (task, line item)</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">02/07/02 19:58:22</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Star Team:  Now displays a different message when attempting to deny a change without being a member of one of the pending approval groups.</rev.desc>
        </rev.desc>
        <change.no type="decimal">23361</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">01/04/02 22:47:33</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Star Team:  Now passes in $L.phase to us.notify.  That way, all the CM approval notifications can reference the phase record in determining which name to use for the person who approved or denied the change.</rev.desc>
        </rev.desc>
        <change.no type="decimal">22464</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On decide.final.status panel, set $L.appr.type to the value in the approval definition, nullsubed to the object record value.</rev.desc>
        </rev.desc>
        <change.no type="decimal">16106</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">10/08/01 19:10:01</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Now passes in a suppress message flag to control when the no matching groups message is sent.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">update panel retract.systemdenied.groups</descript>
      <descript sctype="string">add panel empty.current.pending.groups.denied, set others' status to "Denied By System" if one deny with approval type allfirstdeny</descript>
      <descript sctype="string">When denying a Change Approval, the Reject Reason is not mandatory</descript>
      <descript sctype="string">The interaction failed to move to next phase after being approved in My to do list.</descript>
      <descript sctype="string">Compile the rad.</descript>
      <descript sctype="string">In panel 'get.comments' change from</descript>
      <descript sctype="string">if ($L.action="approve") then ($L.temp=scmsg(17, "approval"))</descript>
      <descript sctype="string">if ($L.action="deny") then ($L.temp=scmsg(8, "approval"))</descript>
      <descript sctype="string"/>
      <descript sctype="string">to</descript>
      <descript sctype="string">if ($L.action="approve") then ($L.temp=scmsg(17, "approval");$L.alert.msg=$L.temp)</descript>
      <descript sctype="string">if ($L.action="deny") then ($L.temp=scmsg(8, "approval");$L.alert.msg=scmsg(62, "approval"))</descript>
      <descript sctype="string">1.Set Text to '$L.alert.msg' panel 'no.comments'</descript>
      <descript sctype="string">2.add a line '$L.alert.msg=scmsg(62, "approval")' in panel 'get.comments'</descript>
      <descript sctype="string">Change</descript>
      <descript sctype="string">(not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="")</descript>
      <descript sctype="string">to</descript>
      <descript sctype="string"/>
      <descript sctype="string">(not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="" and $L.action="deny") in panel get.comments</descript>
      <descript sctype="string">Append variable '$L.action' in panel 'display.comments'</descript>
      <descript sctype="string">1.Add new Parameter:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$INTO.REASON</descript>
      <descript sctype="string"/>
      <descript sctype="string">2.Panel:get.comments</descript>
      <descript sctype="string"/>
      <descript sctype="string">string1 in $L.ask=""</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.reject.variable=nullsub(reject.reason.values in $L.object, "Default Reject Reasons")</descript>
      <descript sctype="string">$L.reason.values={}</descript>
      <descript sctype="string">$L.reason.values.dis={}</descript>
      <descript sctype="string">$L.globallist=NULL</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (not  ($L.bg) and $L.reject.variable~=NULL and $L.reject.variable~="") then ($L.sql="name=\""+$L.reject.variable+"\"";$L.success.flg=rtecall("rinit", $L.return.code, $L.globallist, "globallists");$L.success.flg=rtecall("select", $L.return.code, $L.globallist, $L.sql))</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (not  (null($L.globallist)) and not  (null(list.variable in $L.globallist))) then ($L.reason.values=evaluate(parse(list.variable in $L.globallist, 2)))</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (not  (null($L.globallist)) and not  (null(display.variable in $L.globallist))) then ($L.reason.values.dis=evaluate(parse(display.variable in $L.globallist, 2)))</descript>
      <descript sctype="string">if ($L.reason.values.dis={} or null($L.reason.values.dis) or lng($L.reason.values.dis)=0) then ($L.reason.values.dis=$L.reason.values)</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">3.Panel:display.comments</descript>
      <descript sctype="string">{$L.title, $L.prompt, $L.app.id, $L.reason.values, $L.reason.values.dis}</descript>
      <descript sctype="string">{"$L.title", "$L.prompt", "$L.app.id", "$L.reason.values", "$L.reason.values.dis"}</descript>
      <descript sctype="string"/>
      <descript sctype="string">4.Panel:set.comments</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (not  ($L.got.comments)) then ($L.comments=strings2 in $L.ask;$L.reasons=string1 in $L.ask;if $L.bg then ($L.comments=$INTO.COMMENTS;$L.reasons=$INTO.REASON))</descript>
      <descript sctype="string">$L.comments=denull($L.comments)</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">$L.got.comments=true</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.action="retract") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(14, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {}))</descript>
      <descript sctype="string">if ($L.action="deny") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(13, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {});if ($L.reasons~=NULL and $L.reasons~="") then ($L.reason.temp=scmsg(61, "approval")+":"+$L.reasons;comments in $L.approval=insert(comments in $L.approval, 0, 1, $L.reason.temp)))</descript>
      <descript sctype="string">if ($L.action="approve") then (comments in $L.approval={str(tod())+" &lt;"+scmsg(12, "approval")+"&gt; -- "+operator()}+$L.comments+nullsub(comments in $L.approval, {}))</descript>
      <descript sctype="string"/>
      <descript sctype="string">$denyAllComment=$L.comments</descript>
      <descript sctype="string">$denyAllReason=$L.reasons</descript>
      <descript sctype="string"/>
      <descript sctype="string">5.Panel:deny.loop</descript>
      <descript sctype="string">Remove operator by default in mass approve</descript>
      <descript sctype="string">Do not pop up approval comments whe mass approval</descript>
      <descript sctype="string">Panel:check.match</descript>
      <descript sctype="string">Change</descript>
      <descript sctype="string">if (lng($L.match.groups)=1)</descript>
      <descript sctype="string">return lock.record</descript>
      <descript sctype="string"/>
      <descript sctype="string">to</descript>
      <descript sctype="string">if (lng($L.match.groups)=1 or $do.mass.approval=true)</descript>
      <descript sctype="string">return lock.record</descript>
      <descript sctype="string">SRC should check if the record is locked when user click Update or Post button instead of Submit button. Reviewer: Zheng,Xiang</descript>
      <descript sctype="string">change the incidents record to make sure adhoc before update trigger can be called</descript>
      <descript sctype="string">merge PD4&amp;932</descript>
      <descript sctype="string">Fix the condition in check.comments</descript>
      <descript sctype="string">Panel:check.comments</descript>
      <descript sctype="string"/>
      <descript sctype="string">change from: $L.action="approve" and nullsub(val(approval.comments in $L.object, 4), false)</descript>
      <descript sctype="string"/>
      <descript sctype="string">to</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.action="approve" and (nullsub(val(approval.comments in $L.object, 4), false) or not null($INTO.COMMENTS))</descript>
      <descript sctype="string">In panel: decide.final.status</descript>
      <descript sctype="string">From</descript>
      <descript sctype="string">$L.total.count=lng(denull(all.status in $L.approval))</descript>
      <descript sctype="string">To</descript>
      <descript sctype="string">$L.group1=denull(nullsub(current.pending.groups in $L.approval, {}))</descript>
      <descript sctype="string">$L.group2=denull(nullsub(future.groups in $L.approval, {}))</descript>
      <descript sctype="string">$L.group3=denull(nullsub(approved.groups in $L.approval, {}))</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.total.count=lng($L.group1)+lng($L.group2)+lng($L.group3)</descript>
      <descript sctype="string"/>
      <descript sctype="string">Add line:</descript>
      <descript sctype="string">if ($L.denied.count&gt;0 and $L.appr.type="quorum" and $L.denied.count&gt;=$L.total.count/2) then ($L.final.status="denied")</descript>
      <descript sctype="string">Made the following changes:</descript>
      <descript sctype="string">* added the following expressions to 'approve.loop':</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.parent.locked=false</descript>
      <descript sctype="string">if (not null($L.parent.locks)) then ($L.parent.locks=denull($L.parent.locks);$L.locks.lng=lng($L.parent.locks);if ($L.locks.lng&gt;0) then for $L.cntr = 1 to $L.locks.lng do (if ($L.cntr in $L.parent.locks)#"incidents;" then ($L.parent.locked=true)))</descript>
      <descript sctype="string"/>
      <descript sctype="string">* changed the exit for 'exit.normal' from 'check.filename' to 'cleanup'</descript>
      <descript sctype="string">* changed the exit for 'save.file' from 'unlock.record' to 'check.filename'</descript>
      <descript sctype="string">* changed the exit for check.filename' from 'cleanup' to 'unlock.record'</descript>
      <descript sctype="string">* changed the exit for 'call.approval.approve.item' from 'cleanup' to 'unlock.record' and passed '$L.parent.locked' in as the 'Parent Locked' parameter value</descript>
      <descript sctype="string">Modify check.comments</descript>
      <descript sctype="string">if $L.bg is true, also need to check object config to determine whether need approval comments.</descript>
      <descript sctype="string">Modify the approve.loop.1</descript>
      <descript sctype="string">if ($L.delegate="") then ($L.x in approved.for in $L.approval=$L.delegate) else ($L.x in approved.for in $L.approval=jscall("ApprovalUtil.checkDelegates", $L.appr.query, $L.module, $L.i in $L.match.groups))</descript>
      <descript sctype="string">QCCR1E59870-$L.file.save in notifications are bound to different tables when approval actions are performed</descript>
      <descript sctype="string"/>
      <descript sctype="string">RAD: approval.approve</descript>
      <descript sctype="string">Panel:  start</descript>
      <descript sctype="string">Change from</descript>
      <descript sctype="string">if (filename($L.object.save)~=filename($L.file)) then ($L.void=fduplicate($L.object.save, $L.file))</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if (filename($L.object.save)~=filename($L.file)) then ($L.void=fduplicate($L.object.save, $L.file);$L.void=fduplicate($L.file.save.copy, $L.file.save);$L.void=fduplicate($L.file.save, $L.file))</descript>
      <descript sctype="string"/>
      <descript sctype="string">RAD:  approval.approve</descript>
      <descript sctype="string">Panel:  save.file</descript>
      <descript sctype="string">Add at the first line:</descript>
      <descript sctype="string">if (not same($L.file.save.copy, NULL) and filename($L.file.save.copy)~=filename($L.file)) then ($L.file.save=$L.file.save.copy)</descript>
      <descript sctype="string">Update to support Line Item Approval.</descript>
      <descript sctype="string">panel: display.comments</descript>
      <descript sctype="string">change exits: close/menu, back</descript>
      <descript sctype="string">from unlock.record</descript>
      <descript sctype="string">to cancel.mult.action</descript>
      <descript sctype="string"/>
      <descript sctype="string">add new panel in type: process, with name: cancel.mult.action</descript>
      <descript sctype="string">statements:</descript>
      <descript sctype="string">$cancel.approval.inbox.mult.action=true</descript>
      <descript sctype="string">exit.normal: unlock.record</descript>
      <descript sctype="string">update panel decide.final.status</descript>
      <descript sctype="string">Fixed delegate parameter.  It had disappeared (probably source control issue)</descript>
      <descript sctype="string">Hua: add a delegate parameter, changed approve.loop and approve.deny to set approved.for to delegate</descript>
      <descript sctype="string">Removed debug log messaging.</descript>
      <descript sctype="string">pass in $L.object.save into call.approval.process instead of $L.file.save.</descript>
      <descript sctype="string">No longer passes in the wrong environment to se.call.process.</descript>
      <descript sctype="string">added code so that when approval sequence moves to the next, call notification.</descript>
      <descript sctype="string">Added code to allow single comment to be applied on multiple approval denying</descript>
      <descript sctype="string">Added code to allow multiple rejection with comments for each approval being denied</descript>
      <descript sctype="string">dded operator to $L.groups, to allow checking for single operators as well as groups in pending groups of approvals</descript>
      <descript sctype="string">Added operator to $L.groups, to allow checking for single operators as well as groups in pending groups of approvals</descript>
      <descript sctype="string">building all.status on aprovals or denies or retractions, this repaces triggers that were in place.</descript>
      <descript sctype="string">approval.approve: added a line in exit.normal to set $INTO.ACTION=$L.return.action</descript>
      <descript sctype="string">DEVTX I1383</descript>
      <descript sctype="string"/>
      <descript sctype="string">Updated check.match to exit to no.groups.1 instead of no.groups if no matching approval groups were found.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Added the no.groups.1 process panel.  It sets $L.no.auth.groups=true.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Changed exit.normal to have following expression: if ($L.no.auth.groups=true) then ($L.exit="no auth")</descript>
      <descript sctype="string">	Panel approve.loop.1
		added $L.x in approved.by.fullname in $L.approval=nullsub($lo.ufname, operator())
		added $L.x in approved.by.fullname in $L.approval to the end of $L.info
	Panel deny.loop
		added $L.x in approved.by.fullname in $L.approval=nullsub($lo.ufname, operator())
		added $L.x in approved.by.fullname in $L.approval to the end of $L.info
	Panel retract.loop
		added approved.by.fullname in $L.approval=delete(approved.by.fullname in $L.approval, $L.z)
		added nullsub($lo.ufname, operator()) to the end of $L.info</descript>
      <descript sctype="string">Now brings up a comments box for approvals if "Required Approval Comments" is checked on the object record:</descript>
      <descript sctype="string">- on check.comments, exit to get.comments if $L.action="approve" and nullsub(val(approval.comments in $L.object, 4), false)</descript>
      <descript sctype="string">- changed get.comments to set up the correct prompt and title for the approval action</descript>
      <descript sctype="string">Updated send.single.message and send.final.msg to pass in $L.file.save.  save.file now gets called after the messages are sent and before unlock.record.</descript>
      <descript sctype="string">Changed reselect exit on lock.record from locked to refresh.record.  When attempting to approve a record that's been modified, the system will load in the latest version of the record and then proceed to approve it.  No longer will it lock the record for the refresh, then lock it again when the user is forced to select Approve a second time to process the approval.</descript>
      <descript sctype="string">Modified check.groups to check if fields current.pending.groups, future.groups, approvals.required and approved.groups exist before they are set to $L.temp.pending.groups, $L.temp.future.groups and $L.temp.approved.groups, respectively.</descript>
      <descript sctype="string">Now invokes format control (stored on the Object record) on approvals.</descript>
      <descript sctype="string">Fixed promote.future so that all future approvals of the same level will get moved over to pending if the current sequence is changed.</descript>
      <descript sctype="string">No longer displays a confirmation message after cancelling out of a denial.</descript>
      <descript sctype="string">Modified approve.loop.1 to include $L.comments in the information array if $L.got.comments is true.</descript>
      <descript sctype="string">Added the "All must approve - first denial" approval option.  Using this option all approvers must approve the record for it to be completely approved.  However, as soon as the first person denies it, the status is set immediately to "denied" instead of waiting for all approvers to register their approval action.</descript>
      <descript sctype="string">Added an approval type for when all must approve, but the first denial sets the entire record to denied.</descript>
      <descript sctype="string">Modified set.status to set approvals.required to $L.future.groups if the field exists in the file.</descript>
      <descript sctype="string">Fixed a problem where the parent lock was not being released when approving a child record (task, line item)</descript>
      <descript sctype="string">Star Team:  Now displays a different message when attempting to deny a change without being a member of one of the pending approval groups.</descript>
      <descript sctype="string">Star Team:  Now passes in $L.phase to us.notify.  That way, all the CM approval notifications can reference the phase record in determining which name to use for the person who approved or denied the change.</descript>
      <descript sctype="string">On decide.final.status panel, set $L.appr.type to the value in the approval definition, nullsubed to the object record value.</descript>
      <descript sctype="string">Now passes in a suppress message flag to control when the no matching groups message is sent.</descript>
    </descript>
    <release type="string">A9902</release>
    <sysmodcount type="decimal">16</sysmodcount>
    <sysmoduser type="string">zhangqi</sysmoduser>
    <sysmodtime type="dateTime">01/06/20 17:21:26</sysmodtime>
  </record>
</recordset>
