<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;filterCriteriaDataType&quot;" recordid="filterCriteriaDataType">
    <application.name type="string">filterCriteriaDataType</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">06/09/15 20:45:15</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">remove the last modification</rev.desc>
        </rev.desc>
        <change.no type="decimal">123546</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xingjia</rev.name>
        <rev.date type="dateTime">06/04/15 08:25:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added a new return type to indicate the current field references to a referencetable in datadict</rev.desc>
        </rev.desc>
        <change.no type="decimal">123546</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhenqing</rev.name>
        <rev.date type="dateTime">04/09/13 08:13:43</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">The autoformat rule of a view does not work properly if you add the rule on a field with IR Key</rev.desc>
          <rev.desc sctype="string">panel: exit.normal</rev.desc>
          <rev.desc sctype="string">change the folowing to</rev.desc>
          <rev.desc sctype="string">if ($L.return.type="ir") then</rev.desc>
          <rev.desc sctype="string">(</rev.desc>
          <rev.desc sctype="string">$L.cond.list ={" startswith" };</rev.desc>
          <rev.desc sctype="string">$L.cond.display ={scmsg ("isin" , "view" )}</rev.desc>
          <rev.desc sctype="string">)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">if ($L.return.type="ir") then</rev.desc>
          <rev.desc sctype="string">(</rev.desc>
          <rev.desc sctype="string">$L.cond.list ={"isin" };</rev.desc>
          <rev.desc sctype="string">$L.cond.display ={scmsg ("isin" , "view" )}</rev.desc>
        </rev.desc>
        <change.no type="decimal">91367</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">03/31/11 16:01:04</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the 'exit.normal' panel so that the following expression:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">is replaced by:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This ensures that the 'lt', 'gt', 'lte' and 'gte' values are mapped to the correct scmessage records.</rev.desc>
        </rev.desc>
        <change.no type="decimal">51056</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">03/30/11 02:04:58</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Weihui Zhang Modified on 31.Mar.2011</rev.desc>
          <rev.desc sctype="string">Defect ID: 62682</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: exit.normal</rev.desc>
          <rev.desc sctype="string">Change the follwoing lines:</rev.desc>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gtNum", "view"), scmsg("ltNum", "view"), scmsg("gl", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};</rev.desc>
        </rev.desc>
        <change.no type="decimal">62682</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ezeobiej</rev.name>
        <rev.date type="dateTime">03/02/11 06:31:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Defect ID: 60715 - Advanced Search: When selecting a field where the link has a variable as Source field, the code does not continue to the next link as a regular fill action does.</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change made:</rev.desc>
          <rev.desc sctype="string">Modified the check.fields and set.linkline panels of filterCriteriaDataType RAD application so that when selecting a field where the link widget has a variable as source field, the associated fill action behaves the same way a regular fill action does.</rev.desc>
        </rev.desc>
        <change.no type="decimal">60715</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">01/19/11 20:41:39</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR 60671 - Advanced Filter:  link not working all the time when selecting a field that has a matching link record</rev.desc>
          <rev.desc sctype="string">Panel:  set.linkline</rev.desc>
          <rev.desc sctype="string">Changed the following lines:</rev.desc>
          <rev.desc sctype="string">if ($L.source.index=0) then ($L.source.index=1)</rev.desc>
          <rev.desc sctype="string">1 in 1 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.source.index=0 and lng($L.index in project.source.fields in $L.new.link)&gt;0) then ($L.source.index=1)</rev.desc>
          <rev.desc sctype="string">if ($L.source.index&gt;0) then (1 in 1 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link) else (1 in 1 in project.source.fields in $L.link=$L.index in source.fields in $L.new.link)</rev.desc>
          <rev.desc sctype="string">Changed the following line:</rev.desc>
          <rev.desc sctype="string">1 in 2 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.source.index&gt;0) then (1 in 2 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link)</rev.desc>
          <rev.desc sctype="string">else (1 in 2 in project.source.fields in $L.link=$L.index in source.fields in $L.new.link)</rev.desc>
        </rev.desc>
        <change.no type="decimal">60671</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">01/17/11 22:05:06</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the 'get.IR.key' panel so that the following expressions:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.key.lng=lng(denull(key in $L.dbdict))</rev.desc>
          <rev.desc sctype="string">$L.ir.fields={}</rev.desc>
          <rev.desc sctype="string">for $L.i = 1 to $L.key.lng do (if (1 in $L.i in key in $L.dbdict=64) then ($L.field.lng=lng(denull(2 in $L.i in key in $L.dbdict));for $L.x = 1 to $L.field.lng do ($L.ir.fields=insert($L.ir.fields, 0, 1, $L.x in 2 in $L.i in key in $L.dbdict))))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">are replaced with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.ir.fields=jscall("tableFunctions.getIRFields", $L.filename)</rev.desc>
        </rev.desc>
        <change.no type="decimal">54905</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yma2</rev.name>
        <rev.date type="dateTime">01/04/11 22:41:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update panel set.linkline</rev.desc>
          <rev.desc sctype="string">get field index value from "$L.index in project.source.fields in $L.new.link"</rev.desc>
          <rev.desc sctype="string">get source fields from index value location instead of hard code 1</rev.desc>
        </rev.desc>
        <change.no type="decimal">60307</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">10/05/06 19:08:42</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified Panel:   exit.normal</rev.desc>
          <rev.desc sctype="string">Changed the following expressions:</rev.desc>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "nneq"};$L.cond.display={scmsg("eq", "view"), scmsg("nneqLogical", "view")})</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "nneq"};$L.cond.display={scmsg("eq", "view"), scmsg("nneqLogical", "view")};$cond.list.format={"eq"};$cond.display.format={scmsg("eq", "view")})</rev.desc>
        </rev.desc>
        <change.no type="decimal">45392</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kewell</rev.name>
        <rev.date type="dateTime">10/04/15 16:54:48</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified Panel:   exit.normal</rev.desc>
        </rev.desc>
        <change.no type="decimal">45392</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lingyan</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC43554</rev.desc>
          <rev.desc sctype="string">Indexing into a OFFSET type datum.. error message when using advanced filter</rev.desc>
        </rev.desc>
        <change.no type="decimal">43554</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the following expressions on the 'exit.normal' panel from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq", "null", "notnull"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween", "null", "notnull"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween", "null", "notnull"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This will make the 'Is Empty' and 'Is Not Empty' operators available for character, date/time and number fields.</rev.desc>
        </rev.desc>
        <change.no type="decimal">43671</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the following expressions on the 'exit.normal' panel from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={"Contains", "Equals", "Does not Contain", "Starts With", "Does not Equal"})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={"On", "On or After", "On or Before", "Is Between"})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={"Equals", "Does not Equal", "Is More Than", "Is Less Than", "Is at Least", "Is at Most", "Is Between", "Is not Between"})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "neq"};$L.cond.display={"Equals", "Not Equals"})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "neq"};$L.cond.display={scmsg("eq", "view"), scmsg("neqLogical", "view")})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.return.type="ir") then ($L.cond.list={"startswith"};$L.cond.display={"Contains"})</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if ($L.return.type="ir") then ($L.cond.list={"startswith"};$L.cond.display={scmsg("isin", "view"))</rev.desc>
        </rev.desc>
        <change.no type="decimal">43614</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Rally DE2595</rev.desc>
          <rev.desc sctype="string">panel: set.list.display.values</rev.desc>
          <rev.desc sctype="string">added the following expression so that the list variable will always have a value.</rev.desc>
          <rev.desc sctype="string">$return.list=nullsub($return.list, $return.display)</rev.desc>
        </rev.desc>
        <change.no type="decimal">2595</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Rally DE2531</rev.desc>
          <rev.desc sctype="string">added a parameter to pass back a flag indicating whether or not the field is an array or not.</rev.desc>
        </rev.desc>
        <change.no type="decimal">2531</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Rally DE2514</rev.desc>
          <rev.desc sctype="string">panel:  get.field.type</rev.desc>
          <rev.desc sctype="string">added the following expression to pull out the field name if the field has the filename attached.  This will allow the field to be found in the array of IR fields if it's there...and the comparison value can be set correctly.</rev.desc>
          <rev.desc sctype="string">if (index(";", $L.field.name)&gt;0) then ($L.void=strclpl($L.field.name, index(";", $L.field.name)))</rev.desc>
        </rev.desc>
        <change.no type="decimal">2514</change.no>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">remove the last modification</descript>
      <descript sctype="string">Added a new return type to indicate the current field references to a referencetable in datadict</descript>
      <descript sctype="string">The autoformat rule of a view does not work properly if you add the rule on a field with IR Key</descript>
      <descript sctype="string">panel: exit.normal</descript>
      <descript sctype="string">change the folowing to</descript>
      <descript sctype="string">if ($L.return.type="ir") then</descript>
      <descript sctype="string">(</descript>
      <descript sctype="string">$L.cond.list ={" startswith" };</descript>
      <descript sctype="string">$L.cond.display ={scmsg ("isin" , "view" )}</descript>
      <descript sctype="string">)</descript>
      <descript sctype="string"/>
      <descript sctype="string">to</descript>
      <descript sctype="string">if ($L.return.type="ir") then</descript>
      <descript sctype="string">(</descript>
      <descript sctype="string">$L.cond.list ={"isin" };</descript>
      <descript sctype="string">$L.cond.display ={scmsg ("isin" , "view" )}</descript>
      <descript sctype="string">Modified the 'exit.normal' panel so that the following expression:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">is replaced by:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">This ensures that the 'lt', 'gt', 'lte' and 'gte' values are mapped to the correct scmessage records.</descript>
      <descript sctype="string">Weihui Zhang Modified on 31.Mar.2011</descript>
      <descript sctype="string">Defect ID: 62682</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: exit.normal</descript>
      <descript sctype="string">Change the follwoing lines:</descript>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gtNum", "view"), scmsg("ltNum", "view"), scmsg("gl", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};</descript>
      <descript sctype="string">Defect ID: 60715 - Advanced Search: When selecting a field where the link has a variable as Source field, the code does not continue to the next link as a regular fill action does.</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change made:</descript>
      <descript sctype="string">Modified the check.fields and set.linkline panels of filterCriteriaDataType RAD application so that when selecting a field where the link widget has a variable as source field, the associated fill action behaves the same way a regular fill action does.</descript>
      <descript sctype="string">QCCR 60671 - Advanced Filter:  link not working all the time when selecting a field that has a matching link record</descript>
      <descript sctype="string">Panel:  set.linkline</descript>
      <descript sctype="string">Changed the following lines:</descript>
      <descript sctype="string">if ($L.source.index=0) then ($L.source.index=1)</descript>
      <descript sctype="string">1 in 1 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.source.index=0 and lng($L.index in project.source.fields in $L.new.link)&gt;0) then ($L.source.index=1)</descript>
      <descript sctype="string">if ($L.source.index&gt;0) then (1 in 1 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link) else (1 in 1 in project.source.fields in $L.link=$L.index in source.fields in $L.new.link)</descript>
      <descript sctype="string">Changed the following line:</descript>
      <descript sctype="string">1 in 2 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.source.index&gt;0) then (1 in 2 in project.source.fields in $L.link=$L.source.index in $L.index in project.source.fields in $L.new.link)</descript>
      <descript sctype="string">else (1 in 2 in project.source.fields in $L.link=$L.index in source.fields in $L.new.link)</descript>
      <descript sctype="string">Modified the 'get.IR.key' panel so that the following expressions:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.key.lng=lng(denull(key in $L.dbdict))</descript>
      <descript sctype="string">$L.ir.fields={}</descript>
      <descript sctype="string">for $L.i = 1 to $L.key.lng do (if (1 in $L.i in key in $L.dbdict=64) then ($L.field.lng=lng(denull(2 in $L.i in key in $L.dbdict));for $L.x = 1 to $L.field.lng do ($L.ir.fields=insert($L.ir.fields, 0, 1, $L.x in 2 in $L.i in key in $L.dbdict))))</descript>
      <descript sctype="string"/>
      <descript sctype="string">are replaced with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.ir.fields=jscall("tableFunctions.getIRFields", $L.filename)</descript>
      <descript sctype="string">update panel set.linkline</descript>
      <descript sctype="string">get field index value from "$L.index in project.source.fields in $L.new.link"</descript>
      <descript sctype="string">get source fields from index value location instead of hard code 1</descript>
      <descript sctype="string">Modified Panel:   exit.normal</descript>
      <descript sctype="string">Changed the following expressions:</descript>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "nneq"};$L.cond.display={scmsg("eq", "view"), scmsg("nneqLogical", "view")})</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "nneq", "gt", "lt", "gte", "lte", "isbetween", "null"};$L.cond.display={scmsg("eq", "view"), scmsg("nneq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")};$cond.list.format={"eq", "gt", "lt", "gte", "lte", "isbetween", "null"};$cond.display.format={scmsg("eq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("null", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "nneq"};$L.cond.display={scmsg("eq", "view"), scmsg("nneqLogical", "view")};$cond.list.format={"eq"};$cond.display.format={scmsg("eq", "view")})</descript>
      <descript sctype="string">Modified Panel:   exit.normal</descript>
      <descript sctype="string">QC43554</descript>
      <descript sctype="string">Indexing into a OFFSET type datum.. error message when using advanced filter</descript>
      <descript sctype="string">Modified the following expressions on the 'exit.normal' panel from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq", "null", "notnull"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween", "null", "notnull"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween", "null", "notnull"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view"), scmsg("null", "view"), scmsg("notnull", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">This will make the 'Is Empty' and 'Is Not Empty' operators available for character, date/time and number fields.</descript>
      <descript sctype="string">Modified the following expressions on the 'exit.normal' panel from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={"Contains", "Equals", "Does not Contain", "Starts With", "Does not Equal"})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=2) then ($L.cond.list={"isin", "eq", "isnotin", "startswith", "neq"};$L.cond.display={scmsg("isin", "view"), scmsg("eq", "view"), scmsg("isnotin", "view"), scmsg("startswith", "view"), scmsg("neq", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={"On", "On or After", "On or Before", "Is Between"})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=3) then ($L.cond.list={"eq", "gte", "lte", "isbetween"};$L.cond.display={scmsg("eqDate", "view"), scmsg("gteDate", "view"), scmsg("lteDate", "view"), scmsg("isbetween", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={"Equals", "Does not Equal", "Is More Than", "Is Less Than", "Is at Least", "Is at Most", "Is Between", "Is not Between"})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=1) then ($L.cond.list={"eq", "neq", "gt", "lt", "gte", "lte", "isbetween", "isnotbetween"};$L.cond.display={scmsg("eq", "view"), scmsg("neq", "view"), scmsg("gteNum", "view"), scmsg("lteNum", "view"), scmsg("gt", "view"), scmsg("lt", "view"), scmsg("isbetween", "view"), scmsg("isnotbetween", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "neq"};$L.cond.display={"Equals", "Not Equals"})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.field.type=4) then ($L.cond.list={"eq", "neq"};$L.cond.display={scmsg("eq", "view"), scmsg("neqLogical", "view")})</descript>
      <descript sctype="string"/>
      <descript sctype="string">from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.return.type="ir") then ($L.cond.list={"startswith"};$L.cond.display={"Contains"})</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if ($L.return.type="ir") then ($L.cond.list={"startswith"};$L.cond.display={scmsg("isin", "view"))</descript>
      <descript sctype="string">Rally DE2595</descript>
      <descript sctype="string">panel: set.list.display.values</descript>
      <descript sctype="string">added the following expression so that the list variable will always have a value.</descript>
      <descript sctype="string">$return.list=nullsub($return.list, $return.display)</descript>
      <descript sctype="string">Rally DE2531</descript>
      <descript sctype="string">added a parameter to pass back a flag indicating whether or not the field is an array or not.</descript>
      <descript sctype="string">Rally DE2514</descript>
      <descript sctype="string">panel:  get.field.type</descript>
      <descript sctype="string">added the following expression to pull out the field name if the field has the filename attached.  This will allow the field to be found in the array of IR fields if it's there...and the comparison value can be set correctly.</descript>
      <descript sctype="string">if (index(";", $L.field.name)&gt;0) then ($L.void=strclpl($L.field.name, index(";", $L.field.name)))</descript>
    </descript>
    <release type="string">SM7.0</release>
    <sysmodcount type="decimal">12</sysmodcount>
    <sysmoduser type="string">xingjia</sysmoduser>
    <sysmodtime type="dateTime">06/09/15 20:45:54</sysmodtime>
  </record>
</recordset>
