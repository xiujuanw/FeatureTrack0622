<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;filter.Create.Description&quot;" recordid="filter.Create.Description">
    <application.name type="string">filter.Create.Description</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">09/05/15 17:42:24</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">In a CI View, customer would like to be able to select fields from joined (attribute) tables to use in the Advanced Filter</rev.desc>
        </rev.desc>
        <change.no type="decimal">52999</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">03/30/11 14:10:48</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Weihui Zhang</rev.desc>
          <rev.desc sctype="string">Defect ID: 62862</rev.desc>
          <rev.desc sctype="string">Panel: add.negate.description</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Change the following lines:</rev.desc>
          <rev.desc sctype="string">aDescription in $L.filter=scmsg("Negate", "view")+" "+aDescription in $L.filter</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.getNot=jscall("NotExpression.convertToNot", $L.filter, $L.field.type)</rev.desc>
          <rev.desc sctype="string">aDescription in $L.filter=$L.getNot</rev.desc>
        </rev.desc>
        <change.no type="decimal">62682</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">10/09/11 22:39:48</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Mindy Huang</rev.desc>
          <rev.desc sctype="string">modify set.num.description, only output aValue2 when aValue2 is not null and operator is "isBetween"</rev.desc>
          <rev.desc sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")) else if (null(aValue2 in $L.filter) or aOperator in $L.filter~="isbetween") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">modify set.date.description, only output aValue2 when aValue2 is not null and operator is "isBetween"</rev.desc>
          <rev.desc sctype="string">if (adateType in $L.filter="date") then if (null(aValue2 in $L.filter) or aOperator in $L.filter~="isbetween") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</rev.desc>
        </rev.desc>
        <change.no type="decimal">55434</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kewell</rev.name>
        <rev.date type="dateTime">10/05/24 23:47:46</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">if ($return.type="gl" and not null($L.aValue1) and index($L.aValue1, $return.list)&gt;0) then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</rev.desc>
        </rev.desc>
        <change.no type="decimal">55379</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kewell</rev.name>
        <rev.date type="dateTime">10/05/15 23:48:06</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel: set.compound.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.date.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.ir.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.logical.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.num.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: set.string.description</rev.desc>
          <rev.desc sctype="string">Modified the exit from:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">check.negate</rev.desc>
        </rev.desc>
        <change.no type="decimal">45932</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">kewell</rev.name>
        <rev.date type="dateTime">10/05/15 23:36:52</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">aDescription in $L.filter=scmsg("Negate", "view")+" "+aDescription in $L.filter</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel: check.negate</rev.desc>
          <rev.desc sctype="string">Decision panel</rev.desc>
          <rev.desc sctype="string">Exit         add.negate.description                 Condition            aIsNegated in $L.filter</rev.desc>
          <rev.desc sctype="string">Exits normal: exit.normal                              error:    exit.error.msg</rev.desc>
        </rev.desc>
        <change.no type="decimal">45932</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">09/07/26 13:15:30</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the following panels:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* set.string.description - replaced:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")+" "+$L.aValue1</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")) else (aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")+" "+$L.aValue1)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* set.num.description - replaced:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if null(aValue2 in $L.filter) then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")) else if null(aValue2 in $L.filter) then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* set.date.description - added expression:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view"))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This will exclude the value from the description of all 'Is Empty' and 'Is Not Empty' comparisons.</rev.desc>
        </rev.desc>
        <change.no type="decimal">43671</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">09/06/07 09:56:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">recompile</rev.desc>
        </rev.desc>
        <change.no type="decimal">43370</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">09/06/07 09:53:21</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SCR43370 - Error using Advanced Filter after setting Global List field in Data Policy</rev.desc>
          <rev.desc sctype="string">start Panel:</rev.desc>
          <rev.desc sctype="string">Changed expression:</rev.desc>
          <rev.desc sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if ($return.type="gl" and not null($L.aValue1)) then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</rev.desc>
          <rev.desc sctype="string">Lulu</rev.desc>
        </rev.desc>
        <change.no type="decimal">43370</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">07/09/18 23:05:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">RALLY DE2393 - rows where a globallist without a display list were failing to display in the filter table</rev.desc>
          <rev.desc sctype="string">start panel:</rev.desc>
          <rev.desc sctype="string">updated the following expression:</rev.desc>
          <rev.desc sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=$L.index in $return.display)</rev.desc>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</rev.desc>
          <rev.desc sctype="string">Basically, if there is no display value then the value from the display list is used instead.</rev.desc>
        </rev.desc>
        <change.no type="decimal">2393</change.no>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">In a CI View, customer would like to be able to select fields from joined (attribute) tables to use in the Advanced Filter</descript>
      <descript sctype="string">Weihui Zhang</descript>
      <descript sctype="string">Defect ID: 62862</descript>
      <descript sctype="string">Panel: add.negate.description</descript>
      <descript sctype="string"/>
      <descript sctype="string">Change the following lines:</descript>
      <descript sctype="string">aDescription in $L.filter=scmsg("Negate", "view")+" "+aDescription in $L.filter</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.getNot=jscall("NotExpression.convertToNot", $L.filter, $L.field.type)</descript>
      <descript sctype="string">aDescription in $L.filter=$L.getNot</descript>
      <descript sctype="string">Mindy Huang</descript>
      <descript sctype="string">modify set.num.description, only output aValue2 when aValue2 is not null and operator is "isBetween"</descript>
      <descript sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")) else if (null(aValue2 in $L.filter) or aOperator in $L.filter~="isbetween") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</descript>
      <descript sctype="string"/>
      <descript sctype="string">modify set.date.description, only output aValue2 when aValue2 is not null and operator is "isBetween"</descript>
      <descript sctype="string">if (adateType in $L.filter="date") then if (null(aValue2 in $L.filter) or aOperator in $L.filter~="isbetween") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</descript>
      <descript sctype="string">if ($return.type="gl" and not null($L.aValue1) and index($L.aValue1, $return.list)&gt;0) then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</descript>
      <descript sctype="string">Panel: set.compound.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.date.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.ir.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.logical.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.num.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: set.string.description</descript>
      <descript sctype="string">Modified the exit from:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">check.negate</descript>
      <descript sctype="string">aDescription in $L.filter=scmsg("Negate", "view")+" "+aDescription in $L.filter</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel: check.negate</descript>
      <descript sctype="string">Decision panel</descript>
      <descript sctype="string">Exit         add.negate.description                 Condition            aIsNegated in $L.filter</descript>
      <descript sctype="string">Exits normal: exit.normal                              error:    exit.error.msg</descript>
      <descript sctype="string">Modified the following panels:</descript>
      <descript sctype="string"/>
      <descript sctype="string">* set.string.description - replaced:</descript>
      <descript sctype="string"/>
      <descript sctype="string">aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")+" "+$L.aValue1</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")) else (aDescription in $L.filter=$L.field.caption+" "+scmsg(aOperator in $L.filter, "view")+" "+$L.aValue1)</descript>
      <descript sctype="string"/>
      <descript sctype="string">* set.num.description - replaced:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if null(aValue2 in $L.filter) then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")) else if null(aValue2 in $L.filter) then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1) else (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view")+" "+$L.aValue1+" and "+aValue2 in $L.filter)</descript>
      <descript sctype="string"/>
      <descript sctype="string">* set.date.description - added expression:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (aOperator in $L.filter="null" or aOperator in $L.filter="notnull") then (aDescription in $L.filter=$L.field.caption+" "+scmsg($L.operator, "view"))</descript>
      <descript sctype="string"/>
      <descript sctype="string">This will exclude the value from the description of all 'Is Empty' and 'Is Not Empty' comparisons.</descript>
      <descript sctype="string">recompile</descript>
      <descript sctype="string">SCR43370 - Error using Advanced Filter after setting Global List field in Data Policy</descript>
      <descript sctype="string">start Panel:</descript>
      <descript sctype="string">Changed expression:</descript>
      <descript sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if ($return.type="gl" and not null($L.aValue1)) then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</descript>
      <descript sctype="string">RALLY DE2393 - rows where a globallist without a display list were failing to display in the filter table</descript>
      <descript sctype="string">start panel:</descript>
      <descript sctype="string">updated the following expression:</descript>
      <descript sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=$L.index in $return.display)</descript>
      <descript sctype="string">to</descript>
      <descript sctype="string">if ($return.type="gl") then ($L.index=index($L.aValue1, $return.list);$L.aValue1=nullsub($L.index in $return.display, $L.aValue1))</descript>
      <descript sctype="string">Basically, if there is no display value then the value from the display list is used instead.</descript>
    </descript>
    <release type="string">SM7.0</release>
    <sysmodcount type="decimal">5</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">09/10/15 18:27:50</sysmodtime>
  </record>
</recordset>
