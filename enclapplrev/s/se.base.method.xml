<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;se.base.method&quot;" recordid="se.base.method">
    <application.name type="string">se.base.method</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">10/17/19 21:02:50</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel: set.active and post.auto.transitions</rev.desc>
          <rev.desc sctype="string">Change</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (approval.location in $L.object={"record", "category", "phase", "object"}) then</rev.desc>
          <rev.desc sctype="string">$L.has.approvals=true</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">if (approval.location in $L.object={"record", "category", "phase", "object"}) then</rev.desc>
          <rev.desc sctype="string">if null(approval.condition in $L.object) then</rev.desc>
          <rev.desc sctype="string">(</rev.desc>
          <rev.desc sctype="string">$L.has.approvals=true</rev.desc>
          <rev.desc sctype="string">)</rev.desc>
        </rev.desc>
        <change.no type="decimal">157015</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">06/07/18 08:57:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update panel check.activity.pre, append condition:</rev.desc>
          <rev.desc sctype="string">not  (($L.bg and ($axces.bypass.failed.validation or $bypass.failed.validation)))</rev.desc>
        </rev.desc>
        <change.no type="decimal">143428</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">12/19/17 20:15:18</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Optimized workflow save will can be canceled by global variable "$G.wf.optimize.autotran.save"</rev.desc>
          <rev.desc sctype="string">Panel: setup.workflow</rev.desc>
          <rev.desc sctype="string">Change</rev.desc>
          <rev.desc sctype="string">$L.wf.optimize.autotran.save=nullsub($L.wf.optimize.autotran.save, true)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">To</rev.desc>
          <rev.desc sctype="string">$L.wf.optimize.autotran.save=nullsub(nullsub($L.wf.optimize.autotran.save, $G.wf.optimize.autotran.save), true)</rev.desc>
        </rev.desc>
        <change.no type="decimal">144463</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">miquan</rev.name>
        <rev.date type="dateTime">12/10/15 02:58:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Update Approvals:</rev.desc>
          <rev.desc sctype="string">change evaluate  to  evalulate(parse(str(),2))</rev.desc>
        </rev.desc>
        <change.no type="decimal">129029</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">06/22/15 22:34:48</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E124708, Hide the check box of Optimizing two saves  and always optimizing the save in the backend</rev.desc>
        </rev.desc>
        <change.no type="decimal">124708</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">06/22/15 00:12:32</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E124501, approval in current phase is not triggered when auto transition move to next phase when optimize save enabled.</rev.desc>
        </rev.desc>
        <change.no type="decimal">124501</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">06/14/15 18:27:57</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E124394, alert in current phase is not triggered when auto transition move to next phase</rev.desc>
        </rev.desc>
        <change.no type="decimal">124394</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">05/31/15 11:43:18</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E123798, $L.phase value is incorrect on display when add incident but failed validation on default transition.</rev.desc>
        </rev.desc>
        <change.no type="decimal">123798</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">05/25/15 01:06:11</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E123587, $L.wfPhase and $L.wfPhase.save are incorrect if enable optimize save for auto-transition.</rev.desc>
        </rev.desc>
        <change.no type="decimal">123587</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">05/24/15 01:11:43</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E123584, object varaiable cannot be shared between each rule states</rev.desc>
        </rev.desc>
        <change.no type="decimal">123584</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">05/12/15 01:29:53</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">[Performance Improvement] merge 2 save into 1 save for auto-transition</rev.desc>
        </rev.desc>
        <change.no type="decimal">123015</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">huanghao</rev.name>
        <rev.date type="dateTime">04/11/15 15:50:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">AGM 3610:</rev.desc>
          <rev.desc sctype="string">add assignmentlog on panel start, to log assigment change.</rev.desc>
          <rev.desc sctype="string">add $assignmentlogged on panel cleanup, to handle record update/add failed scenario</rev.desc>
        </rev.desc>
        <change.no type="decimal">3610</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">03/08/15 19:44:57</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update panel check.workflowHistory, add condition:</rev.desc>
          <rev.desc sctype="string">and not (null($L.wfPhase))</rev.desc>
        </rev.desc>
        <change.no type="decimal">120746</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">01/20/15 04:05:39</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">support legacy workflow options to enahnce for wrapper PD</rev.desc>
        </rev.desc>
        <change.no type="decimal">104048</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">11/07/14 20:01:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">use setvariables and getvariables to avoid too many parse/evaluate call which cause performance issue.</rev.desc>
        </rev.desc>
        <change.no type="decimal">118024</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">09/09/14 09:44:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">rollback the cust.visible</rev.desc>
        </rev.desc>
        <change.no type="decimal">109568</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">08/10/14 15:15:17</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Remove custom'visible</rev.desc>
        </rev.desc>
        <change.no type="decimal">109568</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjielcon</rev.name>
        <rev.date type="dateTime">07/29/14 10:41:19</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">support After successful add at table/workflow/workflowphase level.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">07/25/14 14:44:46</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">support table level rulesets/actions</rev.desc>
        </rev.desc>
        <change.no type="decimal">100940</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">07/18/14 12:53:19</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">parse the $L.mode into calling Ruleset.run.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">06/28/14 03:15:48</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">need to save the record first before manually moving phase.</rev.desc>
          <rev.desc sctype="string">-- change the order of post rules and FC subroutine, make sure the Post rule is executed prior to the FC subroutine.</rev.desc>
        </rev.desc>
        <change.no type="decimal">95960</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">xiongjie</rev.name>
        <rev.date type="dateTime">06/13/14 03:37:57</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">add workflow level on-enter and on-exit.</rev.desc>
        </rev.desc>
        <change.no type="decimal">105428</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">miquan</rev.name>
        <rev.date type="dateTime">04/10/14 22:33:55</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel: set.active, add</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (filename($L.file)="request" and (null(model in $L.file.save) and not  (null(model in $L.file)))) then</rev.desc>
          <rev.desc sctype="string">(</rev.desc>
          <rev.desc sctype="string">$L.has.approvals.model=true</rev.desc>
          <rev.desc sctype="string">)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (filename($L.file)="request" and (not  (null(model in $L.file.save)) and not  (null(model in $L.file)) and model in $L.file~=model in $L.file.save)) then</rev.desc>
          <rev.desc sctype="string">(</rev.desc>
          <rev.desc sctype="string">$L.has.approvals.model=true</rev.desc>
          <rev.desc sctype="string">)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel:size.check   change from: $L.has.approvals to: $L.has.approvals or $L.has.approvals.model=true</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">update.approvals  condition change from: evaluate(approval.reset in $L.object) to: evaluate(approval.reset in $L.object) or $L.has.approvals.model=true</rev.desc>
        </rev.desc>
        <change.no type="decimal">96984</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">03/19/14 19:41:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel: setup.workflow</rev.desc>
          <rev.desc sctype="string">don't pass $L.file into javascript.</rev.desc>
        </rev.desc>
        <change.no type="decimal">105946</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhangqi</rev.name>
        <rev.date type="dateTime">01/23/14 17:01:53</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">set new parameter value to "exit.normal" in 3 Ruleset.runMultiple panels.</rev.desc>
        </rev.desc>
        <change.no type="decimal">102033</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">panjun</rev.name>
        <rev.date type="dateTime">03/17/13 20:21:55</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">setup.workflow</rev.desc>
          <rev.desc sctype="string">if the workflow exists, set $L.worklow for gloabl rules.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">panjun</rev.name>
        <rev.date type="dateTime">03/16/13 13:53:34</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">update to run add and successful add ruleset.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">panjun</rev.name>
        <rev.date type="dateTime">02/26/13 01:49:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel/set.active</rev.desc>
          <rev.desc sctype="string">change active field to record.active to avoid the system field conflict.</rev.desc>
        </rev.desc>
        <change.no type="decimal">91544</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">10/26/12 23:42:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Rule is triggered on add action though the workflow is set to trigger on update condition</rev.desc>
          <rev.desc sctype="string">Panel:add record</rev.desc>
          <rev.desc sctype="string">$L.wfMode=nullsub($L.wfMode, "add")</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.wfMode="add"</rev.desc>
        </rev.desc>
        <change.no type="decimal">65699</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">miquan</rev.name>
        <rev.date type="dateTime">12/13/11 20:46:24</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Add  in panel:start</rev.desc>
          <rev.desc sctype="string">$L.category=nullsub($L.category ,1 in $INTO.CATPHASE)</rev.desc>
          <rev.desc sctype="string">$L.phase=nullsub($L.phase ,2 in $INTO.CATPHASE)</rev.desc>
        </rev.desc>
        <change.no type="decimal">70902</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">11/23/11 10:56:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E70089 - Approval status no updating on tasks.</rev.desc>
          <rev.desc sctype="string">Panel:	set.active</rev.desc>
          <rev.desc sctype="string">Change:Changed the following expression from:if (not $L.has.approvals and $L.has.workflow) then ($L.has.approvals=not null(denull(approval in $L.wfPhase)))To:if (not $L.has.approvals and $L.has.workflow) then ($L.has.approvals=not null(denull(approvals in $L.wfPhase)))</rev.desc>
        </rev.desc>
        <change.no type="decimal">70089</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">11/16/11 10:19:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR1E70090 - Ensure approval status is set correctly.</rev.desc>
          <rev.desc sctype="string">Panel:	set.active</rev.desc>
          <rev.desc sctype="string">Change:Changed expression from:$L.has.approvals=falseTo:$L.has.approvals=evaluate(nullsub(approval.condition in $L.object, "false"))</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">08/25/11 22:19:39</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added workflow phase to alert schedule routine</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">08/11/11 03:01:35</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">cm3r and cm3t records should display the unique ID as part of the add/update message.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">05/20/11 17:32:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added additional str around messages in case the unique key is not a string.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">04/19/11 12:50:35</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the check.alerts panel to call add.standard.alerts.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">04/14/11 11:30:18</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">pass the object record when calling RuleSet.runMultiple</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">03/23/11 04:53:20</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Only use the improved message for kmdocument for now.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">02/25/11 23:54:26</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added ability to set $L.exit.when.done in rules and pass back to view engine.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">02/25/11 20:30:21</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fix to call the correct rules on save (was ignoring transition rules).</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">01/30/11 02:04:38</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added support for approvals and alerts.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">10/14/10 12:07:38</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Hua: support approval from workflow</rev.desc>
        </rev.desc>
        <change.no type="decimal">51433</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">10/11/10 07:21:55</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Hua: on panle setup workflow, added a condition not null($L.file.save)</rev.desc>
        </rev.desc>
        <change.no type="decimal">51206</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">09/15/10 13:11:42</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added missing panel (add.record)</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">06/20/10 05:24:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Story: 26536 - Enhanced Application Framework (EAF)</rev.desc>
          <rev.desc sctype="string">45871 - merge EAF code to Henry branch</rev.desc>
          <rev.desc sctype="string">Task:  46242 - DEV:  load in eafDocEngine unload</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   call.activity.update.check</rev.desc>
          <rev.desc sctype="string">Changed exit from:   size.check</rev.desc>
          <rev.desc sctype="string">To:   set.active</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   check.activity.pre</rev.desc>
          <rev.desc sctype="string">Changed exits from:   size.check</rev.desc>
          <rev.desc sctype="string">To:   set.active</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   decide.call.fc.sub.upd</rev.desc>
          <rev.desc sctype="string">Changed exit from:   dup.after.save</rev.desc>
          <rev.desc sctype="string">To:   setup.post.rules</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   decide.save.fc</rev.desc>
          <rev.desc sctype="string">Changed the following conditions for exit:</rev.desc>
          <rev.desc sctype="string">From:</rev.desc>
          <rev.desc sctype="string">$L.mode#"add" or $L.mode#"open"</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.mode#"add" or ($L.mode#"open" or $L.wfMode="open")</rev.desc>
          <rev.desc sctype="string">From:</rev.desc>
          <rev.desc sctype="string">$L.mode#"close"</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.mode#"close" or $L.wfMode="close"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   dup.after.save</rev.desc>
          <rev.desc sctype="string">Added the following expressions:</rev.desc>
          <rev.desc sctype="string">if (not null($L.wfPhase)) then if exists("current.phase", $L.file) then if (not same(current.phase in $L.file, current.phase in $L.file.save)) then ($L.exit="wfPhaseChange")</rev.desc>
          <rev.desc sctype="string">Changed the exit from:    check.add.page</rev.desc>
          <rev.desc sctype="string">To:   check.workflowHistory</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   exit.normal</rev.desc>
          <rev.desc sctype="string">Added the following expression:</rev.desc>
          <rev.desc sctype="string">3 in $INTO.CATPHASE=$L.wfPhase</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   run.fc.sub.upd</rev.desc>
          <rev.desc sctype="string">Changed the exit from:    dup.after.save</rev.desc>
          <rev.desc sctype="string">To:   setup.post.rules</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   size.check</rev.desc>
          <rev.desc sctype="string">Changed the following conditions for exit:</rev.desc>
          <rev.desc sctype="string">From:</rev.desc>
          <rev.desc sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object"}</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object", "wfPhase"}</rev.desc>
          <rev.desc sctype="string">From:</rev.desc>
          <rev.desc sctype="string">approval.location in $L.object={"record", "category", "phase", "object"}</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">approval.location in $L.object={"record", "category", "phase", "object", "wfPhase"}</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   start</rev.desc>
          <rev.desc sctype="string">Replaced the following expressions:</rev.desc>
          <rev.desc sctype="string">From:</rev.desc>
          <rev.desc sctype="string">$L.object.name=1 in $INTO.VARS;$L.save.mode=2 in $INTO.VARS;$L.orig.format=3 in $INTO.VARS;$L.category=4 in $INTO.VARS;$L.phase=5 in $INTO.VARS</rev.desc>
          <rev.desc sctype="string">$L.parent=6 in $INTO.VARS</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">if (null($INTO.VALUES) and not null($INTO.NAMES)) then ($INTO.VALUES=$INTO.NAMES;$INTO.NAMES={"$L.object.name", "$L.save.mode", "$L.orig.format", "$L.category", "$L.phase"})</rev.desc>
          <rev.desc sctype="string">$L.names=$INTO.NAMES;$L.values=$INTO.VALUES</rev.desc>
          <rev.desc sctype="string">for $L.ds.i = 1 to lng(denull($INTO.NAMES)) do ($L.ds.var=$L.ds.i in $INTO.VALUES;$L.ds.nme=nullsub($L.ds.i in $INTO.NAMES, "$L.var"+str($L.ds.i));$L.ds.junk=evaluate(parse($L.ds.nme+"=$L.ds.var", 11)))</rev.desc>
          <rev.desc sctype="string">Changed exit from:</rev.desc>
          <rev.desc sctype="string">decide.action</rev.desc>
          <rev.desc sctype="string">To:</rev.desc>
          <rev.desc sctype="string">setup.workflow</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   add.record</rev.desc>
          <rev.desc sctype="string">renamed it add.record.1 and added an intermediate process panel</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:   save.record</rev.desc>
          <rev.desc sctype="string">renamed it save.record.1 and added an intermediate process panel</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">New Panels:</rev.desc>
          <rev.desc sctype="string">add.history</rev.desc>
          <rev.desc sctype="string">add.history.1</rev.desc>
          <rev.desc sctype="string">add.record</rev.desc>
          <rev.desc sctype="string">add.record.1</rev.desc>
          <rev.desc sctype="string">check.newPhase</rev.desc>
          <rev.desc sctype="string">check.workflowHistory</rev.desc>
          <rev.desc sctype="string">get.new.phase</rev.desc>
          <rev.desc sctype="string">run.add.rules</rev.desc>
          <rev.desc sctype="string">run.post.rules</rev.desc>
          <rev.desc sctype="string">run.save.rules</rev.desc>
          <rev.desc sctype="string">save.record</rev.desc>
          <rev.desc sctype="string">save.record.1</rev.desc>
          <rev.desc sctype="string">set.active</rev.desc>
          <rev.desc sctype="string">setup.post.rules</rev.desc>
          <rev.desc sctype="string">setup.workflow</rev.desc>
        </rev.desc>
        <change.no type="decimal">26536</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">06/16/08 18:46:51</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed infinite loop when recalc.approvals is set</rev.desc>
          <rev.desc sctype="string">Panel set.recalc</rev.desc>
          <rev.desc sctype="string">Changed normal exit from update.approvals to update.approvals.gen</rev.desc>
        </rev.desc>
        <change.no type="decimal">41720</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">12/29/06 05:34:33</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed $L.object.name to use the tablename scmessage object.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">11/06/06 03:43:32</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel send.notification</rev.desc>
          <rev.desc sctype="string">Passed in $L.object.name as an additional parameter.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">05/16/06 13:32:42</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel:  decide.action</rev.desc>
          <rev.desc sctype="string">the first exit was changed to lock.record which locked a record EVERY time it was updated and never unlocked it.  I changed the exit back to what it was originally...save.record.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">03/17/06 01:55:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed logic so that resetting approvals updates record and doesn't try to re-add it.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/12/05 17:10:06</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added the ability to modify the delete warning message by setting the $se.base.method.delete.msg variable before calling se.base.method.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">joeh</rev.name>
        <rev.date type="dateTime">05/01/05 20:05:32</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">I2145 on DEVTX</rev.desc>
          <rev.desc sctype="string">Added to the changed panel:</rev.desc>
          <rev.desc sctype="string">$L.did.change=true</rev.desc>
          <rev.desc sctype="string">Added to exit.bad.val panel:</rev.desc>
          <rev.desc sctype="string">if ($L.did.change=true) then ($L.exit="changed")</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">joeh</rev.name>
        <rev.date type="dateTime">04/13/05 18:20:31</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">devtx 6.1  I1768</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:</rev.desc>
          <rev.desc sctype="string">added.msg</rev.desc>
          <rev.desc sctype="string">Added 5th line:</rev.desc>
          <rev.desc sctype="string">$L.mode="update"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Panel:</rev.desc>
          <rev.desc sctype="string">exit.normal</rev.desc>
          <rev.desc sctype="string">Removed 3rd line:</rev.desc>
          <rev.desc sctype="string">if (not exists("State", $L.file)) then ($L.mode="update")</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">01/16/05 08:22:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added in hook for ioevents processing.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">01/14/05 07:10:57</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added:   cust.visible in $L.file</rev.desc>
          <rev.desc sctype="string">for the "Customer Visible?" parm passed into sc.activity</rev.desc>
        </rev.desc>
        <change.no type="decimal">33637</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">01/11/05 08:03:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added flag ($L.bypass.activity) to handle bypassing of activity calls.</rev.desc>
        </rev.desc>
        <change.no type="decimal">33637</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">01/08/05 09:00:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added calls to sc.activity.</rev.desc>
        </rev.desc>
        <change.no type="decimal">33637</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">01/07/05 08:28:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">$L.file was being set to $L.file.save before alerts were called which meant that $L.file.save couldn't be  used in the reset.alerts field since it was the same as $L.file.</rev.desc>
          <rev.desc sctype="string">updated the dup.after.save panel to set a flag $L.dup.after.save=true</rev.desc>
          <rev.desc sctype="string">Then on the exit.normal panel the normal processing that was done on the dup.after.save panel is done here if the flag was set to true</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">01/03/05 07:57:38</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added the $L.file.save variable to parameters passed to alert.schedule.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/19/04 14:16:25</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modfied so that during a "save" the format control checks will go against the Add mode when $L.mode#"add" or $L.mode#"open", and against the Delete mode when $L.mode#"close".  Otherwise will still go against the Update mode.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">10/12/04 14:04:26</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">changed references to '$L.fc.master' to '$L.master.fc'</rev.desc>
        </rev.desc>
        <change.no type="decimal">33680</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">10/12/04 13:52:38</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">modified to only call the regular format control record if it is different than the master format control record.</rev.desc>
          <rev.desc sctype="string">panel: run.master.fc</rev.desc>
          <rev.desc sctype="string">changed normal exit from 'save.fc' to 'check.save.fc'</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel: check.save.fc (added decision panel)</rev.desc>
          <rev.desc sctype="string">exit: save.fc</rev.desc>
          <rev.desc sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</rev.desc>
          <rev.desc sctype="string">normal exit: size.check</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel: add.master.fc</rev.desc>
          <rev.desc sctype="string">changed normal exit from 'add.fc' to 'check.add.fc'</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel: check.add.fc (added decision panel)</rev.desc>
          <rev.desc sctype="string">exit: add.fc</rev.desc>
          <rev.desc sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</rev.desc>
          <rev.desc sctype="string">normal exit: size.check</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel: delete.master.fc</rev.desc>
          <rev.desc sctype="string">changed normal exit from 'delete.record.fc' to 'check.delete.record.fc'</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">panel: check.delete.record.fc (added decision panel)</rev.desc>
          <rev.desc sctype="string">exit: delete.record.fc</rev.desc>
          <rev.desc sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</rev.desc>
          <rev.desc sctype="string">normal exit: delete.record.rdel</rev.desc>
        </rev.desc>
        <change.no type="decimal">33680</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">10/12/04 13:10:13</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">no changes</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/09/04 17:42:23</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">no changes</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">08/01/04 18:28:49</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panels:</rev.desc>
          <rev.desc sctype="string">check.save.relation</rev.desc>
          <rev.desc sctype="string">updated.suppress</rev.desc>
          <rev.desc sctype="string">send.notification</rev.desc>
          <rev.desc sctype="string">save.relation</rev.desc>
          <rev.desc sctype="string">changed normal exit for these panels from 'run.fc.sub.upd'</rev.desc>
          <rev.desc sctype="string">to: 'run.fc.sub.upd.master'</rev.desc>
        </rev.desc>
        <change.no type="decimal">27791</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">08/01/04 18:20:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel: updated.msg.1</rev.desc>
          <rev.desc sctype="string">changed normal exit to:  run.fc.sub.upd.master</rev.desc>
          <rev.desc sctype="string">panel: run.fc.sub.upd.master</rev.desc>
          <rev.desc sctype="string">changed normal exit to: decide.call.fc.sub.upd</rev.desc>
          <rev.desc sctype="string">error exit: exit.bad.val</rev.desc>
          <rev.desc sctype="string">panel: decide.call.fc.sub.upd (added panel...decision panel)</rev.desc>
          <rev.desc sctype="string">exit:  run.fc.sub.upd</rev.desc>
          <rev.desc sctype="string">cond: not same($L.master.fc, $L.fc)</rev.desc>
          <rev.desc sctype="string">normal exit: dup.after.save</rev.desc>
          <rev.desc sctype="string">panel: run.fc.sub.upd</rev.desc>
          <rev.desc sctype="string">changed normal exit to: dup.after.save</rev.desc>
          <rev.desc sctype="string">error exit: exit.bad.val</rev.desc>
        </rev.desc>
        <change.no type="decimal">27791</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">06/19/04 20:21:29</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added ability to send notfications when defined in object record.</rev.desc>
        </rev.desc>
        <change.no type="decimal">32021</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">06/07/04 18:38:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel:  size.check</rev.desc>
          <rev.desc sctype="string">Changed thd condition for the 'add.approvals' exit from:</rev.desc>
          <rev.desc sctype="string">approval.location in $L.object={"record", "category", "phase", "object"}</rev.desc>
          <rev.desc sctype="string">to</rev.desc>
          <rev.desc sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object"}</rev.desc>
        </rev.desc>
        <change.no type="decimal">28202</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">06/01/04 14:03:39</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added $L.mode to the Mode parm on the schedule.alerts panel.</rev.desc>
        </rev.desc>
        <change.no type="decimal">29426</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cfullert</rev.name>
        <rev.date type="dateTime">04/25/04 19:46:57</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">$L.related.id was misspelled on the start panel as: $L.related.id.</rev.desc>
          <rev.desc sctype="string">removed the '.' at the end.</rev.desc>
        </rev.desc>
        <change.no type="decimal">30174</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">03/13/04 02:11:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Get Object Name from Object record if not passed in.</rev.desc>
        </rev.desc>
        <change.no type="decimal">14290</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">01/23/04 06:24:59</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Recompile only.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/21/03 19:29:12</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Now calls post action subroutines for master format control.</rev.desc>
        </rev.desc>
        <change.no type="decimal">26434</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">09/30/03 18:44:47</rev.date>
        <rev.desc sctype="array"/>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">09/27/03 12:56:59</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Was not passing back the $L.file.save variable correctly.  Added statement in exit.normal to make sure it was passed back.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">07/21/03 17:50:02</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">No longer recopies save copy of record in background.  Requested by SOAP external transaction developers.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">04/20/03 19:18:45</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added a message suppress flag - if true, no messages of any type are sent; defaults to false.</rev.desc>
        </rev.desc>
        <change.no type="decimal">28148</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">04/20/03 17:16:19</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Changed start expression to use not same instead of ~= to compare formatctrl records.</rev.desc>
        </rev.desc>
        <change.no type="decimal">25809</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">03/24/03 08:03:31</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the $L.exit to "added" after adding a record.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">02/23/03 05:36:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Nullsubed $axces.bypass.failed.validation and $bypass.failed.validation to false.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">02/22/03 08:33:04</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On decide.action, added "update" to the list of $L.action values that exit to save.record.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/19/02 09:35:30</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added base approvals and alerts.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">10/16/02 13:49:47</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added checks and calls to master format control.</rev.desc>
        </rev.desc>
        <change.no type="decimal">23565</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">09/30/02 15:06:44</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Set $L.exit to "resetrec" on added.msg to return the record back to browse mode after it gets added to the system.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">Panel: set.active and post.auto.transitions</descript>
      <descript sctype="string">Change</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (approval.location in $L.object={"record", "category", "phase", "object"}) then</descript>
      <descript sctype="string">$L.has.approvals=true</descript>
      <descript sctype="string"/>
      <descript sctype="string">to</descript>
      <descript sctype="string">if (approval.location in $L.object={"record", "category", "phase", "object"}) then</descript>
      <descript sctype="string">if null(approval.condition in $L.object) then</descript>
      <descript sctype="string">(</descript>
      <descript sctype="string">$L.has.approvals=true</descript>
      <descript sctype="string">)</descript>
      <descript sctype="string">update panel check.activity.pre, append condition:</descript>
      <descript sctype="string">not  (($L.bg and ($axces.bypass.failed.validation or $bypass.failed.validation)))</descript>
      <descript sctype="string">Optimized workflow save will can be canceled by global variable "$G.wf.optimize.autotran.save"</descript>
      <descript sctype="string">Panel: setup.workflow</descript>
      <descript sctype="string">Change</descript>
      <descript sctype="string">$L.wf.optimize.autotran.save=nullsub($L.wf.optimize.autotran.save, true)</descript>
      <descript sctype="string"/>
      <descript sctype="string">To</descript>
      <descript sctype="string">$L.wf.optimize.autotran.save=nullsub(nullsub($L.wf.optimize.autotran.save, $G.wf.optimize.autotran.save), true)</descript>
      <descript sctype="string">Update Approvals:</descript>
      <descript sctype="string">change evaluate  to  evalulate(parse(str(),2))</descript>
      <descript sctype="string">QCCR1E124708, Hide the check box of Optimizing two saves  and always optimizing the save in the backend</descript>
      <descript sctype="string">QCCR1E124501, approval in current phase is not triggered when auto transition move to next phase when optimize save enabled.</descript>
      <descript sctype="string">QCCR1E124394, alert in current phase is not triggered when auto transition move to next phase</descript>
      <descript sctype="string">QCCR1E123798, $L.phase value is incorrect on display when add incident but failed validation on default transition.</descript>
      <descript sctype="string">QCCR1E123587, $L.wfPhase and $L.wfPhase.save are incorrect if enable optimize save for auto-transition.</descript>
      <descript sctype="string">QCCR1E123584, object varaiable cannot be shared between each rule states</descript>
      <descript sctype="string">[Performance Improvement] merge 2 save into 1 save for auto-transition</descript>
      <descript sctype="string">AGM 3610:</descript>
      <descript sctype="string">add assignmentlog on panel start, to log assigment change.</descript>
      <descript sctype="string">add $assignmentlogged on panel cleanup, to handle record update/add failed scenario</descript>
      <descript sctype="string">update panel check.workflowHistory, add condition:</descript>
      <descript sctype="string">and not (null($L.wfPhase))</descript>
      <descript sctype="string">support legacy workflow options to enahnce for wrapper PD</descript>
      <descript sctype="string">use setvariables and getvariables to avoid too many parse/evaluate call which cause performance issue.</descript>
      <descript sctype="string">rollback the cust.visible</descript>
      <descript sctype="string">Remove custom'visible</descript>
      <descript sctype="string">support After successful add at table/workflow/workflowphase level.</descript>
      <descript sctype="string">support table level rulesets/actions</descript>
      <descript sctype="string">parse the $L.mode into calling Ruleset.run.</descript>
      <descript sctype="string">need to save the record first before manually moving phase.</descript>
      <descript sctype="string">-- change the order of post rules and FC subroutine, make sure the Post rule is executed prior to the FC subroutine.</descript>
      <descript sctype="string">add workflow level on-enter and on-exit.</descript>
      <descript sctype="string">panel: set.active, add</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (filename($L.file)="request" and (null(model in $L.file.save) and not  (null(model in $L.file)))) then</descript>
      <descript sctype="string">(</descript>
      <descript sctype="string">$L.has.approvals.model=true</descript>
      <descript sctype="string">)</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (filename($L.file)="request" and (not  (null(model in $L.file.save)) and not  (null(model in $L.file)) and model in $L.file~=model in $L.file.save)) then</descript>
      <descript sctype="string">(</descript>
      <descript sctype="string">$L.has.approvals.model=true</descript>
      <descript sctype="string">)</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">panel:size.check   change from: $L.has.approvals to: $L.has.approvals or $L.has.approvals.model=true</descript>
      <descript sctype="string"/>
      <descript sctype="string"/>
      <descript sctype="string">update.approvals  condition change from: evaluate(approval.reset in $L.object) to: evaluate(approval.reset in $L.object) or $L.has.approvals.model=true</descript>
      <descript sctype="string">set new parameter value to "exit.normal" in 3 Ruleset.runMultiple panels.</descript>
      <descript sctype="string">setup.workflow</descript>
      <descript sctype="string">if the workflow exists, set $L.worklow for gloabl rules.</descript>
      <descript sctype="string">update to run add and successful add ruleset.</descript>
      <descript sctype="string">panel/set.active</descript>
      <descript sctype="string">change active field to record.active to avoid the system field conflict.</descript>
      <descript sctype="string">Rule is triggered on add action though the workflow is set to trigger on update condition</descript>
      <descript sctype="string">Panel:add record</descript>
      <descript sctype="string">$L.wfMode=nullsub($L.wfMode, "add")</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.wfMode="add"</descript>
      <descript sctype="string">Add  in panel:start</descript>
      <descript sctype="string">$L.category=nullsub($L.category ,1 in $INTO.CATPHASE)</descript>
      <descript sctype="string">$L.phase=nullsub($L.phase ,2 in $INTO.CATPHASE)</descript>
      <descript sctype="string">QCCR1E70089 - Approval status no updating on tasks.</descript>
      <descript sctype="string">Panel:	set.active</descript>
      <descript sctype="string">Change:Changed the following expression from:if (not $L.has.approvals and $L.has.workflow) then ($L.has.approvals=not null(denull(approval in $L.wfPhase)))To:if (not $L.has.approvals and $L.has.workflow) then ($L.has.approvals=not null(denull(approvals in $L.wfPhase)))QCCR1E70090 - Ensure approval status is set correctly.</descript>
      <descript sctype="string">Panel:	set.active</descript>
      <descript sctype="string">Change:Changed expression from:$L.has.approvals=falseTo:$L.has.approvals=evaluate(nullsub(approval.condition in $L.object, "false"))Added workflow phase to alert schedule routine</descript>
      <descript sctype="string">cm3r and cm3t records should display the unique ID as part of the add/update message.</descript>
      <descript sctype="string">Added additional str around messages in case the unique key is not a string.</descript>
      <descript sctype="string">Modified the check.alerts panel to call add.standard.alerts.</descript>
      <descript sctype="string">pass the object record when calling RuleSet.runMultiple</descript>
      <descript sctype="string">Only use the improved message for kmdocument for now.</descript>
      <descript sctype="string">Added ability to set $L.exit.when.done in rules and pass back to view engine.</descript>
      <descript sctype="string">Fix to call the correct rules on save (was ignoring transition rules).</descript>
      <descript sctype="string">Added support for approvals and alerts.</descript>
      <descript sctype="string">Hua: support approval from workflow</descript>
      <descript sctype="string">Hua: on panle setup workflow, added a condition not null($L.file.save)</descript>
      <descript sctype="string">Added missing panel (add.record)</descript>
      <descript sctype="string">Story: 26536 - Enhanced Application Framework (EAF)</descript>
      <descript sctype="string">45871 - merge EAF code to Henry branch</descript>
      <descript sctype="string">Task:  46242 - DEV:  load in eafDocEngine unload</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   call.activity.update.check</descript>
      <descript sctype="string">Changed exit from:   size.check</descript>
      <descript sctype="string">To:   set.active</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   check.activity.pre</descript>
      <descript sctype="string">Changed exits from:   size.check</descript>
      <descript sctype="string">To:   set.active</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   decide.call.fc.sub.upd</descript>
      <descript sctype="string">Changed exit from:   dup.after.save</descript>
      <descript sctype="string">To:   setup.post.rules</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   decide.save.fc</descript>
      <descript sctype="string">Changed the following conditions for exit:</descript>
      <descript sctype="string">From:</descript>
      <descript sctype="string">$L.mode#"add" or $L.mode#"open"</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.mode#"add" or ($L.mode#"open" or $L.wfMode="open")</descript>
      <descript sctype="string">From:</descript>
      <descript sctype="string">$L.mode#"close"</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.mode#"close" or $L.wfMode="close"</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   dup.after.save</descript>
      <descript sctype="string">Added the following expressions:</descript>
      <descript sctype="string">if (not null($L.wfPhase)) then if exists("current.phase", $L.file) then if (not same(current.phase in $L.file, current.phase in $L.file.save)) then ($L.exit="wfPhaseChange")</descript>
      <descript sctype="string">Changed the exit from:    check.add.page</descript>
      <descript sctype="string">To:   check.workflowHistory</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   exit.normal</descript>
      <descript sctype="string">Added the following expression:</descript>
      <descript sctype="string">3 in $INTO.CATPHASE=$L.wfPhase</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   run.fc.sub.upd</descript>
      <descript sctype="string">Changed the exit from:    dup.after.save</descript>
      <descript sctype="string">To:   setup.post.rules</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   size.check</descript>
      <descript sctype="string">Changed the following conditions for exit:</descript>
      <descript sctype="string">From:</descript>
      <descript sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object"}</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object", "wfPhase"}</descript>
      <descript sctype="string">From:</descript>
      <descript sctype="string">approval.location in $L.object={"record", "category", "phase", "object"}</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">approval.location in $L.object={"record", "category", "phase", "object", "wfPhase"}</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   start</descript>
      <descript sctype="string">Replaced the following expressions:</descript>
      <descript sctype="string">From:</descript>
      <descript sctype="string">$L.object.name=1 in $INTO.VARS;$L.save.mode=2 in $INTO.VARS;$L.orig.format=3 in $INTO.VARS;$L.category=4 in $INTO.VARS;$L.phase=5 in $INTO.VARS</descript>
      <descript sctype="string">$L.parent=6 in $INTO.VARS</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">if (null($INTO.VALUES) and not null($INTO.NAMES)) then ($INTO.VALUES=$INTO.NAMES;$INTO.NAMES={"$L.object.name", "$L.save.mode", "$L.orig.format", "$L.category", "$L.phase"})</descript>
      <descript sctype="string">$L.names=$INTO.NAMES;$L.values=$INTO.VALUES</descript>
      <descript sctype="string">for $L.ds.i = 1 to lng(denull($INTO.NAMES)) do ($L.ds.var=$L.ds.i in $INTO.VALUES;$L.ds.nme=nullsub($L.ds.i in $INTO.NAMES, "$L.var"+str($L.ds.i));$L.ds.junk=evaluate(parse($L.ds.nme+"=$L.ds.var", 11)))</descript>
      <descript sctype="string">Changed exit from:</descript>
      <descript sctype="string">decide.action</descript>
      <descript sctype="string">To:</descript>
      <descript sctype="string">setup.workflow</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   add.record</descript>
      <descript sctype="string">renamed it add.record.1 and added an intermediate process panel</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:   save.record</descript>
      <descript sctype="string">renamed it save.record.1 and added an intermediate process panel</descript>
      <descript sctype="string"/>
      <descript sctype="string">New Panels:</descript>
      <descript sctype="string">add.history</descript>
      <descript sctype="string">add.history.1</descript>
      <descript sctype="string">add.record</descript>
      <descript sctype="string">add.record.1</descript>
      <descript sctype="string">check.newPhase</descript>
      <descript sctype="string">check.workflowHistory</descript>
      <descript sctype="string">get.new.phase</descript>
      <descript sctype="string">run.add.rules</descript>
      <descript sctype="string">run.post.rules</descript>
      <descript sctype="string">run.save.rules</descript>
      <descript sctype="string">save.record</descript>
      <descript sctype="string">save.record.1</descript>
      <descript sctype="string">set.active</descript>
      <descript sctype="string">setup.post.rules</descript>
      <descript sctype="string">setup.workflow</descript>
      <descript sctype="string">Fixed infinite loop when recalc.approvals is set</descript>
      <descript sctype="string">Panel set.recalc</descript>
      <descript sctype="string">Changed normal exit from update.approvals to update.approvals.gen</descript>
      <descript sctype="string">Fixed $L.object.name to use the tablename scmessage object.</descript>
      <descript sctype="string">Panel send.notification</descript>
      <descript sctype="string">Passed in $L.object.name as an additional parameter.</descript>
      <descript sctype="string">panel:  decide.action</descript>
      <descript sctype="string">the first exit was changed to lock.record which locked a record EVERY time it was updated and never unlocked it.  I changed the exit back to what it was originally...save.record.</descript>
      <descript sctype="string">Fixed logic so that resetting approvals updates record and doesn't try to re-add it.</descript>
      <descript sctype="string">Added the ability to modify the delete warning message by setting the $se.base.method.delete.msg variable before calling se.base.method.</descript>
      <descript sctype="string">I2145 on DEVTX</descript>
      <descript sctype="string">Added to the changed panel:</descript>
      <descript sctype="string">$L.did.change=true</descript>
      <descript sctype="string">Added to exit.bad.val panel:</descript>
      <descript sctype="string">if ($L.did.change=true) then ($L.exit="changed")</descript>
      <descript sctype="string">devtx 6.1  I1768</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:</descript>
      <descript sctype="string">added.msg</descript>
      <descript sctype="string">Added 5th line:</descript>
      <descript sctype="string">$L.mode="update"</descript>
      <descript sctype="string"/>
      <descript sctype="string">Panel:</descript>
      <descript sctype="string">exit.normal</descript>
      <descript sctype="string">Removed 3rd line:</descript>
      <descript sctype="string">if (not exists("State", $L.file)) then ($L.mode="update")</descript>
      <descript sctype="string">Added in hook for ioevents processing.</descript>
      <descript sctype="string">Added:   cust.visible in $L.file</descript>
      <descript sctype="string">for the "Customer Visible?" parm passed into sc.activity</descript>
      <descript sctype="string">Added flag ($L.bypass.activity) to handle bypassing of activity calls.</descript>
      <descript sctype="string">Added calls to sc.activity.</descript>
      <descript sctype="string">$L.file was being set to $L.file.save before alerts were called which meant that $L.file.save couldn't be  used in the reset.alerts field since it was the same as $L.file.</descript>
      <descript sctype="string">updated the dup.after.save panel to set a flag $L.dup.after.save=true</descript>
      <descript sctype="string">Then on the exit.normal panel the normal processing that was done on the dup.after.save panel is done here if the flag was set to true</descript>
      <descript sctype="string">Added the $L.file.save variable to parameters passed to alert.schedule.</descript>
      <descript sctype="string">Modfied so that during a "save" the format control checks will go against the Add mode when $L.mode#"add" or $L.mode#"open", and against the Delete mode when $L.mode#"close".  Otherwise will still go against the Update mode.</descript>
      <descript sctype="string">changed references to '$L.fc.master' to '$L.master.fc'</descript>
      <descript sctype="string">modified to only call the regular format control record if it is different than the master format control record.</descript>
      <descript sctype="string">panel: run.master.fc</descript>
      <descript sctype="string">changed normal exit from 'save.fc' to 'check.save.fc'</descript>
      <descript sctype="string"/>
      <descript sctype="string">panel: check.save.fc (added decision panel)</descript>
      <descript sctype="string">exit: save.fc</descript>
      <descript sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</descript>
      <descript sctype="string">normal exit: size.check</descript>
      <descript sctype="string"/>
      <descript sctype="string">panel: add.master.fc</descript>
      <descript sctype="string">changed normal exit from 'add.fc' to 'check.add.fc'</descript>
      <descript sctype="string"/>
      <descript sctype="string">panel: check.add.fc (added decision panel)</descript>
      <descript sctype="string">exit: add.fc</descript>
      <descript sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</descript>
      <descript sctype="string">normal exit: size.check</descript>
      <descript sctype="string"/>
      <descript sctype="string">panel: delete.master.fc</descript>
      <descript sctype="string">changed normal exit from 'delete.record.fc' to 'check.delete.record.fc'</descript>
      <descript sctype="string"/>
      <descript sctype="string">panel: check.delete.record.fc (added decision panel)</descript>
      <descript sctype="string">exit: delete.record.fc</descript>
      <descript sctype="string">cond: not same(name in $L.fc.master, name in $L.fc)</descript>
      <descript sctype="string">normal exit: delete.record.rdel</descript>
      <descript sctype="string">no changes</descript>
      <descript sctype="string">no changes</descript>
      <descript sctype="string">panels:</descript>
      <descript sctype="string">check.save.relation</descript>
      <descript sctype="string">updated.suppress</descript>
      <descript sctype="string">send.notification</descript>
      <descript sctype="string">save.relation</descript>
      <descript sctype="string">changed normal exit for these panels from 'run.fc.sub.upd'</descript>
      <descript sctype="string">to: 'run.fc.sub.upd.master'</descript>
      <descript sctype="string">panel: updated.msg.1</descript>
      <descript sctype="string">changed normal exit to:  run.fc.sub.upd.master</descript>
      <descript sctype="string">panel: run.fc.sub.upd.master</descript>
      <descript sctype="string">changed normal exit to: decide.call.fc.sub.upd</descript>
      <descript sctype="string">error exit: exit.bad.val</descript>
      <descript sctype="string">panel: decide.call.fc.sub.upd (added panel...decision panel)</descript>
      <descript sctype="string">exit:  run.fc.sub.upd</descript>
      <descript sctype="string">cond: not same($L.master.fc, $L.fc)</descript>
      <descript sctype="string">normal exit: dup.after.save</descript>
      <descript sctype="string">panel: run.fc.sub.upd</descript>
      <descript sctype="string">changed normal exit to: dup.after.save</descript>
      <descript sctype="string">error exit: exit.bad.val</descript>
      <descript sctype="string">Added ability to send notfications when defined in object record.</descript>
      <descript sctype="string">panel:  size.check</descript>
      <descript sctype="string">Changed thd condition for the 'add.approvals' exit from:</descript>
      <descript sctype="string">approval.location in $L.object={"record", "category", "phase", "object"}</descript>
      <descript sctype="string">to</descript>
      <descript sctype="string">$L.action="add" and approval.location in $L.object={"record", "category", "phase", "object"}</descript>
      <descript sctype="string">Added $L.mode to the Mode parm on the schedule.alerts panel.</descript>
      <descript sctype="string">$L.related.id was misspelled on the start panel as: $L.related.id.</descript>
      <descript sctype="string">removed the '.' at the end.</descript>
      <descript sctype="string">Get Object Name from Object record if not passed in.</descript>
      <descript sctype="string">Recompile only.</descript>
      <descript sctype="string">Now calls post action subroutines for master format control.</descript>
      <descript sctype="string">Was not passing back the $L.file.save variable correctly.  Added statement in exit.normal to make sure it was passed back.</descript>
      <descript sctype="string">No longer recopies save copy of record in background.  Requested by SOAP external transaction developers.</descript>
      <descript sctype="string">Added a message suppress flag - if true, no messages of any type are sent; defaults to false.</descript>
      <descript sctype="string">Changed start expression to use not same instead of ~= to compare formatctrl records.</descript>
      <descript sctype="string">Modified the $L.exit to "added" after adding a record.</descript>
      <descript sctype="string">Nullsubed $axces.bypass.failed.validation and $bypass.failed.validation to false.</descript>
      <descript sctype="string">On decide.action, added "update" to the list of $L.action values that exit to save.record.</descript>
      <descript sctype="string">Added base approvals and alerts.</descript>
      <descript sctype="string">Added checks and calls to master format control.</descript>
      <descript sctype="string">Set $L.exit to "resetrec" on added.msg to return the record back to browse mode after it gets added to the system.</descript>
    </descript>
    <release type="string">SC5</release>
    <sysmodcount type="decimal">27</sysmodcount>
    <sysmoduser type="string">qiqingsong</sysmoduser>
    <sysmodtime type="dateTime">10/17/19 21:03:36</sysmodtime>
  </record>
</recordset>
