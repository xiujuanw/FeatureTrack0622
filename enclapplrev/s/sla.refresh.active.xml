<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<recordset table="enclapplrev">
  <record id="application.name=&quot;sla.refresh.active&quot;" recordid="sla.refresh.active">
    <application.name type="string">sla.refresh.active</application.name>
    <rev.array sctype="array">
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">02/19/20 21:54:17</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">calc</rev.desc>
          <rev.desc sctype="string">next.sla.target.time</rev.desc>
          <rev.desc sctype="string">next.ola.target.time</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhouanqing</rev.name>
        <rev.date type="dateTime">08/20/19 09:37:14</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Request ticket SLT expiration.time should be calculate correctly when set slo Duration calculation method as Service Catalog Item Expiration</rev.desc>
        </rev.desc>
        <change.no type="decimal">155519</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">huangzhi</rev.name>
        <rev.date type="dateTime">05/30/18 06:29:34</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SLA breach is not tagging for tickets</rev.desc>
        </rev.desc>
        <change.no type="decimal">148341</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">08/09/17 08:38:54</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">group fields is array and the calculation in SLMHistory will failed.</rev.desc>
        </rev.desc>
        <change.no type="decimal">140630</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">07/01/17 19:00:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">sla slamodulecontrol should support End Time Field set to downtime.end</rev.desc>
        </rev.desc>
        <change.no type="decimal">132870</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhenqing</rev.name>
        <rev.date type="dateTime">01/21/17 01:00:58</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">sloresponse record should contain valid data in timezone, holiday and calendar fields</rev.desc>
        </rev.desc>
        <change.no type="decimal">138099</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhanzhen</rev.name>
        <rev.date type="dateTime">02/29/16 21:57:02</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">sla slamodulecontrol should support Start Time Field set to planned.start</rev.desc>
        </rev.desc>
        <change.no type="decimal">131053</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">zhanzhen</rev.name>
        <rev.date type="dateTime">01/24/16 16:47:05</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Slo is not working as per condition</rev.desc>
        </rev.desc>
        <change.no type="decimal">130964</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">System.Admin</rev.name>
        <rev.date type="dateTime">08/01/15 22:02:37</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">The status for sloresponsehist is not correct after changing the Incident back to In progress</rev.desc>
          <rev.desc sctype="string">add checking for status is suspended , breached</rev.desc>
        </rev.desc>
        <change.no type="decimal">126602</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">07/24/15 15:45:33</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel: set.expiration</rev.desc>
          <rev.desc sctype="string">Change</rev.desc>
          <rev.desc sctype="string">expiration.time in $L.sloresponse=jscall("UTCDate.calcDate", $L.expiration.date, $L.suspended.interval, $L.time.zone, $L.calendar, $L.holiday)</rev.desc>
          <rev.desc sctype="string">To</rev.desc>
          <rev.desc sctype="string">expiration.time in $L.sloresponse=$L.expiration.date+$L.suspended.interval</rev.desc>
        </rev.desc>
        <change.no type="decimal">122929</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">07/15/15 10:00:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">add new fields to sloreponse for history and reporting</rev.desc>
        </rev.desc>
        <change.no type="decimal">125528</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">05/23/15 12:26:13</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">OLA target status does not become "breached" when the expiration time is reached</rev.desc>
        </rev.desc>
        <change.no type="decimal">123472</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">04/14/15 04:56:43</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">As a process ticket owner, I can view the process SLT of OLA/UC to be shown under the ticket with expected status and next expiration time</rev.desc>
        </rev.desc>
        <change.no type="decimal">3783</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">03/20/15 02:58:02</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">As a SLM manager, I can define a process SLT as a "business hours interval" type with regular work schedule, so that operational process record which created in business hours could be monitored by SLT with the new duration type.</rev.desc>
          <rev.desc sctype="string">1. create new branch for business hours interval caculation</rev.desc>
        </rev.desc>
        <change.no type="decimal">2278</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">10/17/14 16:54:04</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Missing display SLTs details under SLT tab (web client)</rev.desc>
          <rev.desc sctype="string">init agreement category for sloresponse</rev.desc>
        </rev.desc>
        <change.no type="decimal">116745</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">07/24/14 14:46:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCRQ1E99867 SLM Caculation</rev.desc>
          <rev.desc sctype="string">Add new field "Agreement ID" into table Alert for SLM Report</rev.desc>
          <rev.desc sctype="string">Initialize "Agreement ID" of Alert when Alert with type "SLA" was triggered</rev.desc>
        </rev.desc>
        <change.no type="decimal">99867</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">dengxin</rev.name>
        <rev.date type="dateTime">06/19/14 15:49:36</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">add codes in panel in increment, to support Legacy Unordered Suspending Process when the option in slamodulecontrol is checked.</rev.desc>
        </rev.desc>
        <change.no type="decimal">111285</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">dengxin</rev.name>
        <rev.date type="dateTime">05/08/14 18:33:32</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">panel: create.time.arrays</rev.desc>
          <rev.desc sctype="string">add code to set running to false for suspended status, so that total.time will be calculated when suspended.</rev.desc>
        </rev.desc>
        <change.no type="decimal">107689</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">dengxin</rev.name>
        <rev.date type="dateTime">08/24/13 08:25:10</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SLO within change will be achieved when it does not match the SLO condition</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Add logic in start.loop, to check if init.state or final.state is in the value list of progression states.  if one of them is  empty value or not in the value list, the slo will not be generated anymore.</rev.desc>
        </rev.desc>
        <change.no type="decimal">78238</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ZhenQing</rev.name>
        <rev.date type="dateTime">02/13/13 01:51:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">merge PD4&amp;932</rev.desc>
          <rev.desc sctype="string">fix the increment panel</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">qiqingsong</rev.name>
        <rev.date type="dateTime">07/04/12 20:30:09</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Implement Problem's SLA</rev.desc>
          <rev.desc sctype="string">make SLA support PD</rev.desc>
        </rev.desc>
        <change.no type="decimal">84424</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">miquan</rev.name>
        <rev.date type="dateTime">05/18/12 09:34:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">1) panel:check.next.expiration "exit.normal" change to "delete.sla.refresh.schedule"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">2) new panel: delete.sla.refresh.schedule</rev.desc>
          <rev.desc sctype="string">add line: $L.void=rtecall("tag", $L.errcode, $L.tag, $L.file) exit:"delete.schedule.refresh"</rev.desc>
          <rev.desc sctype="string">3) new panel: delete.schedule.refresh</rev.desc>
          <rev.desc sctype="string">call rad:sla.schedule.refresh.delete exit: exit.normal</rev.desc>
        </rev.desc>
        <change.no type="decimal">78851</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">02/22/12 11:38:56</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCRQ1E65843: Task4: Move the RAD applications modified by the PD team from Perforce to SVN QC Ref.	QCCR1E69116 - Problems with SLA processing..  Status progression for Workflow tables incorrect.</rev.desc>
          <rev.desc sctype="string">Panel:	create.time.arrays</rev.desc>
          <rev.desc sctype="string">Change:Added the following expression:if (filename($L.file)={"cm3r", "cm3t"}) then ($L.stat.progression={initial.state in $L.slo, final.state in $L.slo};$L.inactive.phases=jscall("changeManagementExtra.getInactivePhases", category in $L.file, filename($L.file));if (not null($L.inactive.phases)) then ($L.stat.progression=$L.stat.progression+$L.inactive.phases))Panel:	decide.schedule.alerts</rev.desc>
          <rev.desc sctype="string">Change:Changed the exit from "schedule.alerts" to "setup.blank.wfPhase"Panel:	schedule.alerts</rev.desc>
          <rev.desc sctype="string">Change:Added the value "$L.wfPhase" to the WorkflowPhase Record parameterPanel:	set.status.progression</rev.desc>
          <rev.desc sctype="string">Change:Added the following expression:if (filename($L.file)="cm3r") then (status.progression in $L.control={})Panel:	setup.blank.wfPhase</rev.desc>
          <rev.desc sctype="string">Change:New rinit panel</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">ramuro</rev.name>
        <rev.date type="dateTime">02/02/12 14:09:08</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">SLO expiration not recalculated correctly when going from suspended to achieved</rev.desc>
        </rev.desc>
        <change.no type="decimal">66411</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">07/16/11 04:35:11</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Updated start.loop to only do an evaluation of the condition field in the slo record once. Inserted process panel to do the evaluation (start.loop)</rev.desc>
        </rev.desc>
        <change.no type="decimal">62211</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">corvinoa</rev.name>
        <rev.date type="dateTime">06/22/11 12:00:41</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Updated to calculate holiday, calduty and time zone. Passes holiday to calendaring applications if used.</rev.desc>
        </rev.desc>
        <change.no type="decimal">61668</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">02/17/11 14:45:40</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the following panels:</rev.desc>
          <rev.desc sctype="string">* increment:  consolidated the expressions for 'Running' and 'Breached'; reordered the expressions so that the status values are processed in the following order:  'Running', 'Suspended', 'Achieved', 'Inactive', 'Breached'</rev.desc>
          <rev.desc sctype="string">* create.time.arrays:  replaced the following expression:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">for $L.i = 1 to $L.state.length do ($L.i.next=$L.i+1;if ($L.i.next&lt;=$L.state.length) then ($L.current.end.time=$L.i.next in $L.slaactive.times) else ($L.current.end.time=NULL);$L.current.state=$L.i in $L.slaactive.states;$L.current.time=$L.i in $L.slaactive.times;$L.current.index=index($L.current.state, $L.stat.progression);$L.current.suspended=false;if (index($L.current.state, $L.suspend.states)&gt;0) then ($L.suspended=true) else ($L.suspended=false);if ($L.current.index&gt;0) then if ($L.current.index&lt;$L.slo.init.index) then ($L.running=false;$L.started=false;$L.finished=false) else if ($L.current.index&gt;=$L.slo.final.index) then ($L.running=false;$L.started=true;$L.finished=true) else ($L.running=true;$L.started=true;$L.finished=false);if ($L.running=true and $L.suspended=false) then ($L.start=$L.start+{$L.current.time};$L.end=$L.end+{$L.current.end.time}))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">for $L.i = 1 to $L.state.length do ($L.i.next=$L.i+1;if ($L.i.next&lt;=$L.state.length) then ($L.current.end.time=$L.i.next in $L.slaactive.times) else ($L.current.end.time=NULL);$L.current.state=$L.i in $L.slaactive.states;$L.current.time=$L.i in $L.slaactive.times;$L.current.index=index($L.current.state, $L.stat.progression);$L.current.suspended=false;if ($L.current.index&gt;0) then if (index($L.current.state, $L.suspend.states)&gt;0) then ($L.suspended=true) else ($L.suspended=false);if ($L.current.index&gt;0) then if ($L.current.index&lt;$L.slo.init.index) then ($L.running=false;$L.started=false;$L.finished=false) else if ($L.current.index&gt;=$L.slo.final.index) then ($L.running=false;$L.started=true;$L.finished=true) else ($L.running=true;$L.started=true;$L.finished=false);if ($L.running=true and $L.suspended=false) then ($L.start=$L.start+{$L.current.time};$L.end=$L.end+{$L.current.end.time}))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This keeps the SLO suspend values the same if the new state falls outside the Response State Progression.</rev.desc>
        </rev.desc>
        <change.no type="decimal">47912</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">yuli</rev.name>
        <rev.date type="dateTime">12/14/10 20:02:19</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">in order to create alert , although sla is breached, because need update status of object ,via schedule is created by alert</rev.desc>
          <rev.desc sctype="string">Application:sla.refresh.active</rev.desc>
          <rev.desc sctype="string">panel:decide.schedule.alerts</rev.desc>
          <rev.desc sctype="string">condition is changed</rev.desc>
          <rev.desc sctype="string">from:</rev.desc>
          <rev.desc sctype="string">breached in $L.sloresponse</rev.desc>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string">breached in $L.sloresponse and false</rev.desc>
        </rev.desc>
        <change.no type="decimal">57745</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lingyan</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC30453</rev.desc>
          <rev.desc sctype="string">Expiration in a breached sloresponse does include time spent in suspended states.</rev.desc>
          <rev.desc sctype="string">Also contains QC:</rev.desc>
          <rev.desc sctype="string">28293	8645	30966	47911	48570	48538	47593	48725	30770</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Last fix didn't consider the background process.</rev.desc>
        </rev.desc>
        <change.no type="decimal">30453</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lingyan</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC30453</rev.desc>
          <rev.desc sctype="string">Expiration in a breached sloresponse does include time spent in suspended states.</rev.desc>
          <rev.desc sctype="string">Also contains QC:</rev.desc>
          <rev.desc sctype="string">28293	8645	30966	47911	48570	48538	47593	48725	30770</rev.desc>
        </rev.desc>
        <change.no type="decimal">30453</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QCCR48725_48792 Replaced tod() with a variable set to tod() on the start panel. The following panels were modified by replacing tod() with $L.tod(): decide.sla.valid, get.expiration, increment, set.special.interval, set.svc.expiration and start.time.loop.</rev.desc>
        </rev.desc>
        <change.no type="decimal">48725</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">Jianxin.ZHENG</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC48458</rev.desc>
          <rev.desc sctype="string">Elapsed Time (total.time) field is not being calculated correctly in the sloresponse record.</rev.desc>
          <rev.desc sctype="string">Refactor panel "create.time.arrays" and "increment" to solve the elpased time and slo status issue.</rev.desc>
        </rev.desc>
        <change.no type="decimal">48458</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">QC48570/48538 - Modified the 'create.time.arrays' panel as follows:</rev.desc>
          <rev.desc sctype="string">* removed:  $L.j=1</rev.desc>
          <rev.desc sctype="string">* replaced:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">for $L.i = 1 to lng($L.start) do ($L.j=$L.i+1;if ($L.j in $L.start=$L.i in $L.end) then ($L.i in $L.end=$L.j in $L.end))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.start.lng=lng($L.start);$L.i=1</rev.desc>
          <rev.desc sctype="string">while ($L.i&lt;=$L.start.lng) do ($L.j=$L.i;$L.go=true;while ($L.go=true) do ($L.k=$L.j+1;if ($L.k&lt;=$L.start.lng and $L.k in $L.start=$L.j in $L.end) then $L.j+=1 else ($L.go=false;$L.i in $L.end=$L.j in $L.end;$L.i=$L.k)))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This will properly consolidate all adjacent intervals so that the SLO response elapsed time ('total.time') is calculated correctly.</rev.desc>
        </rev.desc>
        <change.no type="decimal">48570</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">lisa</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified the following panels:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* build.svcCartItem.qry - added expression:  $L.breached=false</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* build.svcqry - modified query from:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.svc.sloresp.qry="foreign.filename=\"svcCartItem\" and foreign.key=\""+cartItemId in $L.svcCartItem+"\" and running=true"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">$L.svc.sloresp.qry="foreign.filename=\"svcCartItem\" and foreign.key=\""+cartItemId in $L.svcCartItem+"\" and (running=true or breached=true)"</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* set.svc.time - replaced:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (not null(expiration.time in $L.svc.sloresp)) then ($L.exp.svcCartItem.orig=expiration in $L.svcCartItem;expiration in $L.svcCartItem=expiration.time in $L.svc.sloresp;if null($L.special.time) then ($L.special.time=expiration.time in $L.svc.sloresp) else ($L.special.time=max($L.special.time, expiration.time in $L.svc.sloresp)))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (running in $L.svc.sloresp and not null(expiration.time in $L.svc.sloresp)) then ($L.exp.svcCartItem.orig=expiration in $L.svcCartItem;expiration in $L.svcCartItem=expiration.time in $L.svc.sloresp;if null($L.special.time) then ($L.special.time=expiration.time in $L.svc.sloresp) else ($L.special.time=max($L.special.time, expiration.time in $L.svc.sloresp)))</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if breached in $L.svc.sloresp then ($L.breached=true)</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">* set.svc.expiration - replaced:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (expiration in $L.sloresponse&lt;tod()) then (breached in $L.sloresponse=true) else ($L.time.remaining=expiration in $L.sloresponse - tod())</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">with:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (null($L.expiration.date) and $L.breached or $L.expiration.date&lt;tod()) then (breached in $L.sloresponse=true) else ($L.time.remaining=$L.expiration.date - tod())</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">This way, it will set the sloresponse to be breached if the only corresponding svcCartItem sloresponse is also breached.</rev.desc>
        </rev.desc>
        <change.no type="decimal">43564</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Fixed reference to slo.id</rev.desc>
        </rev.desc>
        <change.no type="decimal">41344</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">falcon</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Refactored create.time.arrays</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Needed to account for condition when an SLO is coming out of a suspend state, but was not previously running (should continue to remain inactive).</rev.desc>
        </rev.desc>
        <change.no type="decimal">39948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">cblanck</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Rally Defect DE4042</rev.desc>
          <rev.desc sctype="string">panel:  create.time.arrays</rev.desc>
          <rev.desc sctype="string">removed all the rtecalls to the "log" function</rev.desc>
        </rev.desc>
        <change.no type="decimal">4042</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">rolfel</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">DE2521 - IIA System - everyone with update rights can get to the prior phase of a problem</rev.desc>
          <rev.desc sctype="string">Panel: create.time.arrays</rev.desc>
          <rev.desc sctype="string">Added the following condition to the 'for' loop:</rev.desc>
          <rev.desc sctype="string">if ($L.current.state~=$L.slo.fin.state and not null($L.start) and not null($L.end) and $L.i.pre in $L.slaactive.states=$L.slo.fin.state) then ($L.end={};</rev.desc>
          <rev.desc sctype="string">$L.start=$L.start+{$L.current.time};</rev.desc>
          <rev.desc sctype="string">running in $L.sloresponse=true;</rev.desc>
          <rev.desc sctype="string">suspended in $L.sloresponse=false) else</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel increment</rev.desc>
          <rev.desc sctype="string">Changed expression on line 9 from:</rev.desc>
          <rev.desc sctype="string">if (current.status in $L.sloresponse=4 and (total.time in $L.sloresponse='00:00:00' or total.time in $L.sloresponse=NULL)) then (current.status in $L.sloresponse=5)</rev.desc>
          <rev.desc sctype="string">to:</rev.desc>
          <rev.desc sctype="string">if (current.status in $L.sloresponse=4 and ($L.current.state~=$L.last.state and $L.fin.hit=false and (total.time in $L.sloresponse='00:00:00' or total.time in $L.sloresponse=NULL))) then (current.status in $L.sloresponse=5)</rev.desc>
        </rev.desc>
        <change.no type="decimal">41578</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">sanderson</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Panel create.time.arrays</rev.desc>
          <rev.desc sctype="string">Change to address two suspend states in succession:</rev.desc>
          <rev.desc sctype="string">Change 2nd to last if by adding:</rev.desc>
          <rev.desc sctype="string">and index($L.current.state, $L.suspend.states)=0</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">Goes to:</rev.desc>
          <rev.desc sctype="string">lng($L.start)=lng($L.end) and index($L.i.pre in $L.slaactive.states, $L.suspend.states)&gt;0 and index($L.current.state, $L.suspend.states)=0 and $L.fin.hit=false</rev.desc>
          <rev.desc sctype="string">from</rev.desc>
          <rev.desc sctype="string">lng($L.start)=lng($L.end) and index($L.i.pre in $L.slaactive.states, $L.suspend.states)&gt;0 and $L.fin.hit=false</rev.desc>
        </rev.desc>
        <change.no type="decimal">39948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On the decide.schedule.alerts panel, added a condition to bypass scheduling of alerts if the SLO is breached.</rev.desc>
        </rev.desc>
        <change.no type="decimal">40948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modifications to make sure the Expiration time of a breached SLO is set to NULL. Panels modified include set.expiration (expression removal), get.past.expiration (deleted), and check.get.expiration (exit change).</rev.desc>
        </rev.desc>
        <change.no type="decimal">40948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Completely refactored/consolidate code on create.time.arrays.0 and create.time.arrays. There</rev.desc>
          <rev.desc sctype="string">is no longer a create.time.arrays.0 panel. Refactored code now accounts for all possible boundary conditions involving the life cycle of a ticket, including reopens, suspensions, and non-standard type updates.</rev.desc>
        </rev.desc>
        <change.no type="decimal">39948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modifications to panels create.time.arrays.0 and create.time.arrays</rev.desc>
        </rev.desc>
        <change.no type="decimal">39948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">on set.active.responses panel, set responses field directly equal to $L.responses</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On the create.time.arrays panel, added:</rev.desc>
          <rev.desc sctype="string">" and active in $L.sloresponse=true"</rev.desc>
          <rev.desc sctype="string">to the expressions setting the running and suspended flags in the sloresponse rec</rev.desc>
        </rev.desc>
        <change.no type="decimal">39948</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified error exit on start.loop panel so that invalid SLO conditions will simply proceed to the next SLO evaluation.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added processing to support multiple SLAs.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On increment panel, added filter for 'suspended' state to the if-then statement setting next.breach in $L.active.</rev.desc>
        </rev.desc>
        <change.no type="decimal">39739</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added the following expression to the finish.time.loop panel:</rev.desc>
          <rev.desc sctype="string"/>
          <rev.desc sctype="string">if (filename($L.file)="svcCartItem") then ($L.calendar=nullsub(schedule in $L.file, $L.calendar))</rev.desc>
        </rev.desc>
        <change.no type="decimal">39383</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added processing to check for a valid duration.field value (if this option is being used).. in case a user has entered a wrong data type, the parse function used to evaluate it will not exit in an unrecoverable error</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added new branch/condition to decision panel=check.special.time to check for "svc" condition (to find slowest expiration for associated svcCartItems... new processing added beginning with panel init.svcCartItem</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">On panel=finish.time.loop, added condition such that if the duration type is "stored", then set $L.allowed.time based on the duration field in the record.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">a rewrite of the response time calculations on panel create.time.arrays (to remove the dependency on the sequence of progression states found in slamodulecontrol records).. processing now divided between create.time.arrays.0 and create.time.arrays, a new panel called check.null.states which checks if slaactive record has a NULL event list, a new panel called set.dur.null to set fields based on a NULL event list; added a statement to panel add.interval to make sure $L.temp.interval is '00:00:00' if the returned value ends up being &lt;'00:00:00'</rev.desc>
        </rev.desc>
        <change.no type="decimal">38035</change.no>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Invalid use of the not function on start.loop panel causing evaluate errors. Changed condition: not evaluate(condition in $L.slo) to: evaluate(condition in $L.slo)=false</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">devtxI1833 --&gt; On the set.special.interval panel, changed $L.x=lng(denull($L.end)) to $L.x=lng(denull($L.start))</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added evaluate(condition in $L.slo)="unknown" as a skip condition on start.loop.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">The EOD and EOW were not setting the allowed time for alerts with respect to their calendar and timezone.  Corrected this.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">don't schedule alerts when an SLO is not running or suspended.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified to set $L.allowed.time when special time processing is used (EOD or EOW)</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added the following line to exit.normal:</rev.desc>
          <rev.desc sctype="string">$INTO.FILE=$L.file</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified to add user specification for end of day window and end of week.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Modified to show expiration dates for breached items.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added licensing check.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">pbudic</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">No longer sets expiration for special type if the clock is not running.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
      <rev.array sctype="structure">
        <rev.name type="string">prietke</rev.name>
        <rev.date type="dateTime">00:00:00</rev.date>
        <rev.desc sctype="array">
          <rev.desc sctype="string">Added processing to handle phases for response status progression.</rev.desc>
        </rev.desc>
        <change.no NullValue="1" type="decimal"/>
      </rev.array>
    </rev.array>
    <descript sctype="array">
      <descript sctype="string">calc</descript>
      <descript sctype="string">next.sla.target.time</descript>
      <descript sctype="string">next.ola.target.time</descript>
      <descript sctype="string">Request ticket SLT expiration.time should be calculate correctly when set slo Duration calculation method as Service Catalog Item Expiration</descript>
      <descript sctype="string">SLA breach is not tagging for tickets</descript>
      <descript sctype="string">group fields is array and the calculation in SLMHistory will failed.</descript>
      <descript sctype="string">sla slamodulecontrol should support End Time Field set to downtime.endsloresponse record should contain valid data in timezone, holiday and calendar fields</descript>
      <descript sctype="string">sla slamodulecontrol should support Start Time Field set to planned.start</descript>
      <descript sctype="string">Slo is not working as per condition</descript>
      <descript sctype="string">The status for sloresponsehist is not correct after changing the Incident back to In progress</descript>
      <descript sctype="string">add checking for status is suspended , breached</descript>
      <descript sctype="string">Panel: set.expiration</descript>
      <descript sctype="string">Change</descript>
      <descript sctype="string">expiration.time in $L.sloresponse=jscall("UTCDate.calcDate", $L.expiration.date, $L.suspended.interval, $L.time.zone, $L.calendar, $L.holiday)</descript>
      <descript sctype="string">To</descript>
      <descript sctype="string">expiration.time in $L.sloresponse=$L.expiration.date+$L.suspended.interval</descript>
      <descript sctype="string">OLA target status does not become "breached" when the expiration time is reached</descript>
      <descript sctype="string">As a process ticket owner, I can view the process SLT of OLA/UC to be shown under the ticket with expected status and next expiration time</descript>
      <descript sctype="string">As a SLM manager, I can define a process SLT as a "business hours interval" type with regular work schedule, so that operational process record which created in business hours could be monitored by SLT with the new duration type.</descript>
      <descript sctype="string">1. create new branch for business hours interval caculation</descript>
      <descript sctype="string">Missing display SLTs details under SLT tab (web client)</descript>
      <descript sctype="string">init agreement category for sloresponse</descript>
      <descript sctype="string">QCRQ1E99867 SLM Caculation</descript>
      <descript sctype="string">Add new field "Agreement ID" into table Alert for SLM Report</descript>
      <descript sctype="string">Initialize "Agreement ID" of Alert when Alert with type "SLA" was triggered</descript>
      <descript sctype="string">add codes in panel in increment, to support Legacy Unordered Suspending Process when the option in slamodulecontrol is checked.</descript>
      <descript sctype="string">panel: create.time.arrays</descript>
      <descript sctype="string">add code to set running to false for suspended status, so that total.time will be calculated when suspended.</descript>
      <descript sctype="string">SLO within change will be achieved when it does not match the SLO condition</descript>
      <descript sctype="string"/>
      <descript sctype="string">2) new panel: delete.sla.refresh.schedule</descript>
      <descript sctype="string">add line: $L.void=rtecall("tag", $L.errcode, $L.tag, $L.file) exit:"delete.schedule.refresh"</descript>
      <descript sctype="string">3) new panel: delete.schedule.refresh</descript>
      <descript sctype="string">call rad:sla.schedule.refresh.delete exit: exit.normal</descript>
      <descript sctype="string">QCRQ1E65843: Task4: Move the RAD applications modified by the PD team from Perforce to SVN QC Ref.	QCCR1E69116 - Problems with SLA processing..  Status progression for Workflow tables incorrect.</descript>
      <descript sctype="string">Panel:	create.time.arrays</descript>
      <descript sctype="string">Change:Added the following expression:if (filename($L.file)={"cm3r", "cm3t"}) then ($L.stat.progression={initial.state in $L.slo, final.state in $L.slo};$L.inactive.phases=jscall("changeManagementExtra.getInactivePhases", category in $L.file, filename($L.file));if (not null($L.inactive.phases)) then ($L.stat.progression=$L.stat.progression+$L.inactive.phases))Panel:	decide.schedule.alerts</descript>
      <descript sctype="string">Change:Changed the exit from "schedule.alerts" to "setup.blank.wfPhase"Panel:	schedule.alerts</descript>
      <descript sctype="string">Change:Added the value "$L.wfPhase" to the WorkflowPhase Record parameterPanel:	set.status.progression</descript>
      <descript sctype="string">Change:Added the following expression:if (filename($L.file)="cm3r") then (status.progression in $L.control={})Panel:	setup.blank.wfPhase</descript>
      <descript sctype="string">Change:New rinit panelSLO expiration not recalculated correctly when going from suspended to achieved</descript>
      <descript sctype="string">Updated start.loop to only do an evaluation of the condition field in the slo record once. Inserted process panel to do the evaluation (start.loop)</descript>
      <descript sctype="string">Updated to calculate holiday, calduty and time zone. Passes holiday to calendaring applications if used.</descript>
      <descript sctype="string">Modified the following panels:</descript>
      <descript sctype="string">* increment:  consolidated the expressions for 'Running' and 'Breached'; reordered the expressions so that the status values are processed in the following order:  'Running', 'Suspended', 'Achieved', 'Inactive', 'Breached'</descript>
      <descript sctype="string">* create.time.arrays:  replaced the following expression:</descript>
      <descript sctype="string"/>
      <descript sctype="string">for $L.i = 1 to $L.state.length do ($L.i.next=$L.i+1;if ($L.i.next&lt;=$L.state.length) then ($L.current.end.time=$L.i.next in $L.slaactive.times) else ($L.current.end.time=NULL);$L.current.state=$L.i in $L.slaactive.states;$L.current.time=$L.i in $L.slaactive.times;$L.current.index=index($L.current.state, $L.stat.progression);$L.current.suspended=false;if (index($L.current.state, $L.suspend.states)&gt;0) then ($L.suspended=true) else ($L.suspended=false);if ($L.current.index&gt;0) then if ($L.current.index&lt;$L.slo.init.index) then ($L.running=false;$L.started=false;$L.finished=false) else if ($L.current.index&gt;=$L.slo.final.index) then ($L.running=false;$L.started=true;$L.finished=true) else ($L.running=true;$L.started=true;$L.finished=false);if ($L.running=true and $L.suspended=false) then ($L.start=$L.start+{$L.current.time};$L.end=$L.end+{$L.current.end.time}))</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">for $L.i = 1 to $L.state.length do ($L.i.next=$L.i+1;if ($L.i.next&lt;=$L.state.length) then ($L.current.end.time=$L.i.next in $L.slaactive.times) else ($L.current.end.time=NULL);$L.current.state=$L.i in $L.slaactive.states;$L.current.time=$L.i in $L.slaactive.times;$L.current.index=index($L.current.state, $L.stat.progression);$L.current.suspended=false;if ($L.current.index&gt;0) then if (index($L.current.state, $L.suspend.states)&gt;0) then ($L.suspended=true) else ($L.suspended=false);if ($L.current.index&gt;0) then if ($L.current.index&lt;$L.slo.init.index) then ($L.running=false;$L.started=false;$L.finished=false) else if ($L.current.index&gt;=$L.slo.final.index) then ($L.running=false;$L.started=true;$L.finished=true) else ($L.running=true;$L.started=true;$L.finished=false);if ($L.running=true and $L.suspended=false) then ($L.start=$L.start+{$L.current.time};$L.end=$L.end+{$L.current.end.time}))</descript>
      <descript sctype="string"/>
      <descript sctype="string">This keeps the SLO suspend values the same if the new state falls outside the Response State Progression.</descript>
      <descript sctype="string">in order to create alert , although sla is breached, because need update status of object ,via schedule is created by alert</descript>
      <descript sctype="string">Application:sla.refresh.active</descript>
      <descript sctype="string">panel:decide.schedule.alerts</descript>
      <descript sctype="string">condition is changed</descript>
      <descript sctype="string">from:</descript>
      <descript sctype="string">breached in $L.sloresponse</descript>
      <descript sctype="string">to:</descript>
      <descript sctype="string">breached in $L.sloresponse and false</descript>
      <descript sctype="string">QC30453</descript>
      <descript sctype="string">Expiration in a breached sloresponse does include time spent in suspended states.</descript>
      <descript sctype="string">Also contains QC:</descript>
      <descript sctype="string">28293	8645	30966	47911	48570	48538	47593	48725	30770</descript>
      <descript sctype="string"/>
      <descript sctype="string">Last fix didn't consider the background process.</descript>
      <descript sctype="string">QC30453/49125</descript>
      <descript sctype="string">Expiration in a breached sloresponse does include time spent in suspended states.</descript>
      <descript sctype="string">QCCR48725_48792 Replaced tod() with a variable set to tod() on the start panel. The following panels were modified by replacing tod() with $L.tod(): decide.sla.valid, get.expiration, increment, set.special.interval, set.svc.expiration and start.time.loop.</descript>
      <descript sctype="string">QC48458</descript>
      <descript sctype="string">Elapsed Time (total.time) field is not being calculated correctly in the sloresponse record.</descript>
      <descript sctype="string">Refactor panel "create.time.arrays" and "increment" to solve the elpased time and slo status issue.</descript>
      <descript sctype="string">QC48570/48538 - Modified the 'create.time.arrays' panel as follows:</descript>
      <descript sctype="string">* removed:  $L.j=1</descript>
      <descript sctype="string">* replaced:</descript>
      <descript sctype="string"/>
      <descript sctype="string">for $L.i = 1 to lng($L.start) do ($L.j=$L.i+1;if ($L.j in $L.start=$L.i in $L.end) then ($L.i in $L.end=$L.j in $L.end))</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.start.lng=lng($L.start);$L.i=1</descript>
      <descript sctype="string">while ($L.i&lt;=$L.start.lng) do ($L.j=$L.i;$L.go=true;while ($L.go=true) do ($L.k=$L.j+1;if ($L.k&lt;=$L.start.lng and $L.k in $L.start=$L.j in $L.end) then $L.j+=1 else ($L.go=false;$L.i in $L.end=$L.j in $L.end;$L.i=$L.k)))</descript>
      <descript sctype="string"/>
      <descript sctype="string">This will properly consolidate all adjacent intervals so that the SLO response elapsed time ('total.time') is calculated correctly.</descript>
      <descript sctype="string">Modified the following panels:</descript>
      <descript sctype="string"/>
      <descript sctype="string">* build.svcCartItem.qry - added expression:  $L.breached=false</descript>
      <descript sctype="string"/>
      <descript sctype="string">* build.svcqry - modified query from:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.svc.sloresp.qry="foreign.filename=\"svcCartItem\" and foreign.key=\""+cartItemId in $L.svcCartItem+"\" and running=true"</descript>
      <descript sctype="string"/>
      <descript sctype="string">to:</descript>
      <descript sctype="string"/>
      <descript sctype="string">$L.svc.sloresp.qry="foreign.filename=\"svcCartItem\" and foreign.key=\""+cartItemId in $L.svcCartItem+"\" and (running=true or breached=true)"</descript>
      <descript sctype="string"/>
      <descript sctype="string">* set.svc.time - replaced:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (not null(expiration.time in $L.svc.sloresp)) then ($L.exp.svcCartItem.orig=expiration in $L.svcCartItem;expiration in $L.svcCartItem=expiration.time in $L.svc.sloresp;if null($L.special.time) then ($L.special.time=expiration.time in $L.svc.sloresp) else ($L.special.time=max($L.special.time, expiration.time in $L.svc.sloresp)))</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (running in $L.svc.sloresp and not null(expiration.time in $L.svc.sloresp)) then ($L.exp.svcCartItem.orig=expiration in $L.svcCartItem;expiration in $L.svcCartItem=expiration.time in $L.svc.sloresp;if null($L.special.time) then ($L.special.time=expiration.time in $L.svc.sloresp) else ($L.special.time=max($L.special.time, expiration.time in $L.svc.sloresp)))</descript>
      <descript sctype="string"/>
      <descript sctype="string">if breached in $L.svc.sloresp then ($L.breached=true)</descript>
      <descript sctype="string"/>
      <descript sctype="string">* set.svc.expiration - replaced:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (expiration in $L.sloresponse&lt;tod()) then (breached in $L.sloresponse=true) else ($L.time.remaining=expiration in $L.sloresponse - tod())</descript>
      <descript sctype="string"/>
      <descript sctype="string">with:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (null($L.expiration.date) and $L.breached or $L.expiration.date&lt;tod()) then (breached in $L.sloresponse=true) else ($L.time.remaining=$L.expiration.date - tod())</descript>
      <descript sctype="string"/>
      <descript sctype="string">This way, it will set the sloresponse to be breached if the only corresponding svcCartItem sloresponse is also breached.</descript>
      <descript sctype="string">Fixed reference to slo.id</descript>
      <descript sctype="string">Refactored create.time.arrays</descript>
      <descript sctype="string">Needed to account for condition when an SLO is coming out of a suspend state, but was not previously running (should continue to remain inactive).</descript>
      <descript sctype="string">Rally Defect DE4042</descript>
      <descript sctype="string">panel:  create.time.arrays</descript>
      <descript sctype="string">removed all the rtecalls to the "log" function</descript>
      <descript sctype="string">DE2521 - IIA System - everyone with update rights can get to the prior phase of a problem</descript>
      <descript sctype="string">Panel: create.time.arrays</descript>
      <descript sctype="string">Added the following condition to the 'for' loop:</descript>
      <descript sctype="string">if ($L.current.state~=$L.slo.fin.state and not null($L.start) and not null($L.end) and $L.i.pre in $L.slaactive.states=$L.slo.fin.state) then ($L.end={};</descript>
      <descript sctype="string">$L.start=$L.start+{$L.current.time};</descript>
      <descript sctype="string">running in $L.sloresponse=true;</descript>
      <descript sctype="string">suspended in $L.sloresponse=false) else</descript>
      <descript sctype="string">Panel increment</descript>
      <descript sctype="string">Changed expression on line 9 from:</descript>
      <descript sctype="string">if (current.status in $L.sloresponse=4 and (total.time in $L.sloresponse='00:00:00' or total.time in $L.sloresponse=NULL)) then (current.status in $L.sloresponse=5)</descript>
      <descript sctype="string">to:</descript>
      <descript sctype="string">if (current.status in $L.sloresponse=4 and ($L.current.state~=$L.last.state and $L.fin.hit=false and (total.time in $L.sloresponse='00:00:00' or total.time in $L.sloresponse=NULL))) then (current.status in $L.sloresponse=5)</descript>
      <descript sctype="string">Panel create.time.arrays</descript>
      <descript sctype="string">Change to address two suspend states in succession:</descript>
      <descript sctype="string">Change 2nd to last if by adding:</descript>
      <descript sctype="string">and index($L.current.state, $L.suspend.states)=0</descript>
      <descript sctype="string"/>
      <descript sctype="string">Goes to:</descript>
      <descript sctype="string">lng($L.start)=lng($L.end) and index($L.i.pre in $L.slaactive.states, $L.suspend.states)&gt;0 and index($L.current.state, $L.suspend.states)=0 and $L.fin.hit=false</descript>
      <descript sctype="string">from</descript>
      <descript sctype="string">lng($L.start)=lng($L.end) and index($L.i.pre in $L.slaactive.states, $L.suspend.states)&gt;0 and $L.fin.hit=false</descript>
      <descript sctype="string">On the decide.schedule.alerts panel, added a condition to bypass scheduling of alerts if the SLO is breached.</descript>
      <descript sctype="string">Modifications to make sure the Expiration time of a breached SLO is set to NULL. Panels modified include set.expiration (expression removal), get.past.expiration (deleted), and check.get.expiration (exit change).</descript>
      <descript sctype="string">Completely refactored/consolidate code on create.time.arrays.0 and create.time.arrays. There</descript>
      <descript sctype="string">is no longer a create.time.arrays.0 panel. Refactored code now accounts for all possible boundary conditions involving the life cycle of a ticket, including reopens, suspensions, and non-standard type updates.</descript>
      <descript sctype="string">Modifications to panels create.time.arrays.0 and create.time.arrays</descript>
      <descript sctype="string">on set.active.responses panel, set responses field directly equal to $L.responses</descript>
      <descript sctype="string">On the create.time.arrays panel, added:</descript>
      <descript sctype="string">" and active in $L.sloresponse=true"</descript>
      <descript sctype="string">to the expressions setting the running and suspended flags in the sloresponse rec</descript>
      <descript sctype="string">Modified error exit on start.loop panel so that invalid SLO conditions will simply proceed to the next SLO evaluation.</descript>
      <descript sctype="string">Added processing to support multiple SLAs.</descript>
      <descript sctype="string">On increment panel, added filter for 'suspended' state to the if-then statement setting next.breach in $L.active.</descript>
      <descript sctype="string">Added the following expression to the finish.time.loop panel:</descript>
      <descript sctype="string"/>
      <descript sctype="string">if (filename($L.file)="svcCartItem") then ($L.calendar=nullsub(schedule in $L.file, $L.calendar))</descript>
      <descript sctype="string">Added processing to check for a valid duration.field value (if this option is being used).. in case a user has entered a wrong data type, the parse function used to evaluate it will not exit in an unrecoverable error</descript>
      <descript sctype="string">Added new branch/condition to decision panel=check.special.time to check for "svc" condition (to find slowest expiration for associated svcCartItems... new processing added beginning with panel init.svcCartItem</descript>
      <descript sctype="string">On panel=finish.time.loop, added condition such that if the duration type is "stored", then set $L.allowed.time based on the duration field in the record.</descript>
      <descript sctype="string">a rewrite of the response time calculations on panel create.time.arrays (to remove the dependency on the sequence of progression states found in slamodulecontrol records).. processing now divided between create.time.arrays.0 and create.time.arrays, a new panel called check.null.states which checks if slaactive record has a NULL event list, a new panel called set.dur.null to set fields based on a NULL event list; added a statement to panel add.interval to make sure $L.temp.interval is '00:00:00' if the returned value ends up being &lt;'00:00:00'</descript>
      <descript sctype="string">Invalid use of the not function on start.loop panel causing evaluate errors. Changed condition: not evaluate(condition in $L.slo) to: evaluate(condition in $L.slo)=false</descript>
      <descript sctype="string">devtxI1833 --&gt; On the set.special.interval panel, changed $L.x=lng(denull($L.end)) to $L.x=lng(denull($L.start))</descript>
      <descript sctype="string">Added evaluate(condition in $L.slo)="unknown" as a skip condition on start.loop.</descript>
      <descript sctype="string">The EOD and EOW were not setting the allowed time for alerts with respect to their calendar and timezone.  Corrected this.</descript>
      <descript sctype="string">don't schedule alerts when an SLO is not running or suspended.</descript>
      <descript sctype="string">Modified to set $L.allowed.time when special time processing is used (EOD or EOW)</descript>
      <descript sctype="string">Added the following line to exit.normal:</descript>
      <descript sctype="string">$INTO.FILE=$L.file</descript>
      <descript sctype="string">Modified to add user specification for end of day window and end of week.</descript>
      <descript sctype="string">Modified to show expiration dates for breached items.</descript>
      <descript sctype="string">Added licensing check.</descript>
      <descript sctype="string">No longer sets expiration for special type if the clock is not running.</descript>
      <descript sctype="string">Added processing to handle phases for response status progression.</descript>
    </descript>
    <release type="string">SC6.0</release>
    <sysmodcount type="decimal">29</sysmodcount>
    <sysmoduser type="string">falcon</sysmoduser>
    <sysmodtime type="dateTime">02/19/20 21:54:53</sysmodtime>
  </record>
</recordset>
